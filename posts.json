{
  "posts": [{"id":"2015/06/19/copy-to-clipboard-without-using-flash","title":"Copy to Clipboard Without Using Flash!","dockyarder":"marin-abernethy","body":"<p>For a long time we&#39;ve had to rely on Flash plugins like <a href=\"https://github.com/zeroclipboard/zeroclipboard\">ZeroClipboard</a> \nto copy text to the clipboard. While Flash still remains the only cross-browser solution for copying to a user\u2019s clipboard, \nsome browsers have recently added the ability to trigger <code>cut</code> and <code>copy</code> using <code>document.execCommand()</code>! Specifically, \n<a href=\"http://caniuse.com/#search=clipboard%20API\">IE10+, Chrome 43+, and Opera29+</a>. Firefox seems to have some\n<a href=\"http://kb.mozillazine.org/Granting_JavaScript_access_to_the_clipboard\">options</a> that allow users to grant permissions \nto certain sites to access the clipboard, but I haven&#39;t tried it out myself.</p>\n\n<p>For those of you not familiar with <code>execCommand()</code>, it is  more than just <code>cut</code> and <code>copy</code>! It is one of the core methods\nof rich-text editing in browsers. You can manipulate the contents of the current document, current selection, or a \nspecified range through various commands. Some other common commands include: <code>bold</code>, <code>delete</code>,  <code>createLink</code>, and \n<code>indent</code>.</p>\n\n<p><strong><code>execCommand(commandName [, showUI [, value]])</code></strong></p>\n\n<ul>\n<li><code>commandName</code> (String): the property that you are validating.</li>\n<li><code>showUI</code> (Boolean) <em>optional</em>: Display a user interface if the command supports one. Defaults to false.</li>\n<li><code>value</code> (DOMString) <em>optional</em>: Specifies the string, number, or other value to assign. Possible values\ndepend on the command. Pass an argument of null if no argument is needed.</li>\n</ul>\n\n<p><strong>Note:</strong> You must set <code>document.designMode = &quot;on&quot;</code>, or set <code>contenteditable=&quot;true&quot;</code> on the element that you wish to use <code>execCommand()</code> on. </p>\n\n<p>However, like <code>cut</code> and <code>copy</code>, not all commands are enabled across all browsers. I created \nan <a href=\"http://emberjs.jsbin.com/hagupu/5/edit?html,js,output\">Ember JSBin</a> with a simple WYSIWYG\nto demonstrate some of what <code>execCommand()</code> can do. Feel free to play around! </p>\n\n<p>Now to demonstrate how <code>execCommand</code> paired with the Selection API can easily copy to a user&#39;s clipboard. \nBelow is our HTMLBars with a promo code string that we want to copy.</p>\n<div class=\"highlight hbs \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n  <td class=\"code\"><pre>&lt;p&gt;Promo code: &lt;span class=&quot;promo-code&quot;&gt;SALE123&lt;/span&gt;&lt;/p&gt;\n&lt;p&gt;&lt;button {{action &quot;copyToClip&quot;}}&gt;Copy&lt;/button&gt;&lt;/p&gt;\n</pre></td>\n</tr></table>\n</div></div>\n<p>When the <code>Copy</code> button is clicked, the following action will be called:</p>\n<div class=\"highlight js \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n  <td class=\"code\"><pre><span class=\"function\">copyToClip</span>: <span class=\"keyword\">function</span>() {\n  const promoCode = document.querySelector(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">.promo-code</span><span class=\"delimiter\">'</span></span>);\n  const range = document.createRange();  \n  range.selectNode(promoCode);  \n  window.getSelection().addRange(range);\n  document.execCommand(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">copy</span><span class=\"delimiter\">'</span></span>); \n  window.getSelection().removeAllRanges();\n}\n</pre></td>\n</tr></table>\n</div></div>\n<p>In this action we create a range of the document and add our promo code text as a node of that range. We then \nuse the Selection API method <code>window.getSelection().addRange()</code> to add the part of the document we want to copy\nto the user&#39;s <code>selection</code>. <code>document.execCommand(&#39;copy&#39;)</code> then copies that selection to the clipboard. \nAnd finally, we remove the selection by calling <code>window.getSelection().removeAllRanges()</code> so that the user \nnever sees the highlighting.</p>\n\n<p>And that&#39;s it! If you wanted to confirm everything worked as expected you can examine the response of \n<code>document.execCommand()</code>; it returns <code>false</code> if the command is not supported or enabled.</p>\n\n<p>You can check this example out in this <a href=\"http://emberjs.jsbin.com/faqixa/3/edit?html,js,output\">Ember JSBin</a>.</p>\n","summary":"\"document.execCommand()\" has now added support for \"copy\" in some browsers","illustration":null,"illustration_alt":null,"tags":["javascript"],"shallow":false,"date":"2015-06-19T00:00:00Z"},{"id":"2015/06/12/maintaining-session-in-phoenix-integration-tests","title":"Maintaining a session in Phoenix integration tests","dockyarder":"dan-mcclain","body":"<p>I&#39;m using <a href=\"http://www.phoenixframework.org\">Phoenix</a> to power the backends for a couple of Ember projects I am\nwriting. For those applications, I&#39;ve been using OAuth2 + cookie-based sessions\nto authenticate my users. When testing the authentication flow, I wanted\nto make sure that I was properly retrieving my session from the cookie I\npreviously set.</p>\n\n<h2>The hard way (pre Phoenix v0.13)</h2>\n\n<p>The following maintains a session across multiple requests:</p>\n<div class=\"highlight elixir \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n</pre></td>\n  <td class=\"code\"><pre>test &quot;Creating a session with a GitHub code&quot; do\n  use_cassette &quot;successful_sign_in&quot; do\n    response = conn(:post, &quot;/api/v1/session&quot;, %{ &quot;authorizationCode&quot; =&gt; &quot;dan&quot;, &quot;format&quot; =&gt; &quot;json&quot;, &quot;provider&quot; =&gt; &quot;github-oauth2&quot; })\n    |&gt; DoorApi.Endpoint.call([])\n\n    assert response.status == 201\n\n    current_session_request = conn(:get,  &quot;/api/v1/session&quot;)\n\n    current_session_response = response.cookies\n    |&gt; Enum.reduce(current_session_request, fn ({key, value}, conn) -&gt; put_req_cookie(conn, key, value) end)\n    |&gt; DoorApi.Endpoint.call([])\n\n    assert current_session_response.status == 200\n  end\nend\n</pre></td>\n</tr></table>\n</div></div>\n<p>The above code copies the cookies from the first (completed) request, and\nappends them to the second request. This allows you to retrieve information\nfrom the session returned in the first request.</p>\n\n<h2>But wait! There is a better way</h2>\n\n<p>With the release of Phoenix v0.12, new test helpers debuted that allow for the\nconcept of connection recycling.  TL;DR: the new helpers create a new\nconnection with the details of the old, completed connection. We can update our\nfirst example to use the new helpers:</p>\n<div class=\"highlight elixir \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n</pre></td>\n  <td class=\"code\"><pre>test &quot;Creating a session with a GitHub code&quot; do\n  use_cassette &quot;successful_sign_in&quot; do\n    # We call the conn function to get us an initial connection.\n    # From then on, we just pass the result of the last request to the helpers\n    conn = post(conn(), &quot;/api/v1/session&quot;, %{ &quot;authorizationCode&quot; =&gt; &quot;dan&quot;, &quot;format&quot; =&gt; &quot;json&quot;, &quot;provider&quot; =&gt; &quot;github-oauth2&quot; })\n\n    assert conn.status == 201\n\n    conn = get(conn, &quot;/api/v1/session&quot;)\n\n    assert conn.status == 200\n  end\nend\n</pre></td>\n</tr></table>\n</div></div>\n<p>The helpers remove the need to call our endpoint, and make the code much more concise. This is a huge improvement to testing in Phoenix.\n<a href=\"http://hexdocs.pm/phoenix/Phoenix.ConnTest.html\">You can see a bit more about the helpers in the <code>Phoenix.ConnTest</code> documentation</a></p>\n","summary":"Your server has authentication, and you want to be authenticated in your tests","illustration":null,"illustration_alt":null,"tags":["elixir","phoenix","testing"],"shallow":false,"date":"2015-06-12T00:00:00Z"},{"id":"2015/06/09/ux-camp-2015","title":"Go: UX Camp 2015","dockyarder":"steven-trevathan","body":"<p>Let\u2019s go back to camp.</p>\n\n<p>This July 18-20 we\u2019re heading back up to Maine, and to a really cool (remote) location. We have four cabins on the lake in Caratunk, ME, and I invite you to join us!</p>\n\n<p>Just like last year, it\u2019s a UX design focused project weekend with intermittent design talks, workshops, games, and music. This year we\u2019re going to have the incredible (Boston based) band <a href=\"https://www.youtube.com/watch?v=w6ytkBYaIU4\">The Grownup Noise</a> performing for us around the camp fire.</p>\n\n<p>And for those of you who are musicians, I implore you to bring some instruments. There will be musical improvisation, led by The Grownup Noise, and we\u2019d love for you to play along with us.</p>\n\n<p>If you have questions or are interested in sponsorship, please e-mail me at <a href=\"mailTo:steven@dockyard.com\">steven@dockyard.com</a>.</p>\n\n<p>See you there!</p>\n","summary":"A weekend away for design collaboration and learning.","illustration":null,"illustration_alt":null,"tags":["design","design-process","design-thinking","conferences","uxcamp","uxeast"],"shallow":false,"date":"2015-06-09T00:00:00Z"},{"id":"2015/06/08/a-clean-pattern-for-modal-dialogs","title":"A clean pattern for modal dialogs","dockyarder":"dan-mcclain","body":"<p>Recently, I was working on a project which had a number of different modals. I\ndiscovered a really clean pattern for implementing modals via actions and\n<a href=\"https://github.com/yapplabs/ember-modal-dialog\"><code>ember-modal-dialog</code></a>.</p>\n\n<p>We implemented each of the different modals as separate components, and\nrendered <code>ember-modal-dialog</code> in the <code>application</code> template the following\nway:</p>\n<div class=\"highlight hbs \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n  <td class=\"code\"><pre>{{#if isModalVisible}}\n  {{#modal-dialog}}\n    {{component modalDialogName modalContext=modalContext closeAction=&quot;closeModal&quot;}}\n  {{/modal-dialog}}\n{{/if}}\n</pre></td>\n</tr></table>\n</div></div>\n<p>The component helper allows us to dynamically choose which modal we&#39;d like to\nsee. We call the modal via the following action in the application route;</p>\n<div class=\"highlight js \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre></td>\n  <td class=\"code\"><pre>const { setProperties, set } = Ember;\n\nactions: {\n  showModal(modalDialogName, modalContext) {\n    const applicationController = <span class=\"local-variable\">this</span>.controller;\n\n    setProperties(applicationController, {\n      modalDialogName,\n      modalContext,\n      <span class=\"key\">isModalVisible</span>: <span class=\"predefined-constant\">true</span>\n    });\n  },\n\n  closeModal() {\n    const applicationController = <span class=\"local-variable\">this</span>.controller;\n\n    set(applicationController, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">isModalVisible</span><span class=\"delimiter\">'</span></span>, <span class=\"predefined-constant\">false</span>);\n  }\n}\n</pre></td>\n</tr></table>\n</div></div>\n<p>We invoke the modal via a normal action call:</p>\n<div class=\"highlight hbs \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>&lt;button {{action &quot;showModal&quot; &quot;my-component-name&quot; contextForModal}}&gt;Show the modal!&lt;/button&gt;\n</pre></td>\n</tr></table>\n</div></div>\n<p>The <code>modalContext</code> could be as simple as a string, or as complex as an\nEmber-Data model. It gets passed to the component as the <code>modalContext</code>\nattribute, so you&#39;ll need to remember to retrieve your properties from within\nthere if you are trying to do something a bit more complex.</p>\n\n<p>The component helper is really what enables this pattern, otherwise you&#39;d need\nto either have a series of <code>if</code>s to display the correct modal. I may extract\nthis pattern into a separate addon, as I see it as one I&#39;ll reuse frequently\nwhenever we have multiple modal dialogs.</p>\n","summary":"The project you are working on has a number of modal dialogs, and the component helper can help","illustration":null,"illustration_alt":null,"tags":["ember","components"],"shallow":false,"date":"2015-06-08T00:00:00Z"},{"id":"2015/06/02/ember-crumbly","title":"Declarative Breadcrumb Navigation in Ember.js","dockyarder":"lauren-tan","body":"<p>Breadcrumb navigation isn&#39;t a new concept, in fact, it&#39;s usefulness has been endlessly debated about by UX designers all over. Today, I won&#39;t get into the nitty gritty on whether or not your app should include one, but I&#39;d like to share an addon I built for a project I&#39;m working on that required it.</p>\n\n<p>This is a simple Component that is placed once in your application, and then generates a dynamic breadcrumb by looking up the current route hierarchy. The addon has a simple declarative API, which makes integration with your app super easy.</p>\n\n<p>Let&#39;s dive in!</p>\n\n<h2>Demo &amp; Source</h2>\n\n<p><img src=\"https://i.imgur.com/Sutk1UQ.png\" alt=\"ember-crumbly-demo\"></p>\n\n<p>You can take a look at the <a href=\"http://development.ember-crumbly-demo.divshot.io/\">demo app</a> to see ember-crumbly in action. What&#39;s cool about it is how little code it takes to add dynamic breadcrumbs to your app, and how declarative it is. The <a href=\"https://github.com/poteto/ember-crumbly\">source is on GitHub</a>, as always.</p>\n\n<h2>The idea</h2>\n\n<p>We work on many Ember apps at DockYard, and one particular client&#39;s project I was working on called for a very dynamic breadcrumb type UI that would respond to changes in the route and model. Before I started actually implementing it, I sketched my plan on paper to see if I could make it nice and declarative instead of manually setting the breadcrumb on each of those route templates.</p>\n\n<h3>The Ember Container and currentRouteName</h3>\n\n<p>The Component relies mainly on Ember&#39;s container and the current route name. On a high level, the Component is injected with the Application Controller&#39;s <code>currentRouteName</code> prop, then looks up the appropriate route in the Container to check if it has a <code>breadCrumb</code> prop defined. If it does, we display whatever the POJO is, or else we show its route name in the Component.</p>\n\n<h2>Intended usage</h2>\n\n<p>The goal was to have an API as declarative as the following:</p>\n<div class=\"highlight hbs \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>{{bread-crumbs linkable=true outputStyle=&quot;foundation&quot;}}\n</pre></td>\n</tr></table>\n</div></div>\n<p>And the route:</p>\n<div class=\"highlight js \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\">// foo/route.js</span>\n<span class=\"reserved\">export</span> <span class=\"keyword\">default</span> Ember.Route.extend({\n  <span class=\"key\">breadCrumb</span>: {\n    <span class=\"key\">title</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Animals</span><span class=\"delimiter\">'</span></span>\n  }\n});\n</pre></td>\n</tr></table>\n</div></div>\n<p>We also wanted to be able to pass in our own template block too:</p>\n<div class=\"highlight hbs \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n  <td class=\"code\"><pre>{{#bread-crumbs linkable=true as |component route|}}\n  {{#if route.title}}\n    {{route.title}}\n  {{else}}\n    {{route.foo}} ({{route.bar}}) ... {{route.baz}}\n  {{/if}}\n{{/bread-crumbs}}\n</pre></td>\n</tr></table>\n</div></div>\n<p>Let&#39;s see how we can write a component that does just that using some of Ember&#39;s new features.</p>\n\n<h2>Injecting the Application Controller</h2>\n\n<p>I&#39;ve explained how we inject things in other posts, so I won&#39;t go into detail for the initializer. Ember adds the <a href=\"http://guides.emberjs.com/v1.10.0/understanding-ember/debugging/#toc_get-current-route-name-path\">currentRouteName and currentPath to the Application Controller</a>, so we&#39;ll inject it into our Component so we can extract it.</p>\n<div class=\"highlight js \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n  <td class=\"code\"><pre><span class=\"reserved\">export</span> <span class=\"keyword\">function</span> <span class=\"function\">initialize</span>(container, application) {\n  application.inject(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">component:bread-crumbs</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">applicationController</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">controller:application</span><span class=\"delimiter\">'</span></span>);\n}\n\n<span class=\"reserved\">export</span> <span class=\"keyword\">default</span> {\n  <span class=\"key\">name</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">crumbly</span><span class=\"delimiter\">'</span></span>,\n  initialize\n};\n</pre></td>\n</tr></table>\n</div></div>\n<h2>Declaring your variables</h2>\n\n<p>We typically declare our variables and functions used at the top of each file, to make code easier to read and refactor in the future. For ember-crumbly&#39;s <code>bread-crumbs</code> component, we&#39;re using the usual suspects:</p>\n<div class=\"highlight js \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n22\n23\n24\n25\n26\n27\n28\n</pre></td>\n  <td class=\"code\"><pre><span class=\"reserved\">import</span> Ember from <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">ember</span><span class=\"delimiter\">'</span></span>;\n<span class=\"reserved\">import</span> layout from <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">../templates/components/bread-crumbs</span><span class=\"delimiter\">'</span></span>;\n\nconst get = Ember.get;\nconst {\n  <span class=\"key\">A</span>: emberArray,\n  EnumerableUtils,\n  Component,\n  Logger,\n  computed,\n  getWithDefault,\n  assert,\n  typeOf,\n  setProperties\n} = Ember;\n\nconst {\n  classify\n} = Ember.String;\n\nconst {\n  map,\n  filter\n} = EnumerableUtils;\n\nconst {\n  warn\n} = Logger;\n</pre></td>\n</tr></table>\n</div></div>\n<p>You might be wondering why we declare <code>const get = Ember.get;</code> by itself on L4\u200a\u2014\u200acurrently there are issues with destructuring <code>{ get }</code> and <a href=\"https://github.com/dockyard/ember-suave/issues/5\">bugs in Esprima</a>, so we do it by itself as temporary workaround.</p>\n\n<h2>Component props</h2>\n\n<p>Here we set a bunch of default props for the component.</p>\n<div class=\"highlight js \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n  <td class=\"code\"><pre><span class=\"reserved\">export</span> <span class=\"keyword\">default</span> Component.extend({\n  layout,\n  <span class=\"key\">tagName</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">ol</span><span class=\"delimiter\">'</span></span>,\n  <span class=\"key\">linkable</span>: <span class=\"predefined-constant\">true</span>,\n  <span class=\"key\">reverse</span>: <span class=\"predefined-constant\">false</span>,\n  <span class=\"key\">classNameBindings</span>: [ <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">breadCrumbClass</span><span class=\"delimiter\">'</span></span> ],\n  <span class=\"key\">hasBlock</span>: computed.bool(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">template</span><span class=\"delimiter\">'</span></span>).readOnly(),\n  <span class=\"key\">currentRouteName</span>: computed.readOnly(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">applicationController.currentRouteName</span><span class=\"delimiter\">'</span></span>)\n</pre></td>\n</tr></table>\n</div></div>\n<p>We&#39;ve injected the Application Controller into the component in our initializer, so getting the current route&#39;s name is as simple as setting a computed property macro. We make it <a href=\"http://emberjs.com/api/classes/Ember.ComputedProperty.html#method_readOnly\"><code>readOnly</code></a> so we don&#39;t set it by accident.</p>\n\n<h2>Computing the route hierarchy</h2>\n\n<p>Ember&#39;s <code>currentRouteName</code> prop returns the current route hierarchy separated by periods. For example, if you were on <code>/foo/bar/baz</code>, your route would probably be something like <code>foo.bar.baz.index</code>. Knowing this, the goal would be to split the string by the period, and then working out the route name for each of its parts. With the correct route name, we can then lookup the route on the container and extract the <code>breadCrumb</code> POJO we need for our bread-crumb.</p>\n<div class=\"highlight js \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n</pre></td>\n  <td class=\"code\"><pre>routeHierarchy: computed(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">currentRouteName</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">reverse</span><span class=\"delimiter\">'</span></span>, {\n  get() {\n    const currentRouteName = getWithDefault(<span class=\"local-variable\">this</span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">currentRouteName</span><span class=\"delimiter\">'</span></span>, <span class=\"predefined-constant\">false</span>);\n\n    assert(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">[ember-crumbly] Could not find a curent route</span><span class=\"delimiter\">'</span></span>, currentRouteName);\n\n    const routeNames = <span class=\"local-variable\">this</span>._splitCurrentRouteName(currentRouteName);\n    const filteredRouteNames = <span class=\"local-variable\">this</span>._filterIndexRoutes(routeNames);\n\n    const crumbs = <span class=\"local-variable\">this</span>._lookupBreadCrumb(routeNames, filteredRouteNames);\n    <span class=\"keyword\">return</span> <span class=\"local-variable\">this</span>.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">reverse</span><span class=\"delimiter\">'</span></span>) ? crumbs.reverse() : crumbs;\n  },\n\n  set() {\n    warn(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">[ember-crumbly] `routeHierarchy` is read only</span><span class=\"delimiter\">'</span></span>);\n  }\n})\n</pre></td>\n</tr></table>\n</div></div>\n<p>You&#39;ll notice straight away that we&#39;re using new Ember computed property syntax here. The new syntax allows you to set both getters and setters on your CP, instead of checking argument length like you used to have to do.</p>\n\n<h2>Figuring out the route name</h2>\n\n<p>First, we split the <code>currentRouteName</code> string into an array, and then filter out any <code>index</code> routes. This is because the string splits into an array with all the parts, so <code>foo/bar/baz</code> would yield <code>[ &#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;, &#39;index&#39; ]</code>, while we only want the first 3.</p>\n<div class=\"highlight js \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n  <td class=\"code\"><pre>_splitCurrentRouteName(currentRouteName) {\n  <span class=\"keyword\">return</span> currentRouteName.split(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">.</span><span class=\"delimiter\">'</span></span>);\n},\n\n_filterIndexRoutes(routeNames) {\n  <span class=\"keyword\">return</span> filter(routeNames, (name) =&gt; {\n    <span class=\"keyword\">return</span> name !== <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">index</span><span class=\"delimiter\">'</span></span>;\n  });\n}\n</pre></td>\n</tr></table>\n</div></div>\n<p>Now with the array of parts, we need to piece them together again bit by bit to reconstruct their constituent routes.</p>\n\n<h2>Looking up the route on the container</h2>\n\n<p>In here, we:</p>\n\n<ol>\n<li>Map over the filtered route names individually</li>\n<li>Reconstruct the route name by slicing the original array of route names with the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\">right <code>end</code> argument</a></li>\n<li>Look the reconstructed route name up on the container</li>\n<li>Retrieve the breadCrumb POJO, add props to it, and return an Ember Array that our component can iterate over in its template</li>\n</ol>\n<div class=\"highlight js \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n22\n23\n24\n25\n26\n27\n28\n29\n</pre></td>\n  <td class=\"code\"><pre>_lookupBreadCrumb(routeNames, filteredRouteNames) {\n  const defaultLinkable = get(<span class=\"local-variable\">this</span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">linkable</span><span class=\"delimiter\">'</span></span>);\n  const breadCrumbs = map(filteredRouteNames, (name, index) =&gt; {\n    const path = <span class=\"local-variable\">this</span>._guessRoutePath(routeNames, name, index);\n    let breadCrumb = <span class=\"local-variable\">this</span>._lookupRoute(path).getWithDefault(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">breadCrumb</span><span class=\"delimiter\">'</span></span>, <span class=\"predefined-constant\">undefined</span>);\n    const breadCrumbType = typeOf(breadCrumb);\n\n    <span class=\"keyword\">if</span> (breadCrumbType === <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">undefined</span><span class=\"delimiter\">'</span></span>) {\n      breadCrumb = {\n        path,\n        <span class=\"key\">linkable</span>: defaultLinkable,\n        <span class=\"key\">title</span>: classify(name)\n      };\n    } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (breadCrumbType === <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">null</span><span class=\"delimiter\">'</span></span>) {\n      <span class=\"keyword\">return</span>;\n    } <span class=\"keyword\">else</span> {\n      setProperties(breadCrumb, {\n        path,\n        <span class=\"key\">linkable</span>: breadCrumb.hasOwnProperty(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">linkable</span><span class=\"delimiter\">'</span></span>) ? breadCrumb.linkable : defaultLinkable\n      });\n    }\n\n    <span class=\"keyword\">return</span> breadCrumb;\n  });\n\n  <span class=\"keyword\">return</span> emberArray(filter(breadCrumbs, (breadCrumb) =&gt; {\n    <span class=\"keyword\">return</span> typeOf(breadCrumb) !== <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">undefined</span><span class=\"delimiter\">'</span></span>;\n  }));\n}\n</pre></td>\n</tr></table>\n</div></div>\n<h3>Reconstructing the route name</h3>\n\n<p>Each time map runs in the previous method, we get a single piece of the route name, e.g. <code>bar</code>. We know that its correct route name is <code>foo.bar</code>, so we can slice the original array with the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map#Syntax\">map&#39;s <code>index</code> argument</a> to piece those bits together. When we start with the first piece (<code>foo</code>), we know that we need to look up <code>foo.index</code> so that we can generate the correct link-to, so we check for that.</p>\n<div class=\"highlight js \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n  <td class=\"code\"><pre>_guessRoutePath(routeNames, name, index) {\n  const routes = routeNames.slice(<span class=\"integer\">0</span>, index + <span class=\"integer\">1</span>);\n\n  <span class=\"keyword\">if</span> (routes.length === <span class=\"integer\">1</span>) {\n    <span class=\"keyword\">return</span> <span class=\"error\">`</span><span class=\"predefined\">$</span>{name}.index<span class=\"error\">`</span>;\n  } <span class=\"keyword\">else</span> {\n    <span class=\"keyword\">return</span> routes.join(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">.</span><span class=\"delimiter\">'</span></span>);\n  }\n}\n</pre></td>\n</tr></table>\n</div></div>\n<p>Now that we have the correct route name for each path, we can look up the actual route object on the Container while we map over the filtered route names.</p>\n\n<h3>Looking up the route on the Container</h3>\n\n<p>The Ember Container (basically how Ember keeps track of all its different objects) isn&#39;t well documented because it is originally intended to be private API. However, many addons and apps make use of it to do certain things, and this one is no exception. There is an <a href=\"https://github.com/emberjs/rfcs/pull/46\">RFC on the table</a> with reforming the Registry and Container, so this might have to be changed in the future. For now, we can still get the Container from the Component, and then use its <code>lookup(&#39;type:name&#39;)</code> method to find the route.</p>\n<div class=\"highlight js \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n  <td class=\"code\"><pre>_lookupRoute(routeName) {\n  const container = get(<span class=\"local-variable\">this</span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">container</span><span class=\"delimiter\">'</span></span>);\n  const route = container.lookup(<span class=\"error\">`</span>route:<span class=\"predefined\">$</span>{routeName}<span class=\"error\">`</span>);\n  assert(<span class=\"error\">`</span>[ember-crumbly] <span class=\"error\">\\</span><span class=\"error\">`</span>route:<span class=\"predefined\">$</span>{routeName}<span class=\"error\">\\</span><span class=\"error\">`</span> was not found<span class=\"error\">`</span>, route);\n\n  <span class=\"keyword\">return</span> route;\n}\n</pre></td>\n</tr></table>\n</div></div>\n<h3>Extracting the breadCrumb POJO</h3>\n\n<p>With the route object in hand, we can then easily extract the <code>breadCrumb</code> POJO we define on our routes.</p>\n<div class=\"highlight js \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre></td>\n  <td class=\"code\"><pre>let breadCrumb = <span class=\"local-variable\">this</span>._lookupRoute(path).getWithDefault(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">breadCrumb</span><span class=\"delimiter\">'</span></span>, <span class=\"predefined-constant\">undefined</span>);\nconst breadCrumbType = typeOf(breadCrumb);\n\n<span class=\"keyword\">if</span> (breadCrumbType === <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">undefined</span><span class=\"delimiter\">'</span></span>) {\n  breadCrumb = {\n    path,\n    <span class=\"key\">linkable</span>: defaultLinkable,\n    <span class=\"key\">title</span>: classify(name)\n  };\n} <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (breadCrumbType === <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">null</span><span class=\"delimiter\">'</span></span>) {\n  <span class=\"keyword\">return</span>;\n} <span class=\"keyword\">else</span> {\n  setProperties(breadCrumb, {\n    path,\n    <span class=\"key\">linkable</span>: breadCrumb.hasOwnProperty(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">linkable</span><span class=\"delimiter\">'</span></span>) ? breadCrumb.linkable : defaultLinkable\n  });\n}\n\n<span class=\"keyword\">return</span> breadCrumb;\n</pre></td>\n</tr></table>\n</div></div>\n<p>In certain scenarios, you might want to opt-out of displaying a specific route in the breadcrumb. We allow that by setting <code>breadCrumb: null</code> inside of that route. If no breadCrumb POJO is found, we set the title to be the route&#39;s capitalized name by default, and if we do find one, we simply add the path and linkable keys to it.</p>\n\n<p>Finally, we return an <a href=\"http://emberjs.com/api/classes/Ember.html#method_A\">Ember Array</a> so that the resulting array is iterable in the template, and filter out any undefined breadcrumbs.</p>\n<div class=\"highlight js \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">return</span> emberArray(filter(breadCrumbs, (breadCrumb) =&gt; {\n  <span class=\"keyword\">return</span> typeOf(breadCrumb) !== <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">undefined</span><span class=\"delimiter\">'</span></span>;\n}));\n</pre></td>\n</tr></table>\n</div></div>\n<p>With the logic done, let&#39;s look at our somewhat complicated template to handle all the different uses!</p>\n\n<h3>Template logic</h3>\n\n<p>Because we want to handle both the inline and block form of the Component, as well as the ability to make each route linkable, the template does get a little complicated:</p>\n<div class=\"highlight hbs \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n</pre></td>\n  <td class=\"code\"><pre>{{#each routeHierarchy as |route|}}\n  &lt;li class={{crumbClass}}&gt;\n    {{#if hasBlock}}\n      {{#if route.linkable}}\n        {{#link-to route.path}}\n          {{yield this route}}\n        {{/link-to}}\n      {{else}}\n        {{yield this route}}\n      {{/if}}\n    {{else}}\n      {{#if route.linkable}}\n        {{#link-to route.path}}\n          {{route.title}}\n        {{/link-to}}\n      {{else}}\n        {{route.title}}\n      {{/if}}\n    {{/if}}\n  &lt;/li&gt;\n{{/each}}\n</pre></td>\n</tr></table>\n</div></div>\n<p>And that&#39;s done!</p>\n\n<p><em>This post also appears on <a href=\"https://medium.com/delightful-ui-for-ember-apps/declarative-breadcrumb-navigation-in-ember-js-5908a92a5de3\">Medium in longform</a>.</em></p>\n","summary":"ember-crubmly is a simple Component that is placed once in your application, and then generates a dynamic breadcrumb by looking up the current route hierarchy. The addon has a simple declarative API, which makes integration with your app super easy.","illustration":null,"illustration_alt":null,"tags":["ember","addon","javascript"],"shallow":false,"date":"2015-06-02T00:00:00Z"},{"id":"2015/05/29/announcing-voorhees","title":"Announcing Voorhees","dockyarder":"dan-mcclain","body":"<p>I&#39;ve been building JSON APIs in <a href=\"http://www.phoenixframework.org\">Phoenix</a> for\na few Ember apps I&#39;ve been working on. I wanted to ensure that the JSON\nresponse didn&#39;t include extra information in the form of attributes that\nshould be kept server side, and returned the correct payload. We can break\nthese two concerns into separate tests, the first making sure that our JSON\nresponse conforms to a specific &quot;schema&quot;, the other making sure that the\nattributes that we care about are correct.\n<a href=\"https://github.com/danmcclain/voorhees\">Voorhees</a>, named after <a href=\"http://www.imdb.com/media/rm4040136960/ch0002146#\">JSON...I mean\nJason Voorhees</a>, provides\nfunctions for both of these concerns.</p>\n\n<h2><code>Voorhees.matches_schema?</code></h2>\n\n<p><code>Voorhees.matches_schema?(payload, expected_keys)</code> makes sure that a payload\nconforms to a certain format. You pass in a string that is the API response and\na list of keys to check it against. If that payload has extra keys, or the\npayload is missing keys, the function returns <code>false</code>, causing it to fail the\n<code>assert</code> in your test.</p>\n\n<h3>Examples</h3>\n\n<p>Validating simple objects</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n</pre></td>\n  <td class=\"code\"><pre>iex&gt; payload = ~S[{ &quot;foo&quot;: 1, &quot;bar&quot;: &quot;baz&quot; }]\niex&gt; Voorhees.matches_schema?(payload, [:foo, &quot;bar&quot;]) # Property names can be strings or atoms\ntrue\n\n# Extra keys\niex&gt; payload = ~S[{ &quot;foo&quot;: 1, &quot;bar&quot;: &quot;baz&quot;, &quot;boo&quot;: 3 }]\niex&gt; Voorhees.matches_schema?(payload, [:foo, &quot;bar&quot;])\nfalse\n\n# Missing keys\niex&gt; payload = ~S[{ &quot;foo&quot;: 1 }]\niex&gt; Voorhees.matches_schema?(payload, [:foo, &quot;bar&quot;])\nfalse\n</pre></td>\n</tr></table>\n</div></div>\n<p>Validating lists of objects</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre>iex&gt; payload = ~S/[{ &quot;foo&quot;: 1, &quot;bar&quot;: &quot;baz&quot; },{ &quot;foo&quot;: 2, &quot;bar&quot;: &quot;baz&quot; }]/\niex&gt; Voorhees.matches_schema?(payload, [:foo, &quot;bar&quot;])\ntrue\n</pre></td>\n</tr></table>\n</div></div>\n<p>Validating nested lists of objects</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre>iex&gt; payload = ~S/{ &quot;foo&quot;: 1, &quot;bar&quot;: [{ &quot;baz&quot;: 2 }]}/\niex&gt; Voorhees.matches_schema?(payload, [:foo, bar: [:baz]])\ntrue\n</pre></td>\n</tr></table>\n</div></div>\n<p>Validating that a property is a list of scalar values</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre>iex&gt; payload = ~S/{ &quot;foo&quot;: 1, &quot;bar&quot;: [&quot;baz&quot;, 2]}/\niex&gt; Voorhees.matches_schema?(payload, [:foo, bar: []])\ntrue\n</pre></td>\n</tr></table>\n</div></div>\n<h2><code>Voorhees.matches_payload?</code></h2>\n\n<p><code>Voorhees.matches_payload?(payload, expected_payload)</code> makes sure that a payload\ncontains the right values. It should be used in conjuction with\n<code>Voorhees.matches_schema?/2</code>. <code>Voorhees.matches_payloads?</code> ignores values that\nare present in the <code>payload</code> but not in the <code>expected_payload</code>; this allows you\nto ignore server generated values, like <code>id</code> and <code>created_at</code> timestamps. You\nmay not necessarily care about the values of these server generated attributes.\nIt will return <code>false</code> when a value in <code>expected_payload</code> is missing from the\n<code>payload</code>, or when the values in the <code>payload</code> differ from the <code>expected_payload</code>.</p>\n\n<h3>Examples</h3>\n\n<p>Expected payload keys can be either strings or atoms</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre>iex&gt; payload = ~S[{ &quot;foo&quot;: 1, &quot;bar&quot;: &quot;baz&quot; }]\niex&gt; Voorhees.matches_payload?(payload, %{ :foo =&gt; 1, &quot;bar&quot; =&gt; &quot;baz&quot; })\ntrue\n</pre></td>\n</tr></table>\n</div></div>\n<p>Extra key/value pairs in payload are ignored</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre>iex&gt; payload = ~S[{ &quot;foo&quot;: 1, &quot;bar&quot;: &quot;baz&quot;, &quot;boo&quot;: 3 }]\niex&gt; Voorhees.matches_payload?(payload, %{ :foo =&gt; 1, &quot;bar&quot; =&gt; &quot;baz&quot; })\ntrue\n</pre></td>\n</tr></table>\n</div></div>\n<p>Extra key/value pairs in expected payload cause the validation to fail</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre>iex&gt; payload = ~S[{ &quot;foo&quot;: 1, &quot;bar&quot;: &quot;baz&quot;}]\niex&gt; Voorhees.matches_payload?(payload, %{ :foo =&gt; 1, &quot;bar&quot; =&gt; &quot;baz&quot;, :boo =&gt; 3 })\nfalse\n</pre></td>\n</tr></table>\n</div></div>\n<p>Validates scalar lists</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n  <td class=\"code\"><pre>iex&gt; payload = ~S/{ &quot;foo&quot;: 1, &quot;bar&quot;: [&quot;baz&quot;]}/\niex&gt; Voorhees.matches_payload?(payload, %{ :foo =&gt; 1, &quot;bar&quot; =&gt; [&quot;baz&quot;] })\ntrue\n\n# Order is respected\niex&gt; payload = ~S/{ &quot;foo&quot;: 1, &quot;bar&quot;: [1, &quot;baz&quot;]}/\niex&gt; Voorhees.matches_payload?(payload, %{ :foo =&gt; 1, &quot;bar&quot; =&gt; [&quot;baz&quot;, 1] })\nfalse\n</pre></td>\n</tr></table>\n</div></div>\n<p>Validates lists of objects</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre>iex&gt; payload = ~S/[{ &quot;foo&quot;: 1, &quot;bar&quot;: { &quot;baz&quot;: 2 }}]/\niex&gt; Voorhees.matches_payload?(payload, [%{ :foo =&gt; 1, &quot;bar&quot; =&gt; %{ &quot;baz&quot; =&gt; 2 } }])\ntrue\n</pre></td>\n</tr></table>\n</div></div>\n<p>Validates nested objects</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre>iex&gt; payload = ~S/{ &quot;foo&quot;: 1, &quot;bar&quot;: { &quot;baz&quot;: 2 }}/\niex&gt; Voorhees.matches_payload?(payload, %{ :foo =&gt; 1, &quot;bar&quot; =&gt; %{ &quot;baz&quot; =&gt; 2 } })\ntrue\n</pre></td>\n</tr></table>\n</div></div>\n<p>Validates nested lists of objects</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre>iex&gt; payload = ~S/{ &quot;foo&quot;: 1, &quot;bar&quot;: [{ &quot;baz&quot;: 2 }]}/\niex&gt; Voorhees.matches_payload?(payload, %{ :foo =&gt; 1, &quot;bar&quot; =&gt; [%{ &quot;baz&quot; =&gt; 2 }] })\ntrue\n</pre></td>\n</tr></table>\n</div></div>\n<h2>Take a machete to your API responses</h2>\n\n<p>Make sure your API responses are what you expect, or cut them down at the knees when your tests fail!</p>\n","summary":"Voorhees is a library for testing Phoenix JSON APIs","illustration":null,"illustration_alt":null,"tags":["elixir","testing","phoenix"],"shallow":false,"date":"2015-05-29T00:00:00Z"},{"id":"2015/05/22/begin-with-benchmarking","title":"Begin with Benchmarking","dockyarder":"ashley-treni","body":"<p>Design research is critical to the beginning stage of every design project. Research orients us in the world in which we intend to build and the audience we intend to build for. It is helpful to begin by identifying other services that already exist in that space, to observe the current market offerings. Building a research catalog for reference and critique is what we refer to as &quot;benchmarking.&quot;</p>\n\n<p>Here are three major benefits to benchmarking:</p>\n\n<ol>\n<li>It helps you better understand and articulate how your product or service is different</li>\n<li>It is a tool for learning about topics you might not be familiar with (especially for client projects)</li>\n<li>It allows you to observe strengths and weaknesses of existing experiences to inform your own design decisions</li>\n</ol>\n\n<p>At DockYard, we always begin with benchmarking. Benchmarking helps us define a scope based on realistic expectations, and identify opportunities and core values for the project. It is a way to learn through exploration. In this practice and analysis we deconstruct existing complex systems, identify the minimum viable product and core interactions, and pinpoint the major actions that support user goals. </p>\n\n<p>These exercises give us a better understanding of the space we intend to support, and the expectations for building a system of our own. It sets a focus and direction for ideation and user interviews, and aligns our understanding with the client&#39;s, which supports conversation.</p>\n\n<p>There are several different layers to observe in a given case study from structural to aesthetic: content organization, accessibility, systems architecture, user experience methods, interface design, to visual design. It can be challenging to observe all these different layers and identify what about them creates a quality online experience.</p>\n\n<ol>\n<li><p>Start broad. Identify the overall goal of the service that brings you from A to B. Is that process transparent and supportive? Were you able to easily use the product and accomplish the task at hand? Is the information accessible? How is it organized and delivered?</p></li>\n<li><p>Look at the usability and interactions. Do the interactions make sense in context? Is the structure intuitive, clear, and easy to use? Are design patterns present: experiential, cognitive, tangible ways that help users interact with the interface? Identifying these patterns in context helps us understand where they can be used to support user interactions.</p></li>\n<li><p>Consider the visual design and experience. What is the quality of the experience, and does it reflect the overall goal of the service? Is it delightful? confusing? distracting? Does the visual language and style support understanding?</p></li>\n</ol>\n\n<p>Benchmarking isn&#39;t about taking someone else&#39;s solution and using it as your own. Every project has different content, different goals, different challenges. Deconstructing existing design solutions is key to identifying structural and experiential decisions, and reflecting on why those decisions were made to support the task at hand. This kind of critical thinking allows us to be discerning, to ask questions about how others have solved problems in similar spaces, so that we can anticipate and identify the major goals for the system we intend to build.</p>\n\n<p>Through intentionally observing systems and strategies, we adopt a perpetually observant and critical mindset. The benchmarking mentality encourages us to pay attention to and appreciate the complexity of data driven web experiences, and to see how the challenges of vision, architecture, and experience were met and resolved.</p>\n","summary":"Utilizing design research strategies","illustration":null,"illustration_alt":null,"tags":["design-research","benchmarking","design-strategy"],"shallow":false,"date":"2015-05-22T00:00:00Z"},{"id":"2015/05/21/sign-up-for-the-dockyard-newsletter","title":"Sign Up For The DockYard Newsletter","dockyarder":"brian-cardarella","body":"<p>We are now running a monthly newsletter, we&#39;ll send currated design and\nengineering content directly to your Inbox. The best articles from our\nblog as well as exclusive content that we&#39;ll only publish in the monthly\nnewsletter.</p>\n\n<p>You can sign up at the bottom of this page!</p>\n","summary":null,"illustration":null,"illustration_alt":null,"tags":["business","announcement"],"shallow":false,"date":"2015-05-21T00:00:00Z"},{"id":"2015/05/20/the-new-dockyard-dot-com","title":"The New DockYard.com","dockyarder":"brian-cardarella","body":"<p>I&#39;m proud to announce the new <a href=\"https://dockyard.com\">DockYard.com</a></p>\n\n<p><img src=\"http://i.imgur.com/D3KeY1b.jpg\" alt=\"\"></p>\n\n<p>With this relaunch of our website we are also changing our direction as\na company. We&#39;ve always been considered an <em>engineering</em> company but we\nare now considering ourselves a <strong>User Experience</strong> company. All of\nour design and engineering decisions go into delivering a modern user\nexperience on the web for our clients.</p>\n\n<p>This new website is also built how we believe modern web applications\nshould be built: with <a href=\"http://emberjs.com\">Ember.js</a> on the front-end\nand <a href=\"http://phoenixframework.org\">Phoenix</a> on the back-end. </p>\n\n<p>Over the next few weeks we&#39;re going to share the story of how our team rebuilt\nDockYard.com. You&#39;ll hear from our Creative Director <a href=\"http://twitter.com/strevat\">Steven Trevathan</a> on\nwhat went into the Discovery of our new website, the design decisions\nmade, as well as a view of some early mockups and how we came to the\nfinal design. <a href=\"http://twitter.com/_danmcclain\">Dan McClain</a>, the head of our Engineering team will discuss\nhow we built our Ember application the &quot;DockYard Way&quot; which meant we\nhad to make contributions back to Ember itself, as well as\nseveral other libraries, in order to get the experience just right.\n<a href=\"http://twitter.com/acacheung\">Amanda Cheung</a>, our Lead UX Developer, will share what efforts went into the implementation of\nthe design; how we build modern responsive markup. Finally you&#39;ll hear\nfrom <a href=\"http://twitter.com/jon_lacks\">Jon Lacks</a>, our Project Manager, who will show how we managed the rebuild\nof our own website using the exact same processes we use on our client\nprojects.</p>\n\n<p>Along with these stories we&#39;ll not just tell you how we did things, we\nplan to show you. We&#39;ll be open sourcing all of the code for the Ember\nfront-end as well as the Phoenix back-end in the coming weeks. There are\nalso many libraries that we plan to extract from the application to\nshare with everyone.</p>\n\n<p>I&#39;m extremely proud of the team for delivering this rebuild. It is the\nbest example of the quality and integrity of our design and technical\ncapabilities to date.</p>\n","summary":null,"illustration":null,"illustration_alt":null,"tags":["business","announcement"],"shallow":false,"date":"2015-05-20T00:00:00Z"},{"id":"2015/04/20/ember-in-viewport","title":"Detecting Ember.js Components Entering or Leaving the Viewport","dockyarder":"lauren-tan","body":"<p><em>This concise version originally appears on <a href=\"https://medium.com/delightful-ui-for-ember-apps/creating-an-ember-cli-addon-detecting-ember-js-components-entering-or-leaving-the-viewport-7d95ceb4f5ed\">Medium in longform</a>.</em></p>\n\n<p>I <a href=\"https://medium.com/delightful-ui-for-ember-apps/ember-js-detecting-if-a-dom-element-is-in-the-viewport-eafcc77a6f86\">wrote a post</a>\nlast year about how I made an Ember Mixin that would let Ember Components or\nViews know if their DOM element had entered or left the viewport. If you&#39;re\nunfamiliar with the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect\"><code>getBoundingClientRect</code></a>\nAPI or the approach in general (for determining if an element is in the\nviewport), please have a read of that post first!</p>\n\n<p>This time, I want to talk about how I improved the original Mixin to use the\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\"><code>requestAnimationFrame</code></a>\nAPI for improved performance at close to 60FPS. Because\n<a href=\"http://caniuse.com/#search=requestAnimationFrame\">certain browsers</a> (mainly IE)\ndon&#39;t support <code>rAF</code>, we&#39;ll also setup an automatic fallback to using the Ember\nrun loop method I used in my previous post.</p>\n\n<h2>Demo</h2>\n\n<p><img src=\"https://d262ilb51hltx0.cloudfront.net/max/1600/1*9WZqJfpL4daIEBJiufTolQ.png\" alt=\"Featuring Brian\"></p>\n\n<p>I made a simple <a href=\"http://development.ember-in-viewport-demo.divshot.io/\">demo app</a>\nto demonstrate how you might use the Mixin. The goal for this addon was to allow\nyou to easily style or do something with Components/Views when they enter or\nleave the viewport. For example, you could easily use this Mixin to build a\nlazy loader for images, or even for triggering animations. Using this Mixin,\nyou won&#39;t need to use a jQuery plugin and can instead rely on a highly\nperformant ember-cli addon.</p>\n\n<h2>Installing the addon</h2>\n\n<p>If you&#39;re using ember-cli and want to use the addon, you can install it with:</p>\n<div class=\"highlight shell \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>$ ember install ember-in-viewport\n</pre></td>\n</tr></table>\n</div></div>\n<p>The source for the addon is available at <a href=\"https://github.com/dockyard/ember-in-viewport\">dockyard/ember-in-viewport</a>.</p>\n\n<h2>Rewriting the In Viewport Mixin</h2>\n\n<p>The Mixin still uses the <a href=\"https://medium.com/delightful-ui-for-ember-apps/ember-js-detecting-if-a-dom-element-is-in-the-viewport-eafcc77a6f86\">same method</a>\nfor determining if a DOM element is in the viewport, using\n<code>getBoundingClientRect</code> and the window&#39;s <code>innerHeight</code> and <code>innerWidth</code>.</p>\n\n<h3>Updating the Is In Viewport logic</h3>\n\n<p>The method for calculating whether or not a DOM element is in the viewport\nremains mostly unchanged, except with the addition of a new <code>viewportTolerance</code>\nargument.</p>\n<div class=\"highlight js \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n22\n23\n24\n25\n26\n27\n28\n</pre></td>\n  <td class=\"code\"><pre><span class=\"reserved\">import</span> Ember from <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">ember</span><span class=\"delimiter\">'</span></span>;\n\nconst { merge } = Ember;\n\nconst defaultTolerance = {\n  <span class=\"key\">top</span>    : <span class=\"integer\">0</span>,\n  <span class=\"key\">left</span>   : <span class=\"integer\">0</span>,\n  <span class=\"key\">bottom</span> : <span class=\"integer\">0</span>,\n  <span class=\"key\">right</span>  : <span class=\"integer\">0</span>\n};\n\n<span class=\"reserved\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"function\">isInViewport</span>(boundingClientRect={}, height=<span class=\"integer\">0</span>, width=<span class=\"integer\">0</span>, tolerance=defaultTolerance) {\n  const { top, left, bottom, right } = boundingClientRect;\n  const tolerances = merge(defaultTolerance, tolerance);\n  let {\n    <span class=\"key\">top</span>    : topTolerance,\n    <span class=\"key\">left</span>   : leftTolerance,\n    <span class=\"key\">bottom</span> : bottomTolerance,\n    <span class=\"key\">right</span>  : rightTolerance\n  } = tolerances;\n\n  <span class=\"keyword\">return</span> (\n    (top + topTolerance)       &gt;= <span class=\"integer\">0</span> &amp;&amp;\n    (left + leftTolerance)     &gt;= <span class=\"integer\">0</span> &amp;&amp;\n    (bottom - bottomTolerance) &lt;= height &amp;&amp;\n    (right - rightTolerance)   &lt;= width\n  );\n}\n</pre></td>\n</tr></table>\n</div></div>\n<p>With the addition of the <code>viewportTolerance</code> option, addon users can relax how\nprecise the check is. When set to <code>0</code>, the Mixin only considers an element\ninside the viewport when it is completely visible inside of the viewport.</p>\n\n<h3>Setting up the Class variables</h3>\n<div class=\"highlight js \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n22\n23\n24\n25\n26\n27\n</pre></td>\n  <td class=\"code\"><pre>const {\n  get,\n  set,\n  setProperties,\n  computed,\n  run,\n  on,\n  <span class=\"predefined\">$</span>,\n} = Ember;\n\nconst {\n  scheduleOnce,\n  debounce,\n  bind,\n  next\n} = run;\n\nconst { not }     = computed;\nconst { forEach } = Ember.EnumerableUtils;\n\nconst listeners = [\n  { <span class=\"key\">context</span>: window,   <span class=\"key\">event</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">scroll.scrollable</span><span class=\"delimiter\">'</span></span> },\n  { <span class=\"key\">context</span>: window,   <span class=\"key\">event</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">resize.resizable</span><span class=\"delimiter\">'</span></span> },\n  { <span class=\"key\">context</span>: document, <span class=\"key\">event</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">touchmove.scrollable</span><span class=\"delimiter\">'</span></span> }\n];\n\nlet rAFIDS = {};\n</pre></td>\n</tr></table>\n</div></div>\n<p>If you haven&#39;t had the chance to use <a href=\"https://babeljs.io/docs/learn-es6/\">ES2015 features</a>,\nnow&#39;s a good time to learn, since <code>ember-cli-babel</code> has been shipped with\nember-cli by default for a while now. Here, we&#39;re destructuring certain methods\nfrom Ember, as well as setting up an array of listeners we want to register. I\nalso declare a mutable variable <code>rAFIDS</code> with <code>let</code>\u200a\u2014\u200aI&#39;ll be using this object\nto store the ID that&#39;s returned by <code>requestAnimationFrame</code> so that we can cancel\nit later.</p>\n\n<p>Something interesting to note is that these variables are actually shared by all\ninstances of the Mixin. This means if we stored the ID in that variable, it would\nbe overwritten by other instances of the Components that are being watched by\nthe Mixin. So instead, we&#39;ll store each ID as a key (the element ID for the\nComponent) inside of an object. More on that later.</p>\n\n<h3>Initial state</h3>\n<div class=\"highlight js \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n</pre></td>\n  <td class=\"code\"><pre>_setInitialState: on(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">init</span><span class=\"delimiter\">'</span></span>, <span class=\"keyword\">function</span>() {\n  setProperties(<span class=\"local-variable\">this</span>, {\n    <span class=\"predefined\">$viewportCachedEl</span>   : <span class=\"predefined-constant\">undefined</span>,\n    <span class=\"key\">viewportUseRAF</span>      : canUseRAF(),\n    <span class=\"key\">viewportEntered</span>     : <span class=\"predefined-constant\">false</span>,\n    <span class=\"key\">viewportSpy</span>         : <span class=\"predefined-constant\">false</span>,\n    <span class=\"key\">viewportRefreshRate</span> : <span class=\"integer\">100</span>,\n    <span class=\"key\">viewportTolerance</span>   : {\n      <span class=\"key\">top</span>    : <span class=\"integer\">0</span>,\n      <span class=\"key\">left</span>   : <span class=\"integer\">0</span>,\n      <span class=\"key\">bottom</span> : <span class=\"integer\">0</span>,\n      <span class=\"key\">right</span>  : <span class=\"integer\">0</span>\n    },\n  });\n})\n</pre></td>\n</tr></table>\n</div></div>\n<p>We&#39;ll need to setup some initial values for our Mixin&#39;s state. We do this when\nthe Object the Mixin is mixed into is instantiated, by setting some properties\non <code>init</code>. This is because <a href=\"http://emberjs.com/api/classes/Ember.Mixin.html\">Mixins extend a constructor&#39;s prototype</a>,\nso certain properties will be shared amongst objects that implement the Mixin\u200a\u2014\u200a\nand in our case, we want these to be unique to each instance.</p>\n\n<p>Here, we&#39;re also going to make use of our utility function <a href=\"https://github.com/dockyard/ember-in-viewport/blob/0.2.1/addon/utils/can-use-raf.js\"><code>canUseRAF</code></a>\nto let the Mixin know whether to use <code>requestAnimationFrame</code> or fallback to the\nEmber run loop.</p>\n\n<h3>Setting up the DOM element rendered by the component</h3>\n\n<p>When the DOM element is inserted, we&#39;ll need to do a few things:</p>\n\n<ol>\n<li>The initial check on render to see if the element is immediately in view</li>\n<li>Setting up an observer to unbind listeners if we&#39;re not spying on the element</li>\n<li>Calling the recursive <code>requestAnimationFrame</code> method</li>\n<li>Setting up event listeners if we are spying on the element</li>\n</ol>\n<div class=\"highlight js \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n</pre></td>\n  <td class=\"code\"><pre>_setupElement: on(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">didInsertElement</span><span class=\"delimiter\">'</span></span>, <span class=\"keyword\">function</span>() {\n  <span class=\"keyword\">if</span> (!canUseDOM) { <span class=\"keyword\">return</span>; }\n\n  const viewportUseRAF = get(<span class=\"local-variable\">this</span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">viewportUseRAF</span><span class=\"delimiter\">'</span></span>);\n\n  <span class=\"local-variable\">this</span>._setInitialViewport(window);\n  <span class=\"local-variable\">this</span>._addObserverIfNotSpying();\n  <span class=\"local-variable\">this</span>._setViewportEntered(window);\n\n  <span class=\"keyword\">if</span> (!viewportUseRAF) {\n    forEach(listeners, (listener) =&gt; {\n      const { context, event } = listener;\n      <span class=\"local-variable\">this</span>._bindListeners(context, event);\n    });\n  }\n})\n</pre></td>\n</tr></table>\n</div></div>\n<h3>Checking if the DOM element is immediately in view</h3>\n\n<p>After the element has been rendered into the DOM, we want to immediately check\nif it&#39;s visible. This calls the <code>_setViewportEntered</code> method in the\n<code>afterRender</code> queue of the Ember run loop, which ensures that the DOM element\nis actually already inserted and available for us.</p>\n<div class=\"highlight js \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n  <td class=\"code\"><pre>_setInitialViewport(context=<span class=\"predefined-constant\">null</span>) {\n  Ember.assert(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">You must pass a valid context to _setInitialViewport</span><span class=\"delimiter\">'</span></span>, context);\n\n  <span class=\"keyword\">return</span> scheduleOnce(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">afterRender</span><span class=\"delimiter\">'</span></span>, <span class=\"local-variable\">this</span>, () =&gt; {\n    <span class=\"local-variable\">this</span>._setViewportEntered(context);\n  });\n}\n</pre></td>\n</tr></table>\n</div></div>\n<h3>Unbinding listeners after entering the viewport</h3>\n\n<p>It makes sense in certain use cases to stop watching the element after it has\nentered the viewport <em>at least once</em>. For example, in an image lazy loader, we\nonly want to load the image once, after which it makes sense to clean up\nlisteners to reduce the load on the app. We do that with the <code>viewportSpy</code>\noption.</p>\n\n<p>Here, we programatically add an observer on the <code>viewportEntered</code> prop if\n<code>viewportSpy</code> has been set to <code>false</code> by our addon user. The observer itself\ndoesn&#39;t do much\u200a\u2014\u200ait unbinds listeners and then removes itself.</p>\n<div class=\"highlight js \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n</pre></td>\n  <td class=\"code\"><pre>_addObserverIfNotSpying() {\n  const viewportSpy = get(<span class=\"local-variable\">this</span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">viewportSpy</span><span class=\"delimiter\">'</span></span>);\n\n  <span class=\"keyword\">if</span> (!viewportSpy) {\n    <span class=\"local-variable\">this</span>.addObserver(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">viewportEntered</span><span class=\"delimiter\">'</span></span>, <span class=\"local-variable\">this</span>, <span class=\"local-variable\">this</span>._viewportDidEnter);\n  }\n},\n\n_viewportDidEnter() {\n  const viewportEntered = get(<span class=\"local-variable\">this</span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">viewportEntered</span><span class=\"delimiter\">'</span></span>);\n  const viewportSpy     = get(<span class=\"local-variable\">this</span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">viewportSpy</span><span class=\"delimiter\">'</span></span>);\n\n  <span class=\"keyword\">if</span> (!viewportSpy &amp;&amp; viewportEntered) {\n    <span class=\"local-variable\">this</span>._unbindListeners();\n    <span class=\"local-variable\">this</span>.removeObserver(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">viewportEntered</span><span class=\"delimiter\">'</span></span>, <span class=\"local-variable\">this</span>, <span class=\"local-variable\">this</span>._viewportDidEnter);\n  }\n}\n</pre></td>\n</tr></table>\n</div></div>\n<h3>Setting up event listeners</h3>\n\n<p>Let&#39;s look at binding our event listeners before we take a look at\n<code>_setViewportEntered</code>, the main method for the mixin. We&#39;ll be using the array\nof listeners we declared earlier at the top of the file, and binding the event\nto the appropriate context (<code>window</code> or <code>document</code>), like so:</p>\n<div class=\"highlight js \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n</pre></td>\n  <td class=\"code\"><pre>_bindListeners(context=<span class=\"predefined-constant\">null</span>, event=<span class=\"predefined-constant\">null</span>) {\n  Ember.assert(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">You must pass a valid context to _bindListeners</span><span class=\"delimiter\">'</span></span>, context);\n  Ember.assert(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">You must pass a valid event to _bindListeners</span><span class=\"delimiter\">'</span></span>, event);\n\n  const elementId = get(<span class=\"local-variable\">this</span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">elementId</span><span class=\"delimiter\">'</span></span>);\n\n  Ember.warn(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">No elementId was found on this Object, `viewportSpy` will</span><span class=\"delimiter\">'</span></span> +\n    <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">not work as expected</span><span class=\"delimiter\">'</span></span>, elementId);\n\n  <span class=\"predefined\">$</span>(context).on(<span class=\"error\">`</span><span class=\"predefined\">$</span>{event}<span class=\"error\">#</span><span class=\"predefined\">$</span>{elementId}<span class=\"error\">`</span>, () =&gt; {\n    <span class=\"local-variable\">this</span>._scrollHandler(context);\n  });\n}\n</pre></td>\n</tr></table>\n</div></div>\n<p>Note that we can actually pass the Component&#39;s <a href=\"http://emberjs.com/api/classes/Ember.View.html#property_elementId\"><code>elementId</code></a>\n(the <code>id</code> attribute that is rendered into the DOM) to the event, which will\nallow us to only unbind the listener for that particular element. If we didn&#39;t\ndo this, all listeners would have been unbound when the first DOM element enters\nthe viewport, which isn&#39;t what we&#39;d want.</p>\n\n<h3>Handling the event</h3>\n\n<p>Now, we can handle the event by debouncing the main method with the\n<code>viewportRefreshRate</code> set by the addon user.</p>\n<div class=\"highlight js \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n  <td class=\"code\"><pre>_scrollHandler(context=<span class=\"predefined-constant\">null</span>) {\n  Ember.assert(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">You must pass a valid context to _scrollHandler</span><span class=\"delimiter\">'</span></span>, context);\n\n  const viewportRefreshRate = get(<span class=\"local-variable\">this</span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">viewportRefreshRate</span><span class=\"delimiter\">'</span></span>);\n\n  debounce(<span class=\"local-variable\">this</span>, <span class=\"keyword\">function</span>() {\n    <span class=\"local-variable\">this</span>._setViewportEntered(context);\n  }, viewportRefreshRate);\n}\n</pre></td>\n</tr></table>\n</div></div>\n<h3>Unbinding listeners</h3>\n\n<p>When we eventually destroy the Component, we want to make sure we also cleanup\nafter ourselves. We&#39;ll have to remove both event listeners and the recursive\n<code>requestAnimationFrame</code> call:</p>\n<div class=\"highlight js \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre></td>\n  <td class=\"code\"><pre>_unbindListeners() {\n  const elementId      = get(<span class=\"local-variable\">this</span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">elementId</span><span class=\"delimiter\">'</span></span>);\n  const viewportUseRAF = get(<span class=\"local-variable\">this</span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">viewportUseRAF</span><span class=\"delimiter\">'</span></span>);\n\n  Ember.warn(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">No elementId was found on this Object, `viewportSpy` will</span><span class=\"delimiter\">'</span></span> +\n    <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">not work as expected</span><span class=\"delimiter\">'</span></span>, elementId);\n\n  <span class=\"keyword\">if</span> (viewportUseRAF) {\n    next(<span class=\"local-variable\">this</span>, () =&gt; {\n      window.cancelAnimationFrame(rAFIDS[elementId]);\n      rAFIDS[elementId] = <span class=\"predefined-constant\">null</span>;\n    });\n  }\n\n  forEach(listeners, (listener) =&gt; {\n    const { context, event } = listener;\n    <span class=\"predefined\">$</span>(context).off(<span class=\"error\">`</span><span class=\"predefined\">$</span>{event}<span class=\"error\">#</span><span class=\"predefined\">$</span>{elementId}<span class=\"error\">`</span>);\n  });\n}\n</pre></td>\n</tr></table>\n</div></div><div class=\"highlight js \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre>_teardown: on(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">willDestroyElement</span><span class=\"delimiter\">'</span></span>, <span class=\"keyword\">function</span>() {\n  <span class=\"local-variable\">this</span>._unbindListeners();\n})\n</pre></td>\n</tr></table>\n</div></div>\n<p>If you recall, the <code>requestAnimationFrame</code> function returns an ID that uniquely\nidentifies the entry in the callback list. We can pass this on to\n<code>cancelAnimationFrame</code> in order to cancel the infinitely recursive call to the\nmain method. Because we register the Component&#39;s DOM <code>elementId</code> as a key in the\n<code>rAFIDS</code> object, we can remove the specific rAF call for that single Component.\nI&#39;ve wrapped the cAF call in an <code>Ember.run.next</code> to avoid a race condition that\nhappens occasionally.</p>\n\n<h3>Updating the viewportEntered property</h3>\n\n<p>Let&#39;s take a look at the main method responsible for setting the\n<code>viewportEntered</code> property. This method does two main things:</p>\n\n<ol>\n<li>Set <code>viewportEntered</code> to <code>true</code> or <code>false</code></li>\n<li>Fire off the next <code>requestAnimationFrame</code> step</li>\n</ol>\n<div class=\"highlight js \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n22\n23\n24\n25\n26\n27\n28\n</pre></td>\n  <td class=\"code\"><pre>_setViewportEntered(context=<span class=\"predefined-constant\">null</span>) {\n  Ember.assert(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">You must pass a valid context to _setViewportEntered</span><span class=\"delimiter\">'</span></span>, context);\n\n  const <span class=\"predefined\">$viewportCachedEl</span> = get(<span class=\"local-variable\">this</span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">$viewportCachedEl</span><span class=\"delimiter\">'</span></span>);\n  const viewportUseRAF    = get(<span class=\"local-variable\">this</span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">viewportUseRAF</span><span class=\"delimiter\">'</span></span>);\n  const elementId         = get(<span class=\"local-variable\">this</span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">elementId</span><span class=\"delimiter\">'</span></span>);\n  const tolerance         = get(<span class=\"local-variable\">this</span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">viewportTolerance</span><span class=\"delimiter\">'</span></span>);\n  const height            = <span class=\"predefined\">$</span>(context) ? <span class=\"predefined\">$</span>(context).height() : <span class=\"integer\">0</span>;\n  const width             = <span class=\"predefined\">$</span>(context) ? <span class=\"predefined\">$</span>(context).width()  : <span class=\"integer\">0</span>;\n\n  let boundingClientRect;\n\n  <span class=\"keyword\">if</span> (<span class=\"predefined\">$viewportCachedEl</span>) {\n    boundingClientRect = <span class=\"predefined\">$viewportCachedEl</span>[<span class=\"integer\">0</span>].getBoundingClientRect();\n  } <span class=\"keyword\">else</span> {\n    boundingClientRect = set(<span class=\"local-variable\">this</span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">$viewportCachedEl</span><span class=\"delimiter\">'</span></span>, <span class=\"local-variable\">this</span>.<span class=\"predefined\">$</span>())[<span class=\"integer\">0</span>].getBoundingClientRect();\n  }\n\n  const viewportEntered = isInViewport(boundingClientRect, height, width, tolerance);\n\n  set(<span class=\"local-variable\">this</span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">viewportEntered</span><span class=\"delimiter\">'</span></span>, viewportEntered);\n\n  <span class=\"keyword\">if</span> (<span class=\"predefined\">$viewportCachedEl</span> &amp;&amp; viewportUseRAF) {\n    rAFIDS[elementId] = window.requestAnimationFrame(\n      bind(<span class=\"local-variable\">this</span>, <span class=\"local-variable\">this</span>._setViewportEntered, context)\n    );\n  }\n}\n</pre></td>\n</tr></table>\n</div></div>\n<p>As a simple optimization, we can cache the selected DOM element inside the\nObject as <code>$viewportCachedEl</code> so we don&#39;t have call the expensive DOM node\nselector method every time. Then, we pass the Component&#39;s element properties to\nthe utility we defined earlier, and set the <code>viewportEntered</code> property.</p>\n\n<p>If <code>requestAnimationFrame</code> is enabled, we call the method again inside of the\nrAF method, after binding it to the correct context. Like\n<code>Function.prototype.bind</code>, this creates a new function, that when called, has\nits <code>this</code> keyword set to the correct value (along with any arguments). With\nthat first call after the element is inserted into the DOM, this fires off an\ninfinitely recursive loop that will only end when we cancel it.</p>\n\n<p>Hence, we don&#39;t have to setup event listeners when rAF is enabled. And that&#39;s it\nfor the Mixin!</p>\n","summary":"I wrote a post last year about how I made an Ember Mixin that would let Ember Components or Views know if their DOM element had entered or left the viewport. This time, I want to talk about how I improved the original Mixin to use the requestAnimationFrame API for improved performance at close to 60FPS.","illustration":null,"illustration_alt":null,"tags":["ember","addon","javascript"],"shallow":false,"date":"2015-04-20T00:00:00Z"},{"id":"2015/04/10/the-beginners-fallacy","title":"The Beginner's Fallacy","dockyarder":"brian-cardarella","body":"<p>Helping onboard beginners is a hot topic right now in software\ndevelopment. It is very good that this is important to people as we need\nnew software developers. However, I have noticed that many of these\ndevelopers are finding it difficult advancing beyond beginner. This\nis especially evident when they are taken out of their current\ndevelopment environment.</p>\n\n<p>Beginners require guidance and a set of rules to follow. This has been\nshown time over time to be an effective strategy for learning. The\nrules/principles/laws, whatever you want to call them, are based upon\nthe experience of more advanced developers that essentially boil down to \n&quot;here is what you want to do <em>most</em> of the time&quot;. They are a great\nsubstitute for experience. They also fit in very nicely with the notion\nof <strong>Convention Over Configuration</strong>. But unless you are stepping\noutside of your framework the advantage of COC may turn into a career\nhindering disadvantage.</p>\n\n<p>I am a big fan of Convention Over Configuration. I was first exposed to\nit with Ruby on Rails and I like that Ember.js has been\nfollowing this path as well. However, I also believe that it can become\na crutch for beginners. The rules that they are following coupled with\nthe low friction environment of COC leads to a developer experience that\ndoes not present too many obstacles to be overcome. Learning requires\nchallenge. You meet a challenge, you learn how to overcome that\nchallenge, you move on and now that experience is a tool you can wield in\nthe future.</p>\n\n<p>The market being flooded with beginners along with COC frameworks should\nproduce an environment that is heavily favored towards employers. (buyer&#39;s market) \nIn most cases these developers will be\nable to accomplish most of what a very experienced developer can\naccomplish. This is great for the company&#39;s bottom line but not so good\nfor the individual developer&#39;s own career growth.</p>\n\n<p>Instead, if you are interested in advancing beyond being a beginner,\nyou must get out of your comfort zone. This is going to require you to\nput more time into your craft than your job necessarily allows. Try new\nsoftware languages, try old software languages. Go read\n<a href=\"https://mitpress.mit.edu/sicp/\">SICP</a>. Attend meetups, <a href=\"https://github.com/papers-we-love/papers-we-love\">read\npapers</a>,\ncontribute to open source. <em>Contribute to open source even if you think\nyour PR won&#39;t be accepted</em>. All of these things will take you out of the\ncomfort zone that your daily work gives you, but you&#39;ll grow and become\na better (and more in demand) developer for it.</p>\n","summary":null,"illustration":null,"illustration_alt":null,"tags":["opinion"],"shallow":false,"date":"2015-04-10T00:00:00Z"},{"id":"2015/04/09/the-importance-of-being-experience-first","title":"The Importance of Being Experience First","dockyarder":"lauren-tan","body":"<p>We&#39;re in the middle of a digital renaissance that has software eating the world.\nLike the industrial revolution, the digital revolution might see us eventually\nbecoming obsolete, but that&#39;s okay because that&#39;s what progress looks like. To\nstay relevant, we need to place the Experience First.</p>\n\n<h2>The architects of the digital world</h2>\n\n<p>The modern architect has her roots in ancient and medieval history. They\noriginated as artisans; master craftsmen such as stone masons and carpenters.\nIn ancient times, there was no clear separation between the role of the\narchitect and the engineer \u2013 they were seen as one and the same.</p>\n\n<p>In some ways, the architects of the digital world are similar to those of the\nphysical. There are many parallels between the two, although it&#39;s important to\nbe aware of leaky abstractions, and that they are only <em>similar</em>, not exactly\nthe same.</p>\n\n<h2>The craftsmens&#39; renaissance</h2>\n\n<p>We&#39;re currently living in an age of digital renaissance.\n<a href=\"http://www.wsj.com/articles/SB10001424053111903480904576512250915629460\">Software is eating the world</a>,\nand some of us believe that we&#39;re right in the middle of a great technological\nrevolution \u2013 the software revolution.</p>\n\n<blockquote>\n<p>It&#39;s no longer enough to build a good product or service. The world demands\nexcellence, because good is the new average.</p>\n</blockquote>\n\n<p>I believe it&#39;s partly a symptom of how efficient manufacturing has become, that\nwe&#39;re experiencing wide scale <a href=\"http://www.rushkoff.com/blog/2005/9/4/commodified-vs-commoditized.html\">commoditization</a>\nof goods and services that were historically considered luxuries. Because of\nthis, we&#39;re also at the start of a new renaissance \u2013 one in which there is a\nresurgence of an appreciation for <a href=\"http://www.launch.co/blog/the-age-of-excellence.html/\">well designed experiences</a>.</p>\n\n<p>In my <a href=\"http://confreaks.tv/videos/emberconf2015-ambitious-ux-for-ambitious-apps\">EmberConf talk</a>,\nI defined design to mean more than aesthetics; design is how\nthings work, and encompasses the <em>entire experience</em> across different mediums.\nAirbnb calls this being <a href=\"http://www.wired.com/2015/01/airbnbs-new-head-design-believes-design-led-companies-dont-work/\">Experience First</a>,\nas opposed to Design First, which suggests that anyone who isn&#39;t a designer has\ntheir contributions take a backseat.</p>\n\n<blockquote>\n<p>&quot;That experience is essentially a story, a narrative which ultimately enjoins\nus to a brand.&quot; \u2013 <a href=\"https://gigaom.com/2013/10/22/square-airbnb-and-why-experience-really-is-design/\">Om Malik, Gigaom</a></p>\n</blockquote>\n\n<p>In other words, it\u2019s obvious that we place value on things that fulfill both\nform and function. The popularity of beautiful user experiences, both online and\noffline, are the expression of a digital renaissance that is only going to\ncontinue growing.</p>\n\n<h2>The rise of website builders and what it means for us</h2>\n\n<p>Unlike classical portrait painters, bowling alley pinsetters and other\njobs that have become redundant, the digital creator seems to be relatively\nsafe.</p>\n\n<p>With the rise of website builders like <a href=\"https://thegrid.io/\">Wix</a>,\n<a href=\"http://www.squarespace.com/\">Squarespace</a>, <a href=\"https://thegrid.io\">The Grid</a> and\nportfolio/shop builders like <a href=\"http://www.shopify.com/\">Shopify</a>,\n<a href=\"https://www.bigcommerce.com/\">BigCommerce</a> and <a href=\"http://virb.com/\">Virb</a> though,\nit&#39;s easier than ever for an individual or business to get a beautiful looking\nwebsite created at a fraction of the cost.</p>\n\n<p>The beauty of the web is that once an asset has been made, it effectively costs\nnothing to clone. A designer with a copy of Sketch or Photoshop can very quickly\ndesign a &#39;theme&#39;, have it converted into HTML/CSS by a &quot;PSD to HTML&quot; service\n(as they&#39;re commonly known), and then sell it on one of these site builders.\nYou could very easily get a beautiful looking website setup and live on the web\non Squarespace for less than $10 a month.</p>\n\n<h2>Why you need to place the Experience First</h2>\n\n<p>One thing I&#39;ve learned from my time in Business School, is that humans\n<a href=\"http://freakonomics.com/2011/06/30/the-folly-of-prediction-full-transcript/\">suck at predicting things</a>.\nMaybe we&#39;re all going to be made redundant, but the ones that design the\nbest experiences will continue to be more relevant than ever.</p>\n\n<p>If creating a website or app is commoditized, so be it. After all, who&#39;s going\nto design and build the website builder? The fact is, designing a beautiful\nexperience across different mediums will never be automated, not until we\nhave the technology to build incredibly intelligent Sentient AIs. But by then,\nwe&#39;d all <a href=\"http://www.imdb.com/title/tt2209764/\">be in trouble</a>, so I wouldn&#39;t\nworry about it just yet.</p>\n\n<p>Because it&#39;s easier than ever to build a website or app, the experience matters\nmore than ever as the way to differentiate your product or service from the\naverage. When you look to hire a developer or consultancy today, I think it&#39;s\nimportant that you seek out the ones that have honed the balance between design\nand engineering, and have spent time thinking about designing truly delightful\nonline (and offline) experiences.</p>\n\n<h2>Lauren is a DockYarder</h2>\n\n<p>I&#39;ve had a very diverse and varied experience with the web \u2013 I went to design\nschool, did a finance degree, and started a <a href=\"http://www.thepricegeek.com\">company</a>.\nRecently, I made the exhausting move from halfway across the world in Australia\nto join DockYard, because we truly care about the entire experience. I&#39;m very\nproud to be able to call DY my new home.</p>\n\n<p>This is my first post on Reefpoints \u2013 I hope you&#39;ve enjoyed reading! If you&#39;d\nlike to read more of my writing, you can find more on my\n<a href=\"http://www.medium.com/@sugarpirate\">Medium</a>.</p>\n\n<p>Special mention to <a href=\"https://twitter.com/nffrenchie\">@nfFrenchie</a> and everyone\nelse who helped review this post.</p>\n","summary":"Why being Experience First is more critical than ever – will the rise of website builders threaten the future of software consulting?","illustration":null,"illustration_alt":null,"tags":["design","engineering","user-experience","opinion"],"shallow":false,"date":"2015-04-09T00:00:00Z"},{"id":"2015/04/08/elixir-come-for-the-syntax-stay-for-everything-else","title":"Elixir: Come for the syntax, stay for everything else","dockyarder":"brian-cardarella","body":"<p>I have been programming for over 20 years now. I started with Basic,\nfound my way to C++, and spent two years writing Assembly (MASM). Then I\nfound Ruby. Ruby completely changed everything for me. I loved Ruby. I\nloved Ruby for a reason that many &quot;elite&quot; programmers tend to dismiss:\nthe syntax.</p>\n\n<p>You see, syntax is very important to me. Call it what you will,\nbikeshedding, OCD, stupidity. I care about syntax. It matters to me, and\nwith Ruby I found a community that shared my thoughts.</p>\n\n<p>When Go and Rust came along I was disappointed. Clearly these two\nlanguages were superior in performance (and in many other areas) but were a syntactic step back\nfrom Ruby. What was their reason? Clearly Ruby, and even Python, have\nproven that the masses are attracted by clear and readable syntax. New\nlanguages should take the best of what is currently available and\nimprove upon them. Go seems to target the C/C++ audience, whereas Rust\nseems to attract JavaScript developers. So I guess this becomes a matter\nof perspective and opinion.</p>\n\n<p>Elixir is different. I put Elixir up there with Go and Rust as part of\nthe three new languages that will define the next decade of backend\nsoftware development. With Elixir I found a language that embraced\nRuby-like syntax, but also gave me much more.</p>\n\n<p>The syntax is only skin deep, but this is part of allure of Elixir. It\nis my foot in the door. When I first saw Elixir code I thought to myself\n&quot;OK, this is something I can wrap my head around&quot;.</p>\n\n<p>I think a lot of Ruby developers will find their way to Elixir. It seems\nthat many were attracted to Go but I suspect when they start to explore\nwhat the Elixir language has to offer they&#39;ll see the benefits.</p>\n\n<p>But a language needs more than just a hook, there has to be a compelling\nreason to stay. For me that was Functional Programming.</p>\n\n<p>It seems that Functional Programming is making a come back. Every day\nthere is a new blog article on why you should start writing Functional\ncode. Let&#39;s break this down into a few points:</p>\n\n<h2>1. Scalability</h2>\n\n<p>This is an Erlang trait. Elixir apps will attempt to make the best use\nof all the cores in your CPU as possible. Compared to Ruby this is a big\ndeal. We don&#39;t have to write anything special, the Erlang VM (BEAM) just\nhandles this for us automatically. This means we are efficiently using\nour hardware. This type of approach didn&#39;t make a lot of sense a few\nyears ago, multi-core CPUs were expensive. Now they&#39;re cheap and Elixir\nbenefits.</p>\n\n<h2>2. Memory</h2>\n\n<p>Elixir programs are meant to be broken into many different processes.\nThe garbage collection strategy being used isn&#39;t revolutionary but\nbecause we are dealing with <strong>many</strong> runtimes instead of just one the\nimpact on GC is negligible. In addition, you can picture how short-lived\nprocesses might be the equivalent of objects in an OOP lanuage. We pass\nmessages into the process and get back a value. Each process manages its\nown memory, if the process is short-lived enough GC is never even run\nand the process is destroyed after it has completed its job. As opposed\nto Ruby where everything lives in one world and if you stop using the\nobject it will get GC&#39;d eventually impacting performance.</p>\n\n<h2>3. Immutability</h2>\n\n<p>Immutability got a bad rap when memory was expensive. Why would we write\napplications in such a way so as to waste memory by having variables\nwhose values couldn&#39;t be mutated? Memory is now super cheap, and this is\nnot much of a concern. With this in mind we can evaluate immutability\nwithin the context it was originally meant: to ensure state. When we\ntalk about parallel processing the state of a process becomes very\nimportant. If we are expecting <code>X</code> to always be a specific value but we\nare writing in a language where <code>X</code> can change this can lead to\nproblems.</p>\n\n<h2>4. Fault Tolerance</h2>\n\n<p>This one really impressed me when I started to dig into it. You may have\nheard that Erlang was invented for telephony. How often do you get a\nmessage from your phone company saying &quot;we&#39;re updating our systems so\nyou won&#39;t get a call for a while&quot;. This is the level of uptime that is\nachievable with Elixir. Hot code swapping is another very cool feature.\nThink <strong>real</strong> Zero Downtime Deploys.</p>\n\n<h2>5. Community</h2>\n\n<p>This one is more personal to me. I&#39;m attracted to technology that is not\ncentralized into one company. Go and Rust are very much just Google and\nMozilla technologies. Those languages will always be at the whim of\ntheir corporate masters, wheras a language like Elixir that is not tied\nto any one company feels like it has a more democratic process behind\nits development. Let many companies develop use-cases and improve the\nlanguage. (I realize that Erlang falls into this category, but Erlang is\npretty much set in stone at this point)</p>\n\n<p>The community around Elixir also feels very much like the Ruby community\ndid early on. I said the same thing about the Ember.js community. I\nguess I&#39;m just chasing that Ruby dragon, trying to catch that high\nagain.</p>\n\n<h4>Conclusion</h4>\n\n<p>We&#39;ve been exploring Elixir heavily over the past few months. The more I\ndig into the language the more I love it. We&#39;re going to bet pretty\nheavily on Elixir and if you are a Ruby developer looking for a change\nin pace I highly suggest you check it out. The best place to start is\nwith <a href=\"https://pragprog.com/book/elixir/programming-elixir\">Dave Thomas&#39;\nBook</a>.</p>\n","summary":null,"illustration":null,"illustration_alt":null,"tags":["elixir"],"shallow":false,"date":"2015-04-08T00:00:00Z"},{"id":"2015/03/31/helping-our-engineers","title":"Helping Our Engineers","dockyarder":"amanda-cheung","body":"<h2>Writing Pseudo-Code as UX Developers</h2>\n\n<p>As a team, we are always trying to improve our process at DockYard to\nmake things easier for one another. I\u2019m part of the UX development team, which\ntakes care of the HTML and CSS/Sass for our projects.\nOne thing we have found to be helpful to our Ember/back-end engineers is pseudo-coding\nwhere loops and conditionals should go in our templates. It only takes a basic understanding of\n<a href=\"https://pine.fm/LearnToProgram/chap_06.html\">flow control</a>.</p>\n\n<p>When we are in the development phase of a project, UX development usually tries to\ncomplete HTML first. That way UX dev and engineering can work in\nparallel without completion times depending on each other. What can we\ndo to make this process smoother? Below are two code examples of what an engineer may see given these mockups.\n<img alt=\"Has no followers\"\nsrc=\"https://dl.dropboxusercontent.com/u/38675407/followers--no-followers.png\">\n<img alt=\"Followers shows interests\"\nsrc=\"https://dl.dropboxusercontent.com/u/38675407/followers--with-interests.png\"></p>\n\n<p>Unorganized comments:</p>\n<div class=\"highlight handlebars \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n22\n23\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\">{{! at the beginning the user will not have any followers so show this}}</span>\n<span class=\"tag\">&lt;div</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">follows-wrap</span><span class=\"delimiter\">&quot;</span></span><span class=\"tag\">&gt;</span>\n  <span class=\"tag\">&lt;h2</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">follows--is-empty</span><span class=\"delimiter\">&quot;</span></span><span class=\"tag\">&gt;</span>You don\u2019t have any followers.<span class=\"tag\">&lt;/h2&gt;</span>\n<span class=\"tag\">&lt;/div&gt;</span>\n\n<span class=\"comment\">{{! when a user has followers show this block and not the block above}}</span>\n<span class=\"tag\">&lt;div</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">follows-wrap</span><span class=\"delimiter\">&quot;</span></span><span class=\"tag\">&gt;</span>\n  <span class=\"tag\">&lt;div</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">follows</span><span class=\"delimiter\">&quot;</span></span><span class=\"tag\">&gt;</span>\n    <span class=\"tag\">&lt;div</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">follow</span><span class=\"delimiter\">&quot;</span></span><span class=\"tag\">&gt;</span>\n      <span class=\"tag\">&lt;img</span> <span class=\"attribute-name\">src</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"delimiter\">&quot;</span></span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">follow__image</span><span class=\"delimiter\">&quot;</span></span><span class=\"tag\">&gt;</span>\n      <span class=\"tag\">&lt;h2</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">follow__name</span><span class=\"delimiter\">&quot;</span></span><span class=\"tag\">&gt;</span>Alfred H.<span class=\"tag\">&lt;/h2&gt;</span>\n      <span class=\"tag\">&lt;h3</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">follow__interests__heading</span><span class=\"delimiter\">&quot;</span></span><span class=\"tag\">&gt;</span>Follows for:<span class=\"tag\">&lt;/h3&gt;</span>\n      <span class=\"comment\">{{! must be following for at least one interest to have a follower. when the follower is only following for one interest will not have the part that says 2 others or span below that}}</span>\n      <span class=\"tag\">&lt;p</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">follow__interest</span><span class=\"delimiter\">&quot;</span></span><span class=\"tag\">&gt;</span>Tennis <span class=\"entity\">&amp;amp;</span> Racquet Sports,\n        <span class=\"tag\">&lt;a</span> <span class=\"attribute-name\">href</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">#</span><span class=\"delimiter\">&quot;</span></span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">follow__interest--other</span><span class=\"delimiter\">&quot;</span></span><span class=\"tag\">&gt;</span>2 others<span class=\"tag\">&lt;/a&gt;</span>\n        <span class=\"tag\">&lt;span</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">follow__modal__interests</span><span class=\"delimiter\">&quot;</span></span><span class=\"tag\">&gt;</span>\n          <span class=\"tag\">&lt;span</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">follow__modal__interest</span><span class=\"delimiter\">&quot;</span></span><span class=\"tag\">&gt;</span>Photography<span class=\"tag\">&lt;/span&gt;</span>\n          <span class=\"tag\">&lt;span</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">follow__modal__interest</span><span class=\"delimiter\">&quot;</span></span><span class=\"tag\">&gt;</span>Soccer<span class=\"tag\">&lt;/span&gt;</span>\n        <span class=\"tag\">&lt;/span&gt;</span>\n      <span class=\"tag\">&lt;/p&gt;</span>\n    <span class=\"tag\">&lt;/div&gt;</span>\n  <span class=\"tag\">&lt;/div&gt;</span>\n<span class=\"tag\">&lt;/div&gt;</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Pseudo-code comments:</p>\n<div class=\"highlight handlebars \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n22\n23\n24\n25\n26\n</pre></td>\n  <td class=\"code\"><pre><span class=\"tag\">&lt;div</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">follows-wrap</span><span class=\"delimiter\">&quot;</span></span><span class=\"tag\">&gt;</span>\n  <span class=\"comment\">{{! if user has followers}}</span>\n    <span class=\"tag\">&lt;div</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">follows</span><span class=\"delimiter\">&quot;</span></span><span class=\"tag\">&gt;</span>\n      <span class=\"comment\">{{! each follower / following}}</span>\n        <span class=\"tag\">&lt;div</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">follow</span><span class=\"delimiter\">&quot;</span></span><span class=\"tag\">&gt;</span>\n          <span class=\"tag\">&lt;img</span> <span class=\"attribute-name\">src</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"delimiter\">&quot;</span></span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">follow__image</span><span class=\"delimiter\">&quot;</span></span><span class=\"tag\">&gt;</span>\n          <span class=\"tag\">&lt;h2</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">follow__name</span><span class=\"delimiter\">&quot;</span></span><span class=\"tag\">&gt;</span>Alfred H.<span class=\"tag\">&lt;/h2&gt;</span>\n          <span class=\"tag\">&lt;h3</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">follow__interests__heading</span><span class=\"delimiter\">&quot;</span></span><span class=\"tag\">&gt;</span>Follows for:<span class=\"tag\">&lt;/h3&gt;</span>\n          <span class=\"tag\">&lt;p</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">follow__interest</span><span class=\"delimiter\">&quot;</span></span><span class=\"tag\">&gt;</span>\n            Tennis <span class=\"entity\">&amp;amp;</span> Racquet Sports\n            <span class=\"comment\">{{! if following for more than one interest}}</span>\n              ,\n              <span class=\"tag\">&lt;a</span> <span class=\"attribute-name\">href</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">#</span><span class=\"delimiter\">&quot;</span></span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">follow__interest--other</span><span class=\"delimiter\">&quot;</span></span><span class=\"tag\">&gt;</span>2 others<span class=\"tag\">&lt;/a&gt;</span>\n              <span class=\"tag\">&lt;span</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">follow__modal__interests</span><span class=\"delimiter\">&quot;</span></span><span class=\"tag\">&gt;</span>\n                <span class=\"tag\">&lt;span</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">follow__modal__interest</span><span class=\"delimiter\">&quot;</span></span><span class=\"tag\">&gt;</span>Photography<span class=\"tag\">&lt;/span&gt;</span>\n                <span class=\"tag\">&lt;span</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">follow__modal__interest</span><span class=\"delimiter\">&quot;</span></span><span class=\"tag\">&gt;</span>Soccer<span class=\"tag\">&lt;/span&gt;</span>\n              <span class=\"tag\">&lt;/span&gt;</span>\n            <span class=\"comment\">{{!end if}}</span>\n          <span class=\"tag\">&lt;/p&gt;</span>\n        <span class=\"tag\">&lt;/div&gt;</span>\n      <span class=\"comment\">{{! end each}}</span>\n    <span class=\"tag\">&lt;/div&gt;</span>\n  <span class=\"comment\">{{! else}}</span>\n    <span class=\"tag\">&lt;h2</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">follows--is-empty</span><span class=\"delimiter\">&quot;</span></span><span class=\"tag\">&gt;</span>You don\u2019t have any followers.<span class=\"tag\">&lt;/h2&gt;</span>\n  <span class=\"comment\">{{! end if}}</span>\n<span class=\"tag\">&lt;/div&gt;</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>The unorganized way can get out of hand with complex applications. The\npseudo-code method turns out to be slightly more work for UX developers,\nbut it saves our engineers a lot of time and confusion. Being able to break\nthings down into simple if/else statements or each loops has been much more efficient.\nNo more reading paragraphs of what\u2019s supposed to go where and when, or\nre-organizing the template!</p>\n","summary":"Writing Pseudo-Code as UX Developers","illustration":null,"illustration_alt":null,"tags":["html"],"shallow":false,"date":"2015-03-31T00:00:00Z"},{"id":"2015/03/27/pluralize-your-words-with-ember-pluralize","title":"Pluralize Your Word(s) With ember-pluralize","dockyarder":"romina-vargas","body":"<p>Do you ever find yourself repeating identical pieces of code throughout\ndifferent projects? If so, that&#39;s the perfect indicator for an addon\nopportunity. Ember Addons allow you to quickly integrate sharable code\ninto different projects, without copy and pasting, via one simple command:</p>\n<div class=\"highlight bash \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>  ember install:addon addon-name\n</pre></td>\n</tr></table>\n</div></div>\n<p>On some of our most recent projects, we kept finding the need to\npluralize words based on <em>how many</em> of each item we had. Also, since\nour data is dynamic and constantly changing, the pluralization of a\nword should remain in sync with our fluctuating data. And so\n<a href=\"https://github.com/rsocci/ember-pluralize\"><code>ember-pluralize</code></a> was born.</p>\n\n<p>After a quick <code>ember install:addon ember-pluralize</code>, using the addon\nis a piece of cake.</p>\n\n<p>Let&#39;s suppose we have a model like so:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n</pre></td>\n  <td class=\"code\"><pre><span class=\"reserved\">export</span> <span class=\"keyword\">default</span> Ember.Route.extend({\n  <span class=\"function\">model</span>: <span class=\"keyword\">function</span>() {\n    <span class=\"keyword\">return</span> Ember.A([\n      Ember.Object.create({ <span class=\"key\">name</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Cartman</span><span class=\"delimiter\">'</span></span>, <span class=\"key\">cheesyPoofs</span>: <span class=\"integer\">20</span> }),\n      Ember.Object.create({ <span class=\"key\">name</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Stan</span><span class=\"delimiter\">'</span></span>, <span class=\"key\">cheesyPoofs</span>: <span class=\"integer\">5</span> }),\n      Ember.Object.create({ <span class=\"key\">name</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Kyle</span><span class=\"delimiter\">'</span></span>, <span class=\"key\">cheesyPoofs</span>: <span class=\"integer\">1</span> }),\n      Ember.Object.create({ <span class=\"key\">name</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Kenny</span><span class=\"delimiter\">'</span></span>, <span class=\"key\">cheesyPoofs</span>: <span class=\"integer\">0</span> })\n    ]);\n  }\n});\n</pre></td>\n</tr></table>\n</div></div>\n<p>Now we want to output how many Cheesy Poofs each person has. This addon\nprovides a helper that allows us to do the following in our template:</p>\n<div class=\"highlight hbs \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre>{{#each model as |person|}}\n  {{person.name}} has {{h-pluralize person.cheesyPoofs &quot;Cheesy Poof&quot;}}\n{{/each}}\n</pre></td>\n</tr></table>\n</div></div>\n<p>which will output</p>\n<div class=\"highlight hbs \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n  <td class=\"code\"><pre>// Cartman has 20 Cheesy Poofs\n// Stan has 5 Cheesy Poofs\n// Kyle has 1 Cheesy Poof\n// Kenny has 0 Cheesy Poofs\n</pre></td>\n</tr></table>\n</div></div>\n<p>And now, as they each start throwing back some Cheesy Poofs, the counts\nwill start to update, as well as the word &quot;Cheesy Poof&quot;, according to\nhow many are remaining. Alternatively, if you don&#39;t need to display the\nactual number, passing in <code>omitCount=true</code> as the third parameter will\nexclude it from the output:</p>\n<div class=\"highlight hbs \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre>{{#each model as |person|}}\n  {{person.name}}'s {{h-pluralize person.cheesyPoofs &quot;Cheesy Poof&quot; omitCount=true}}\n{{/each}}\n</pre></td>\n</tr></table>\n</div></div><div class=\"highlight hbs \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n  <td class=\"code\"><pre>// Cartman's Cheesy Poofs\n// Stan's Cheesy Poofs\n// Kyle's Cheesy Poof\n// Kenny's Cheesy Poofs\n</pre></td>\n</tr></table>\n</div></div>\n<p>Note: If you&#39;re using Ember Data, you will be provided with a built in pluralize\nhelper through the <a href=\"https://github.com/stefanpenner/ember-inflector\">Ember Inflector</a>\nlibrary. The helper is registered for availability in the template; the\nfunctionality is similar, but given that it takes up to two arguments\n(the count and the word), you&#39;re not able to solely display the pluralized\nword based on a given a count.</p>\n\n<p>If you&#39;d like to see more on the addon, it can be found on\n<a href=\"https://github.com/rsocci/ember-pluralize\">GitHub</a>!</p>\n","summary":"Introducing a pluralizing addon based on a given count.","illustration":null,"illustration_alt":null,"tags":["ember","addon","javascript"],"shallow":false,"date":"2015-03-27T00:00:00Z"},{"id":"2015/03/26/bringing-ember-to-the-desktop-part","title":"Bringing Ember to the Desktop with NW.js","dockyarder":"estelle-deblois","body":"<p>One of our recent client projects at DockYard had us go in a totally new\ndirection in terms of technology stack. We needed to build a desktop\napplication that could communicate with some Arduino devices via\n<a href=\"https://developer.mozilla.org/en-US/docs/WebSockets\">WebSockets</a>.</p>\n\n<p>Let me first put this out there: I love building for the web. The mere\nthought of developing native desktop applications always makes me cringe\na little, though I admit, I haven&#39;t done much in that arena since those\n<a href=\"http://en.wikipedia.org/wiki/Swing_%28Java%29\">Java Swing</a> days from forever ago.\nNevertheless, you may find yourself at some point needing to build for the desktop.\nThankfully, you don&#39;t have to put your fuzzy little Tomster away.</p>\n\n<p><a href=\"https://github.com/nwjs/nw.js\">NW.js</a>, formerly known as Node WebKit, is a runtime\nbuilt on top of Chromium and Node/IO.js that lets you develop native applications\nusing the web technologies that you love. You can essentially build an Ember app, and\nalso invoke Node modules all within the browser, then package it up as\na Mac OS X application or Windows <code>exe</code> file when you&#39;re ready to distribute.</p>\n\n<h2>Demo</h2>\n\n<p>Here&#39;s a screenshot from a NW.js app built with Ember for demonstration\npurposes:</p>\n\n<p><img src=\"https://cloud.githubusercontent.com/assets/1691398/6768192/536a6fde-d033-11e4-9375-e2f506c1c8c7.png\" alt=\"screenshot\"></p>\n\n<p>It&#39;s a simple GitHub-flavored Markdown Editor that lets you create and preview\nMarkdown documents, and save them to disk.</p>\n\n<p>You can try it for yourself. Just download the application from the\nfollowing links for your platform, unzip, then double-click on <code>Markdown\nEditor.app</code> (Mac) or <code>Markdown Editor.exe</code> (Windows).</p>\n\n<ul>\n<li>Mac OS X: <a href=\"https://s3.amazonaws.com/dockyard-general/ember-nw-demo/markdown-editor-osx64.zip\">markdown-editor-osx64</a></li>\n<li>Windows:\n<a href=\"https://s3.amazonaws.com/dockyard-general/ember-nw-demo/markdown-editor-win64.zip\">markdown-editor-win64</a></li>\n<li><a href=\"https://github.com/brzpegasus/ember-nw-markdown\">Source code</a></li>\n</ul>\n\n<p>For a touch of user friendliness, the app even ships with your favorite\nmascot:</p>\n\n<p><em>Mac:</em>\n<img alt=\"Mac Icon\" src=\"https://cloud.githubusercontent.com/assets/1691398/6853610/9ee8c52c-d3c2-11e4-971a-3472bfd35609.png\" style=\"width: 600px; height: 205px;\"></p>\n\n<p><em>Windows:</em>\n<img alt=\"Win Icon\" src=\"https://cloud.githubusercontent.com/assets/1691398/6853614/a32becc2-d3c2-11e4-9ed4-83d645825f4b.png\" style=\"width: 114px; height: 312px;\"></p>\n\n<h2>Getting Started</h2>\n\n<p>The main entry point to a NW.js application is an HTML page that you\nspecify in your project&#39;s <code>package.json</code>:</p>\n<div class=\"highlight json \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n  <td class=\"code\"><pre>{\n  <span class=\"key\"><span class=\"delimiter\">&quot;</span><span class=\"content\">name</span><span class=\"delimiter\">&quot;</span></span>: <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">my-app</span><span class=\"delimiter\">&quot;</span></span>,\n  <span class=\"key\"><span class=\"delimiter\">&quot;</span><span class=\"content\">main</span><span class=\"delimiter\">&quot;</span></span>: <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">dist/index.html</span><span class=\"delimiter\">&quot;</span></span>\n}\n</pre></td>\n</tr></table>\n</div></div>\n<p>On startup, NW.js will launch a new Chromium browser window,\nthen set the location to that starting page:\n<code>file:///Users/brzpegasus/projects/my-app/dist/index.html#/</code>.</p>\n\n<p>This does require that you set your <code>Ember.Router</code>\n<a href=\"http://emberjs.com/api/classes/Ember.Location.html\">location type</a> to <code>hash</code>. In Ember CLI,\nthis is a simple tweak to your <code>config/environment.js</code> file:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\">// config/environment.js</span>\nmodules.<span class=\"function\">exports</span> = <span class=\"keyword\">function</span>(environment) {\n  <span class=\"keyword\">var</span> ENV = {\n    <span class=\"key\">locationType</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">hash</span><span class=\"delimiter\">'</span></span>, <span class=\"comment\">// Change this from 'auto' to 'hash'</span>\n    <span class=\"comment\">// ...</span>\n  };\n};\n</pre></td>\n</tr></table>\n</div></div>\n<p>From there on, you should feel quite at home and ready to develop your Ember app.</p>\n\n<p>Or maybe not quite yet.</p>\n\n<h2>A Bit About NW.js</h2>\n\n<p>NW.js tweaks Chromium and Node in order to\n<a href=\"https://github.com/nwjs/nw.js/wiki/How-node.js-is-integrated-with-chromium\">integrate</a>\nthe two worlds and make it possible for you to call Node modules from the client:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n  <td class=\"code\"><pre>console.log(location.href);   <span class=\"comment\">// Yup, we're in browser land</span>\n\n<span class=\"keyword\">var</span> fs = require(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">fs</span><span class=\"delimiter\">'</span></span>);       <span class=\"comment\">// Call core Node modules</span>\n<span class=\"keyword\">var</span> async = require(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">async</span><span class=\"delimiter\">'</span></span>); <span class=\"comment\">// Or even third-party modules!</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>If you&#39;re used to Node and CommonJS, this <code>require</code> function should look very\nfamiliar, but it isn&#39;t exactly the same. Here&#39;s what it does:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">function</span> <span class=\"function\">require</span>(name) {\n  <span class=\"keyword\">if</span> (name == <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">nw.gui</span><span class=\"delimiter\">'</span></span>)\n    <span class=\"keyword\">return</span> nwDispatcher.requireNwGui();\n  <span class=\"keyword\">return</span> global.require(name);\n}\n</pre></td>\n</tr></table>\n</div></div>\n<p>So if you were to call <code>require(&#39;nw.gui&#39;)</code>, you would get access to the\n<a href=\"https://github.com/nwjs/nw.js/wiki/Native-UI-API-Manual\">Native UI Library</a>\nto do things like manipulating the window frame, adding menus, keyboard shortcuts, etc.\nOtherwise, the function ends up calling <code>global.require</code> to import Node modules.</p>\n\n<p><code>global</code> is Node&#39;s global namespace object. You can use it to retrieve\nother global objects besides <code>require</code>, such as <code>global.process</code>.\nHowever, many of them are made available directly on the <code>window</code> object, so you can\nreference them without prefix, just as you would in Node:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre>console.log(window.process === global.process) <span class=\"comment\">// =&gt; true</span>\nconsole.log(process.env.USER) <span class=\"comment\">// &quot;brzpegasus&quot;</span>\nconsole.log(process.platform) <span class=\"comment\">// &quot;darwin&quot;</span>\n</pre></td>\n</tr></table>\n</div></div>\n<h2>Naming Conflicts</h2>\n\n<p>Modules written with ES2015 (<a href=\"https://esdiscuss.org/topic/javascript-2015#content-3\">previously, ES6</a>)\nsyntax in your Ember app get transpiled into\nAMD for today&#39;s browsers. This is problematic because AMD also specifies a\n<code>require</code> function for loading modules. In Ember CLI, this is implemented via\n<a href=\"https://github.com/ember-cli/loader.js\">ember-cli/loader.js</a>.</p>\n\n<p>By the time the app is done loading, any functionality that depends on\nthe native UI library or Node modules will break as the <code>require</code>\nfunction would have been redefined.</p>\n\n<p>You can get around this by saving a reference to Node&#39;s <code>require</code> before loading\nany script. Once all scripts are loaded and executed, redefine <code>require</code>\nto work with both module systems. This is necessary as certain operations\nwill not work with the alias:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\">// Before loading any script</span>\nwindow.requireNode = require;\n\n<span class=\"comment\">// After all scripts are loaded</span>\n<span class=\"keyword\">var</span> requireAMD = require;\n\nwindow.<span class=\"function\">require</span> = <span class=\"keyword\">function</span>() {\n  <span class=\"keyword\">try</span> {\n    <span class=\"keyword\">return</span> requireAMD.apply(<span class=\"predefined-constant\">null</span>, <span class=\"local-variable\">arguments</span>);\n  } <span class=\"keyword\">catch</span> (error) {\n    <span class=\"keyword\">return</span> requireNode.apply(<span class=\"predefined-constant\">null</span>, <span class=\"local-variable\">arguments</span>);\n  }\n};\n</pre></td>\n</tr></table>\n</div></div>\n<h2>An Addon For All Your NW.js Needs</h2>\n\n<p>I&#39;ve recently released an Ember CLI addon to help make this process\neasier. Simply install <a href=\"https://github.com/brzpegasus/ember-cli-node-webkit\">ember-cli-node-webkit</a>,\nthen start coding right away. All the configuration will be taken care\nof for you, so no need to worry about <code>require</code> naming conflicts.</p>\n\n<p>The addon can build your project, watch for changes, and reload the page in NW.js\nduring development. And when you&#39;re ready to distribute, packaging is just\none command away. The packaging is a wrapper around the excellent\n<a href=\"https://github.com/mllrsohn/node-webkit-builder\">node-webkit-builder</a>\nbut the configuration is done automatically based on the addon&#39;s\nunderstanding of your app structure.</p>\n\n<p>I will not spend time talking about the addon in this blog post, but I\ninvite you to check out the <a href=\"https://github.com/brzpegasus/ember-cli-node-webkit/blob/master/README.md\">README</a>\nto get familiar with all the options that are at your disposal.</p>\n\n<h2>Conclusion</h2>\n\n<p>When we first set out to build a desktop app for a client project,\ndocumentation on how to integrate NW.js with Ember was scarce. Even more\nscarce was documentation on how to integrate it with Ember CLI. I hope\nthis post and this addon will provide some guidance to others down the\nroad.</p>\n\n<p>I&#39;d love to share some code samples and discuss patterns you can adopt\nto make your NW.js app more manageable and testable, but they&#39;d be too\ndense for this introductory blog post. However, you&#39;ll be hearing more from me\non this topic in the future!</p>\n","summary":null,"illustration":null,"illustration_alt":null,"tags":["ember"],"shallow":false,"date":"2015-03-26T00:00:00Z"},{"id":"2015/03/25/testing-when-your-frontend-and-backend-are-separated","title":"Testing when your frontend and backend are separated","dockyarder":"dan-mcclain","body":"<p>The last project I worked on was an Ember app that had a Rails backend that was\ndeployed on Heroku. We had this application as a single repository, where there\nwere two folders at the root, <code>frontend</code> and <code>backend</code>. This was somewhat easy\nto test on Travis-CI; it would check out the one repository, run the Rails\ntests, start the Rails server, then run the ember tests that hit the Rails\nserver. This ended up being a pain to deploy, as when you changed the Rails app,\nyou were going to redeploy the Ember app, and vice-versa.  It also presented an\nissue when deploying to Heroku, as <a href=\"https://www.youtube.com/watch?v=ceFNLdswFxs&amp;t=4103\">we had to utilize <code>git subtree</code> to push\nthe backend</a>, which\ncontained the production assets.</p>\n\n<p>With the latest project I started, I&#39;m keeping the backend and the Ember app\nseparate.  Since the apps are separate, they can be deployed independant of\neach other. This made it a little bit harder to run integration tests against\nthe backend.</p>\n\n<p><strong>Side note:</strong> while you can mock/stub your API in your Ember tests, it is\nimportant to run integration tests against your backend regularly. When you\nmock your API, it ends up giving you this false sense of security when it comes\nto your Ember app being compatible. Your models may line up perfectly with your\nmocks, but your mocks can fall out of date. To prevent this, at least when\nrunning on your continuous integration (CI) server, you should have your Ember\napp hit the backend server.</p>\n\n<p>To run end-to-end integration tests on Travis-CI, I added tasks to the\n<code>.travis.yml</code> file to clone the backend repository, install dependencies, and\nrun the server:</p>\n<div class=\"highlight yml \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n22\n23\n24\n25\n26\n27\n28\n29\n<strong>30</strong>\n31\n32\n33\n34\n35\n36\n37\n38\n</pre></td>\n  <td class=\"code\"><pre><span class=\"key\">language</span>: <span class=\"string\"><span class=\"content\">node_js</span></span>\n<span class=\"key\">node_js</span>:\n  - <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">0.12</span><span class=\"delimiter\">&quot;</span></span>\n\n<span class=\"key\">sudo</span>: <span class=\"string\"><span class=\"content\">false</span></span>\n<span class=\"key\">cache</span>:\n  <span class=\"key\">directories</span>:\n    - <span class=\"string\"><span class=\"content\">node_modules</span></span>\n    - <span class=\"string\"><span class=\"content\">backend</span></span>\n    - <span class=\"string\"><span class=\"content\">vendor/bundle</span></span>\n\n<span class=\"key\">before_install</span>:\n  - <span class=\"string\"><span class=\"content\">npm config set spin false</span></span>\n  - <span class=\"string\"><span class=\"content\">npm install -g npm@^2</span></span>\n  <span class=\"comment\"># Select the RVM version</span>\n  - <span class=\"string\"><span class=\"content\">rvm use 2.2.1 --install --binary --fuzzy</span></span>\n  <span class=\"comment\"># Clone the repository if isn't cloned</span>\n  - <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">[ -d backend/.git ] || git clone git@github.com:&lt;backend-repo&gt; backend</span><span class=\"delimiter\">&quot;</span></span>\n  - <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">cd backend</span><span class=\"delimiter\">&quot;</span></span>\n  <span class=\"comment\"># Reset the repo so we can have a conflict-less pull</span>\n  - <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">git reset --hard</span><span class=\"delimiter\">&quot;</span></span>\n  - <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">git clean -f</span><span class=\"delimiter\">&quot;</span></span>\n  - <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">git pull</span><span class=\"delimiter\">&quot;</span></span>\n  <span class=\"comment\"># Install dependencies</span>\n  - <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">bundle install --path=../vendor/bundle --jobs=3 --retry=3 --deployment</span><span class=\"delimiter\">&quot;</span></span>\n  <span class=\"comment\"># Run the server</span>\n  - <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">RAILS_ENV=test ./bin/rails s &amp;</span><span class=\"delimiter\">&quot;</span></span>\n  <span class=\"comment\"># Wait for the Rails app to start</span>\n  - <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">sleep 5</span><span class=\"delimiter\">&quot;</span></span>\n  - <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">cd ..</span><span class=\"delimiter\">&quot;</span></span>\n\n<span class=\"key\">install</span>:\n  - <span class=\"string\"><span class=\"content\">npm install -g bower</span></span>\n  - <span class=\"string\"><span class=\"content\">npm install</span></span>\n  - <span class=\"string\"><span class=\"content\">bower install</span></span>\n\n<span class=\"key\">script</span>:\n  - <span class=\"string\"><span class=\"content\">npm test</span></span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Note that I cached both the backend and bundle directories to speed up the time\nit takes to get the backend running. Since the backend is cached, we only have\nto pull the new code.</p>\n\n<p>In this example, we have a Rails app with no database, but it would be pretty\neasy to add one. The only other required step was to add an SSH private key to\nthe Travis settings, since you would have two separate deploy keys. That would\nprevent you from cloning the backend repository from the frontend test.  There\nshould be nothing holding you back from performing end to end tests when you\nhave separate repositories!</p>\n","summary":"How can you run full integration tests when using separate repos?","illustration":null,"illustration_alt":null,"tags":["ember","testing"],"shallow":false,"date":"2015-03-25T00:00:00Z"},{"id":"2015/03/24/rubyists-guide-to-ember-dependencies","title":"Rubyists Guide to Ember.js Dependencies","dockyarder":"michael-dupuis","body":"<p>One of the early hurdles a Ruby developer faces when working on an Ember.js application is dependency management. A popular mechanism for managing a Ruby application\u2019s dependencies is the <a href=\"http://bundler.io/gemfile.html\">Gemfile</a> provided by <a href=\"http://bundler.io/\">Bundler</a>. Including a library is as easy as declaring it in the Gemfile and running <code>bundle install</code>:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\"># Gemfile</span>\nsource <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">https://rubygems.org</span><span class=\"delimiter\">'</span></span>\ngem <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">rails</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">~&gt; 4.2.0</span><span class=\"delimiter\">'</span></span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>For better or worse, there is no dominant, single package manager in JavaScript. Ember applications, and more specifically, those running <a href=\"http://www.ember-cli.com/\">Ember-CLI</a>, rely on two package managers: <a href=\"http://bower.io/\">Bower</a> for client-side libraries and <a href=\"https://www.npmjs.com/\">npm</a> for server-side libraries.</p>\n\n<p>In this post, I&#39;ll provide a basic dependency management primer for\nthose moving from Ruby to JavaScript.</p>\n\n<h1>npm</h1>\n\n<p>Ember-CLI uses npm to manage internal dependencies. npm resembles RubyGems, in so far as it allows you to install and manage third-party libraries, which in this case, are Node.js programs.</p>\n\n<h2>package.json</h2>\n\n<p>Libraries for npm are referred to as \u201cpackages.\u201d Each package has a <code>package.json</code> file which lists the dependencies of the library itself. In this regard, the <code>package.json</code> is analogous to a RubyGem\u2019s <code>gemspec</code> file.</p>\n\n<h2>.npmrc</h2>\n\n<p>You can configure how node packages get installed via the\n<a href=\"https://docs.npmjs.com/files/npmrc\">.npmrc file</a>. You may have one\nglobally, per user (<code>~/.npmrc</code>), or per project.</p>\n\n<h2>Installing dependencies</h2>\n\n<p>To install an npm package, run <code>npm install [package-name]</code> from the\ncommand line.</p>\n\n<p>This will either install the library and it&#39;s dependencies\ninto your current working directory or in one of its parent directories. Here&#39;s how it works: if there is a <code>node_modules/</code> or <code>package.json</code> in any directory above the current working directory, packages will be installed into that directory. Otherwise, calling <code>npm install [package-name]</code> creates a <code>node_modules/</code> directory in your current working directory and installs the packages there.</p>\n\n<p>This is a slightly different mental model for Rubyists who are not used to installing gems on a per project basis; gems are generally installed into version-specific Ruby directories with the more popular version managers like <a href=\"https://github.com/sstephenson/rbenv\">rbenv</a> or <a href=\"https://rvm.io/\">RVM</a>.</p>\n\n<p>It\u2019s also possible to install packages globally using the <code>--global</code> flag when installing. This installs the package in your <code>usr/local/lib/</code> directory by default. These packages typically contain executable files and are used via the command line (such as Ember-CLI).</p>\n\n<p>Your dependencies will likely have dependencies. These get installed within a <code>node_modules/</code> directory in the given package. It&#39;s a little strange the first time you navigate into a <code>node_modules/package-name/</code> only to find another <code>node_modules/</code> directory, but that&#39;s what that is. You\u2019ll notice a <code>node_modules/</code> directory for dependencies of global packages as well if you look in the <code>usr/local/lib/</code> directory where global packages live.</p>\n\n<p>One last thing to note regarding npm installations: npm caches the\nlibraries you pull down to prevent you from having to download\nlibraries that are already on your system. You&#39;ll find that cache:\n<code>~/.npm/</code>.</p>\n\n<h1>Bower</h1>\n\n<p>While you&#39;ll use npm to manage your server-side Node.js dependencies, you\u2019ll use Bower for managing front-end assets, such as JavaScript, HTML, CSS, image, and font files.</p>\n\n<h2>.bowerrc</h2>\n\n<p>Bower itself is an npm package. Its libraries are referred to as \u201ccomponents\u201d and the end user can configure their installations via a <code>.bowerrc</code> file. This file specifies where dependent components will be installed, the URL where the component will be registered (its registry), and the JSON file used to define the component (<code>bower.json</code> by default) among other things.</p>\n\n<h2>bower.json</h2>\n\n<p>The <a href=\"http://bower.io/docs/creating-packages/#bowerjson\"><code>bower.json</code></a> file resembles the <a href=\"http://guides.rubygems.org/specification-reference/\">gemspec</a> file you find in Ruby gems. It contains the library metadata, such as the name, version, dependencies, and development dependencies for the library.</p>\n\n<p>As we mentioned, components can be searched for via registries. The registry matches the name of a component with the endpoint at which it\u2019s hosted. <a href=\"http://bower.io/search/\">Bower.io/search</a> closely resembles <a href=\"https://rubygems.org/gems\">rubygems.org</a> in this way.</p>\n\n<h2>Installing dependencies</h2>\n\n<p>When you install a Bower component via <code>bower install [component_name]</code>, the repository will be cached locally to expedite any future installations of the component. In case you\u2019re curious, the bower cache location is: <code>~/.cache/bower/</code>.</p>\n\n<p>Unlike npm, Bower components are installed &quot;flat&quot; as opposed to in a hierarchical manner; all of your project&#39;s components (and their dependencies) will be installed into <code>bower_components/</code> directory, by default. For example, if one of your components is dependent on the <code>underscore.js</code> library, both will sit side-by-side in the <code>bower_components/</code> directory (remember, with npm, dependencies of dependencies are continually nested in their parent&#39;s directory within a <code>node_modules/</code> directory).</p>\n\n<h1>Conclusion</h1>\n\n<p>Here&#39;s a quick wrap-up of the analogous files between Ruby and the JS\npackage managers we discussed:</p>\n\n<table><thead>\n<tr>\n<th>Description</th>\n<th>Ruby</th>\n<th>JS (npm, server-side)</th>\n<th>JS (Bower, client-side)</th>\n</tr>\n</thead><tbody>\n<tr>\n<td>Term for external library</td>\n<td>&quot;Gem&quot;</td>\n<td>&quot;Package&quot;</td>\n<td>&quot;Component&quot;</td>\n</tr>\n<tr>\n<td>End-user configuration file</td>\n<td><code>.gemrc</code></td>\n<td><code>.npmrc</code></td>\n<td><code>.bowerrc</code></td>\n</tr>\n<tr>\n<td>Per-library configuration file</td>\n<td><code>*.gemspec</code></td>\n<td><code>package.json</code></td>\n<td><code>bower.json</code></td>\n</tr>\n<tr>\n<td>Cache directory</td>\n<td><code>~/.gem/</code></td>\n<td><code>~/.npm/</code></td>\n<td><code>~/.cache/bower/</code></td>\n</tr>\n</tbody></table>\n\n<p>As ES2015 (formerly known as &quot;ES6&quot;) becomes more prevalent and JavaScript code becomes more\nmodular and better for passing around, dependency management grows in\nimportance. Hopefully this quick primer will clear up some\nconfusion Rubysists have as they transition from working with the\nGemfile to working with the package managers JavaScript offers.</p>\n","summary":"A dependency management primer for Rubysist living in a Gemfile-less, Ember.js world.","illustration":null,"illustration_alt":null,"tags":["ruby","ember"],"shallow":false,"date":"2015-03-24T00:00:00Z"},{"id":"2015/03/23/beginner-mentality","title":"Beginner’s mentality","dockyarder":"maria-matveeva","body":"<p>Many people consider us UX or Web experts, and experts are clearly the best people for the job. But we know we have a significant blind spot - our extensive knowledge of the system makes us less likely to see the potential problems a novice might encounter. Anyone who is very familiar with a system, a discipline, or a product has put some distance between them and their beginning level challenges that cause them to develop an <a href=\"http://c4ed.lib.kmutt.ac.th/sites/default/files/HowLearningWorks-Ambrose.pdf\">expert blind spot</a>.</p>\n\n<p>I am sure you are familiar with this situation: you\u2019re invited (or invite yourself) to an event at a university campus. You arrive a bit earlier than you needed, so you can orient yourself in the unfamiliar space. The map on your phone is only accurate to the nearest block, so you get a campus map and try to find room 41-B in the Humanities building named after someone important. You feel stupid.</p>\n\n<p>This is what campus maps often look like:\n<img src=\"http://imgur.com/Aulbb3t.jpg\" alt=\"An old map showing a campus as an island surrounded by unknown waters\"></p>\n\n<p>The reason most outsiders find campus maps confusing and difficult to use is the shift in the frame of reference. </p>\n\n<p>For someone who lives or works on campus, the frame of reference is relative to the borders and shape of the universe that is the university (or corporate, or hospital) campus. They might consider their office to be \u201cin the far North corner\u201d relative to the outline of the campus on a map. Or, they might think of themselves as \u201cright in the middle of the Art Department\u201d. The Art Department here is amorphous: it\u2019s something that may either span two city blocks, or half of a floor in a physical building.</p>\n\n<p>For an outsider, the frame of reference is still the surrounding landscape. They may not know precisely when they entered the school campus (there is no painted border on the ground) or that they are in its top left corner. The \u201cyou are here\u201d marker on the campus map helps, but it still takes a while to adjust to the landmarks differentiated by department, not by road or city block. To find a building, they are forced to adapt to a new system of coordinates. </p>\n\n<h2>Work with an outsider</h2>\n\n<p>I often see this situation reflected in the websites of large institutions. When someone very close to an institution thinks of how their web presence may be organized or used, they inevitably do so with the influence of all the expertise they have. They can\u2019t help it - they \u201clive\u201d inside the campus, and they are good at what they do.</p>\n\n<p>There are many examples of this kind of insider thinking: organizing content by internal structure (instead of user need), breaking up a university website into Athletics, Academics, and Arts (which one contains the event I want to attend?) or assuming that a typical user has even a basic understanding of specialized terminology and concepts.</p>\n\n<p>This is by no means a treaty against specialized knowledge and perspective. The insider knowledge of an industry expert makes a product good, their know-how makes it work. But the outside perspective of a novice-expert truly helps make a product findable and usable.</p>\n\n<p>To attract new customers or visitors, a product needs to make sense to someone unfamiliar with it in their own broader frame of reference. To ask the right questions, to establish user goals and needs, and to judge the effectiveness and clarity of a product, we need both the insider and the outsider perspective.</p>\n","summary":"A fresh perspective can help an expert find and address their blind spots.","illustration":null,"illustration_alt":null,"tags":["design","observations"],"shallow":false,"date":"2015-03-23T00:00:00Z"},{"id":"2015/03/22/tips-for-writing-ember-addons","title":"Tips for writing Ember Addons","dockyarder":"brian-cardarella","body":"<p>After having published many Ember addons I have started to develop my\nown sense of &quot;Best Practices&quot; and I&#39;d like to share those with you:</p>\n\n<h2>1. Keep it minimal, don&#39;t include stylesheets</h2>\n\n<p>I see quite a few addons out there that include their own look &amp; feel by\nincluding sytlesheets. I actually think this is a bad idea. <em>Keep in\nmind, every line of code you put into your addon will end up in the\nfinal footprint of the apps consuming it</em>. This means if you are\nincluding stylesheets those will end up in <code>vendor.css</code>. The odds are\nthat whatever styles you decide look good, someone else might not.\nThey&#39;ll waste even more space by including their own overrides. This is\nwasteful.</p>\n\n<p>Instead, you should <em>keep it minimal</em>. See\n<a href=\"https://github.com/dockyard/ember-admin\">ember-admin</a>. I intentionally\ndid not style the addon so it is left as minimal as possible. If you\nwant to show off a styled version of the addon, you can either include\nstyles in the dummy app&#39;s styles for the addon&#39;s test dummy. Allow\npeople to run the addon&#39;s server locally and view what could be. Or, you\ncan include an addon wrapper library that depends upon your addon. This\nwrapper can include default styles that consumers may choose not to\nalter. For example,\n<a href=\"https://github.com/dockyard/ember-admin-bootstrap\">ember-admin-bootstrap</a>\nstyles ember-admin with Twitter Bootstrap. If this is good enough for\nyou then you just install this library and it pulls in ember-admin but\ngives you some nice styling that you don&#39;t have to spend time doing.</p>\n\n<h2>2. Allow for overrides</h2>\n\n<p>I believe strongly in composable addons. A consumer should have the\nability to easily extend your addon to do whatever they want. This means\norganizing your code a certain way. To provide this you should put all\nof your business logic into <code>addon/</code> and then include wrapper classes in\n<code>app/</code> that just <code>import</code> then <code>export</code> the extended class. For example:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\">// addon/components/foo-bar.js</span>\n<span class=\"reserved\">import</span> Ember from <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">ember</span><span class=\"delimiter\">'</span></span>;\n<span class=\"reserved\">export</span> <span class=\"keyword\">default</span> Ember.Component.extend({\n  <span class=\"comment\">// business logic</span>\n});\n\n<span class=\"comment\">// app/components/foo-bar.js</span>\n<span class=\"reserved\">import</span> FooBar from <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">my-addon/components/foo-bar</span><span class=\"delimiter\">'</span></span>;\n<span class=\"reserved\">export</span> <span class=\"keyword\">default</span> FooBar;\n</pre></td>\n</tr></table>\n</div></div>\n<p>These light wrapper classes <strong>should not</strong> include any business logic.\nAgain, they simply <code>import</code> then <code>export</code> the extended class. This gives\nconsumers the option of overriding this in their own\n<code>app/components/foo-bar.js</code> file to extend and add customization.</p>\n\n<h2>3. Turn off Prototype Extensions</h2>\n\n<p>Currently ember-cli will not generate an addon project with Prototype\nExtensions turn off. However, <a href=\"https://github.com/ember-cli/ember-cli/issues/3443\">I have requested this be the\ndefault</a>. Turning\noff Prototype Extensions will cause the following syntax to fail in\nyour addon&#39;s test suite:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre><span class=\"function\">foo</span>: <span class=\"keyword\">function</span>() {\n  <span class=\"comment\">// whatever</span>\n}.property(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">bar</span><span class=\"delimiter\">'</span></span>)\n</pre></td>\n</tr></table>\n</div></div>\n<p>There are several syntax shortcuts that Ember injects into the base\nTypes. Arrays have quite a bit. Turning off Prototype Extensions will\nforce you to write the above code as:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre>foo: Ember.computed(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">bar</span><span class=\"delimiter\">'</span></span>, <span class=\"keyword\">function</span>() {\n  <span class=\"comment\">// whatever</span>\n})\n</pre></td>\n</tr></table>\n</div></div>\n<p>And this will play nice with consumer applications that must run with\nthe Prototype Extensions turned off.</p>\n\n<p><a href=\"https://github.com/emberjs/ember.js/issues/10590\">It should be noted that Ember 1.10 has a bug where turning off Prototype\nExtensions causes Ember itself to\nfail</a>. This should be\nfixed in 1.11 (<strong>Update: This has been addressed in <a href=\"https://github.com/emberjs/ember.js/pull/10697\">Ember</a>.</strong>).</p>\n\n<p>Avoiding Prototype Extensions can be difficult. I plan on writing a\nfuture blog post to outline certain strategies to duplicate the behavior\nthat you miss out on without Prototype Extensions.</p>\n\n<p>To turn off Prototype Extensions you&#39;ll need to install the <code>ember-disable-prototype-extensions</code>:</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>npm install --save-dev ember-disable-prototype-extensions\n</pre></td>\n</tr></table>\n</div></div>\n<p>See\n<a href=\"https://github.com/dockyard/ember-validations/pull/270\">ember-validations</a>\nfor an example.</p>\n\n<h2>4. Test your addon</h2>\n\n<p>This one should go without saying but I have seen <em>way</em> too many addons\nout there that are untested (the generated tests don&#39;t count). Please\nkeep in mind that there are people building products that might consume\nyour work. Untested code is just one more thing that could go wrong in\nsomeone&#39;s app. If unit testing the code is too difficult, at the very\nleast write integration tests against the dummy application to ensure\nthe happy paths.</p>\n\n<h2>5. Depend on other addons</h2>\n\n<p>You may not know this but addons can depend upon addons. Rather than\nrecreating behavior per-addon it would be best to extract out common\nbehavior to its own dependency. For example,\n<a href=\"https://github.com/dockyard/ember-data-route\">ember-data-route</a> and\n<a href=\"https://github.com/dockyard/ember-cli-async-button\">ember-cli-async-button</a>\nare both being used in\n<a href=\"https://github.com/dockyard/ember-admin/blob/master/package.json#L21-L23\">ember-admin</a>.</p>\n\n<p>To use an addon as a dependency it <em>must</em> be put into the <code>dependencies</code>\nobject in <code>package.json</code>, <strong>not</strong> <code>devDependencies</code>. You may need to\nadd this keyword to your <code>package.json</code> as it is not part of the\nauto-generated file.</p>\n\n<p>Ember&#39;s addon eco-system is getting better every day, and as a community\nwe are learning as we grow how best to build and maintain addons. I&#39;m\nhoping you find these tips helpful. Please feel free to share your own\nin the comments below. </p>\n","summary":null,"illustration":null,"illustration_alt":null,"tags":["ember","javascript"],"shallow":false,"date":"2015-03-22T00:00:00Z"},{"id":"2015/03/19/lean-project-management","title":"The Lean Project","dockyarder":"jon-lacks","body":"<p>I am a firm believer in Lean processes aimed to maximize value while minimizing waste. When it comes to running projects in a Lean way, this goes far beyond the role of the Project Manager (or Scrum-master) thus requiring the right recipe of team, process, communication, work environment and pride. Often I am asked what are the typical practices I apply to projects which fall in the mobile/desktop application development context- this is my attempt to answer the question.  <strong>Important disclaimer</strong> - this is not a prescription for how to run a project, nor does it guarantee success. The secret sauce is always the people NOT the process. </p>\n\n<p><strong>The Raw Materials</strong></p>\n\n<p>If any of these seem unreasonable, you need to take a hard look at your team and work environment. Any concessions made here will reduce team effectiveness.</p>\n\n<ul>\n<li>A team well-balanced in terms of seniority - Experience is contagious!</li>\n<li>Dedicated team members - not split across multiple projects</li>\n<li>Co-located team members</li>\n<li>Smaller teams (no more than 5-7) \u2014  Once you breach this team size communication complexity increases exponentially.<br></li>\n<li>Conduct retrospectives with full participation - Always seek to get better</li>\n<li>A knowledge management strategy ensures team members know where to store/post directional artifacts that other team members require to do their job (e.g. Wireframes, PSDs, Test Cases, Context Diagrams )</li>\n<li>Use of Information Radiators \u2014 Physical views into plans (e.g. Post-Its on a whiteboards) that may supplement a digital plan view</li>\n</ul>\n\n<p><strong>1) Breakdown the work</strong></p>\n\n<p>Decomposition of capabilities/features is a necessary and somewhat painful evil.  However, you do not need to go to a painful level of detail to create this artifact.  The importance is breadth not necessarily depth.  The depth only needs to go as far as necessary for the team to directionally understand where a feature needs to go. If a team member is able to provide some form of time estimate (best and worst case) for one of those lower level items, you&#39;re low level enough. If estimates are coming out to less than 1 day you have likely gone too far.  Get the full team involved, apply the 80/20 rule in terms of completeness and time-box the activity.</p>\n\n<p><strong>2) Define a Path</strong></p>\n\n<p>Once you have step 1 in place, work with the team to derive a chronological execution of the work driven by perceived value and/or risk/complexity of a given feature.  Front loading your risk/complexity (as long as it is somewhat high value) is a very acceptable and smart approach because impact of course correction early on is much less invasive than the alternative.   Ensure a basic architecture for the overall solution is derived and communicated. This ensures that the team has a solid foundation to build upon.</p>\n\n<p><strong>3) Respect the <a href=\"http://en.wikipedia.org/wiki/Project_management_triangle\">Pyramid of constraint</a></strong></p>\n\n<p>Scope, Time and Cost \u2014  Fundamental variables applicable to any project context.  Visibility and active monitoring of these variables is essential to ensure project success.  First and foremost, ensure that a baseline is established for each of these variables before a team even start the project. Understand how your stakeholders rate the relative importance of each of these variables and uphold the &quot;Rule&quot; that trade-offs are the only way these baselines can/will adjust.   Deferring this activity to after a project gets going can result in scope creep and cost/time over runs.  </p>\n\n<p><strong>4) Hold up the mirror</strong></p>\n\n<p>As a PM, it\u2019s your responsibility to hold up a mirror in front of your team that shows the good, the bad, and the ugly.  This allows the team to maintain appreciation for the big picture while they do their best to work through the small one.   I am huge advocate of a plan view that I have written about in the past (<a href=\"http://reefpoints.dockyard.com/2014/07/29/project-carpe-diem.html\">High and Mid-Level Plans</a>) \u2014 which shows time, features, tasks, distribution of work across team capability areas (Design, Backend, UXD, etc.), progress made, unplanned work and deferred work that will come in later releases.  If you have this and revisit it often, consider your team informed and that those Triangle of Constraint variables are being monitored (for the most part.)</p>\n\n<p><strong>5) Create an environment of ownership and accountability</strong></p>\n\n<p>Everyone is a player. PM\u2019s should be servant leaders, therefore any plan created needs to be the team&#39;s plan not the PM\u2019s (or Sr. Mgmt.)  This way the team has accountability and ownership rights over whatever happens to the plan.  If something is not going as planned the team can understand the implications of this and course correct and work to reveal why something may not be working out.  Constant readjustment and calibration is required to keep things moving along. The project manager helps ensure these conversations happen.</p>\n\n<p>No team member can slip into the shadows. To be successful every contributor needs to have a voice.  A PM needs to put their \u201cFacilitation\u201d hats on and ensure they proactively encourage all to participate and chime in on team affairs. That\u2019s the beauty of teams. They succeed together, not as individuals. </p>\n\n<p><strong>6) Demonstrate Progress</strong></p>\n\n<p>Demos encourage quality, because no one wants to demo something that works and looks subpar. Stakeholders  can rest assured they did not buy snake oil and value is being delivered in some regular interval.  Demonstrations affirm you&#39;re heading in the right direction.  Last but not least, demos allow the team to celebrate success in short bursts - It feels great to get something done especially when the road ahead is a long one!</p>\n\n<p>Give it a go and let me know if this works for your team.</p>\n","summary":"The right recipe of team, process, communication, work environment and pride","illustration":null,"illustration_alt":null,"tags":["project-management","lean","agile"],"shallow":false,"date":"2015-03-19T00:00:00Z"},{"id":"2015/03/18/the-doldrums-of-consulting","title":"The Doldrums of Consulting","dockyarder":"brian-cardarella","body":"<p><img src=\"http://i.imgur.com/X6DGygm.jpg\" alt=\"http://i.imgur.com/X6DGygm.jpg\"></p>\n\n<p><em>The Doldrums</em> is a sailing term. It means when you&#39;re stuck on the\nwater with no wind. Your only option is to wait for the wind to pick up\nso you can continue on your way.</p>\n\n<p>DockYard is currently in the doldrums.</p>\n\n<p>Maybe this isn&#39;t something that a consultancy should publicly admit,\nbut we&#39;ve seen client engagement significantly dry up for us in the past\nmonth and a half. Where we were selling and turning clients away a few\nmonths ago, we are struggling to close a single deal right now. This is\nthe ebb and flow of consulting, it happens. Our only option is to wait\nfor the wind to pick up so we can continue on our way.</p>\n\n<p>I was speaking with a few other software (Ember) consultancies recently\nand they voiced similar stories. I am not certain why Ember has seen\nsuch a steep drop off in interest. One theory is that Ember is currently\nin the <em>Trough of Sorrow</em></p>\n\n<p><img src=\"http://i.imgur.com/hkzpuBa.png\" alt=\"http://i.imgur.com/hkzpuBa.png\"></p>\n\n<p>Does a framework follow similar trends to a startup? Perhaps. In any\nevent, we&#39;re now trying to diversify our offerings. I announced last\nweek that DockYard is now offering Staff Augmentation services. This has\npiqued some interest but we&#39;re seeing a lot of inquiries for starting a\nfew months from now.</p>\n\n<p>It is funny because I know in a month or two we&#39;ll be fine. We just have\nto survive the thin times, which is always stressful. How we weather\nthis will speak a lot about DockYard as a company. It is said the only\nway to survive the <em>Trough of Sorrow</em> is going to be company culture. If\nthis is true then I&#39;m quite confident in us.</p>\n\n<p>I also realize that we&#39;re towards the end of a financial quarter.\nCompanies tend to reach out after the start of a quarter, but if I were\nthem I wouldn&#39;t wait. If companies were to <a href=\"https://dockyard.com/contact\">contact\nus</a> now they would find us in a position that\nwould be easy to negotiate with.</p>\n\n<p>I&#39;d be interested in hearing from other shops: have you experienced The\nDoldrums? What pulled you through? What strategies have you put in place\nto avoid them in the future?</p>\n","summary":null,"illustration":null,"illustration_alt":null,"tags":["business","opinion"],"shallow":false,"date":"2015-03-18T00:00:00Z"},{"id":"2015/03/16/thriving-in-a-new-work-environment","title":"Thriving in a New Work Environment","dockyarder":"cory-tanner","body":"<h2>My Background</h2>\n\n<p>If you asked me a month and a half ago when I was living and working near Philadelphia as a Director of digital communications, \u201cCory what are the chances that you will be in Boston working for a new company?\u201d. I would have said you were crazy and I couldn\u2019t see myself leaving the Philly area unless a company blew me away with their culture and work environment. How would I watch my Sixers, Eagles, and Phillies games if I left the Philly area?</p>\n\n<p>Then in a week and a half frenzy I was moving up to Boston after it had just snowed another two feet in Boston. A day after that I had moved in to my new apartment and it was my first day at DockYard as a Junior UX Developer!</p>\n\n<p>Fast forward a week and I had met 16 new DockYard co-workers (who, yes, are crazy smart) and was introduced to a new coding/project management environment. I was then challeneged to learn how to  structure my SCSS with the\n<a href=\"https://github.com/dockyard/styleguides/blob/master/uxd/class-naming-conventions.md\">BEM</a>\nclass naming conventions and rules for Scalable and Modular Architecture for CSS\n(<a href=\"https://github.com/dockyard/styleguides/blob/master/uxd/beginning-a-project.md\">SMACSS</a>), all of this  was a tidal wave of new information and personally a different way of thinking.</p>\n\n<h2>It\u2019s Not All About You</h2>\n\n<p>I would love to say that the sole reason that I\u2019ve been able to handle all the new information is that I am purely that awesome. But in reality I could not have gotten through any of this without the work environment DockYard has implemented.</p>\n\n<p><a href=\"http://reefpoints.dockyard.com/2015/01/16/joining-dockyard.html\">Estelle</a> and\n<a href=\"http://reefpoints.dockyard.com/office/2013/07/09/first-month-at-dockyard.html\">Marin</a> explain how \u201cWicked Good\u201d the DockYard team is and do so better than I can, but from my experience after a month of working here it is clear that everyone wants to help each other (new guy included). If you need help and you\u2019re not approaching other team members with questions, you might find yourself out of place.</p>\n\n<p>This type of atmosphere is exactly what you need for soaking in all the information you receive at a new job. You will always have questions and uncertainties in a new environment like:</p>\n\n<ul>\n<li>Am I meeting their expectations</li>\n<li>Am I messing this up</li>\n<li>Will I look stupid if I ask this question</li>\n<li>What will they think if...</li>\n</ul>\n\n<p>It is inevitable to have these questions when you are in a new work place and you should have them, don&#39;t be afraid to solve those concerns by asking productive questions! The new company you just joined would rather be asked a stupid question then see you running in circles not willing to interact with the team.</p>\n\n<p>I have asked many questions in my first month here and not once has someone:</p>\n\n<ul>\n<li>Said no</li>\n<li>Told me there was no point to my question</li>\n<li>Looked down on me for not knowing something</li>\n</ul>\n\n<p>That is a testament to DockYard but also should be how any team should be run, especially web development teams.</p>\n\n<h2>Success Is Ultimately Decided By You</h2>\n\n<p>Now it\u2019s not all up to the team you are joining to make you successful, you have to be willing to do the following:</p>\n\n<ul>\n<li>Put time into reading about things you did not understand</li>\n<li>Research tools/techniques that you see yourself using in the future</li>\n<li>Be open minded with new development techniques and a new project management process</li>\n</ul>\n\n<p>If you are successful with goals/projects your boss gives you, then you are meeting your employers standards. In the web development line of work in order to thrive in an environment you should be going above what is expected of you.</p>\n\n<p>When coworkers look at your work they should be impressed and surprised with:</p>\n\n<ul>\n<li>The product you are presenting</li>\n<li>How quick and thorough you are when learning new things</li>\n<li>Contributions you make to current projects</li>\n</ul>\n\n<p>When you are getting those type of reactions to the list above you are thriving in the new work environment.</p>\n\n<p><strong>&quot;Thriving in a new work environment comes from working harder and more efficiently than expected&quot;</strong></p>\n\n<p>Be willing to be one of the first people at the office and leave later than most, you want to soak in as much information as you can. When you are given new things to learn tackle them immediately.</p>\n\n<p>During all the chaos of starting a new job stay organized and keep notes of things you are learning, you will probably not remember that Git command after one or two uses.</p>\n\n<p>If you find yourself in a new work environment and feel overwhelmed just remember to ask as many questions as you can and work hard to understand the solutions your team provides you.</p>\n","summary":"Learn how to go beyond expectations at your new job","illustration":null,"illustration_alt":null,"tags":["opinion","jobs","team"],"shallow":false,"date":"2015-03-16T00:00:00Z"},{"id":"2015/03/11/ask-good-questions","title":"Ask good questions","dockyarder":"maria-matveeva","body":"<p>In an <a href=\"http://reefpoints.dockyard.com/2015/02/11/managing-the-conversation.html\">earlier post</a>, I focused on the challenges of leading a good user interview. Today, I\u2019d like to focus on one rule about asking questions to get reliable results.</p>\n\n<h2>Ask open-ended questions.</h2>\n\n<p>Otherwise, the responses you get will be either biased or useless. </p>\n\n<h2>Let&#39;s look at some interview questions (from worst to best)</h2>\n\n<p>They appear in order: from least useful to most useful in getting you good responses. For context, imagine you\u2019re doing some user research and you&#39;re in the middle of a project to design some widgets.</p>\n\n<ul>\n<li><p><strong>\u201cYou like this widget in green, right? We picked green because it\u2019s calming.\u201d</strong>\nThis question is so bad it&#39;s grotesque, but it may still happen to novice interviewers. Not only does the question suggest a specific answer (you like it!), but it also gives reasons why that answer might be the right one (green is calming!) The interviewee is not likely to share a genuine opinion with this much pressure to say \u201cyes, I love it in green!\u201d.</p></li>\n<li><p><strong>\u201cHow do you feel about this widget? Do you like its color?\u201d</strong> Slightly better, but still of limited use. By suggesting a response and allowing the user to narrow it down to a binary yes/no, we\u2019re getting a very limited amount of information back. In addition, likes and dislikes move the conversation into a potentially awkward area. Some people may not be comfortable telling you they don\u2019t like something you made.</p></li>\n<li><p><strong>\u201cHow do you feel about this widget? What do you think it does?\u201d</strong> Now, this is better. We are opening up to qualitative responses with lots of detail. By not suggesting options for what an answer might be, we are more likely to get unexpected, valuable results.</p></li>\n<li><p><strong>\u201cTalk me through what you see here.\u201d</strong> A super open-ended question, useful in the beginning of an interview. Do they even see the widget?</p></li>\n<li><p><strong>\u201cHow would you normally approach (widget-related task)?\u201d</strong> This seems to be the best opening question for a user interview. While not appropriate for all circumstances, it is great at opening up areas you may not have considered to be in the scope of the project. This question can help reframe the problem you are working to solve.</p></li>\n<li><p><strong>\u201cHow did you last (widget-related task)?\u201d</strong> Past behavior is a more reliable indicator than a behavior people might describe as their normal. So, this re-phrasing can encourage more honest answers. </p></li>\n</ul>\n\n<p>You may notice that it takes more  time to ask open-ended questions. You may trigger your interviewee to share a lot of extra information, not just a concise answer to the question you asked. You may have to follow up with more questions to get to the \u201cwhy\u201d behind a certain behavior. But with the increased effort comes a better result. The responses are real. They are not influenced by your opinion about the thing you\u2019re asking, because you\u2019ve kept that opinion outside the questions. These responses present a more nuanced picture of your users\u2019 needs and environment.</p>\n\n<p>I condensed this principle from conference talks, books and workshops I attended over the past few years. Two sources in particular: </p>\n\n<ul>\n<li><p><a href=\"https://twitter.com/michelleyaiser\">Michelle Yaiser&#39;s</a> talk on user research at <a href=\"http://uxeast.org/\">UX Camp</a></p></li>\n<li><p><a href=\"http://shop.npr.org/sound-reporting\">Sound reporting : the NPR guide to audio journalism and production</a>. This book is outside of the usual UX Design reading list, but it&#39;s useful for interviewing skills. It shows how much  effort and consideration it takes a journalist to gather information in a neutral, ethical way.</p></li>\n</ul>\n\n<p>It&#39;s almost always a better investment of your time to conduct a few in-depth, \u201cdifficult\u201d and neutral interviews, than to rush many interviewees through surface-level questions. This is especially true at the beginning of a project, when more design options are open. Your effort to keep the process unbiased will yield quality results, and quality wins.</p>\n","summary":"The only way to get real answers in user interviews for UX design","illustration":null,"illustration_alt":null,"tags":["design","observations","quality","workflow"],"shallow":false,"date":"2015-03-11T00:00:00Z"},{"id":"2015/03/09/dockyard-is-now-accepting-staff-augmentation-ember-js-contracts","title":"DockYard is now accepting staff augmentation Ember.js contracts","dockyarder":"brian-cardarella","body":"<p>Over the past three years DockYard has primarily taken on &quot;greenfield&quot;\nprojects, where we are responsible for building applications from\nscratch through design, development, and launch. Starting today we&#39;re\nadding Ember.js Staff Augmentation to the services we provide to our\nclients.</p>\n\n<p>If you are looking to add an Ember.js expert to help your team you\nshould contact us. Our entire engineering team is extremely experienced\nin Ember.js application development, Ember.js best practices, and Ember.js Test Driven\nDevelopment. We can help your team finish existing features, guide\nyour team on how to properly build an Ember.js application, and help you\nhit your delivery deadline.</p>\n\n<p><a href=\"https://dockyard.com/contact\">Visit our contact page and choose\n&quot;Staff Augmentation&quot; for the Budget</a></p>\n","summary":null,"illustration":null,"illustration_alt":null,"tags":["javascript","ember"],"shallow":false,"date":"2015-03-09T00:00:00Z"},{"id":"2015/03/04/ember-conf","title":"EmberConf 2015 Day 2","dockyarder":"marin-abernethy","body":"<h1>Fault Tolerant UX by Dan Gebhardt</h1>\n\n<p><a href=\"https://github.com/dgeb\">@dgeb</a></p>\n\n<ul>\n<li>Users should be shielded from any application issues that are encountered</li>\n</ul>\n\n<h2>Transaction UX</h2>\n\n<ul>\n<li>Atomic: all or nothing\n\n<ul>\n<li>Ex. if a user fills out a form your app should save all the data, not just some.</li>\n</ul></li>\n<li>Consistent: move between different states</li>\n<li>Isolated: allows concurrent changes</li>\n<li>Durable: changes are persisted</li>\n</ul>\n\n<h3>Apps MUST NOT violate the rules of transactional UX or you are violating the users trust</h3>\n\n<h2>Forgiving User Experience</h2>\n\n<ul>\n<li>Fault Tolerant UX --> Forgiving UX</li>\n<li>Transitional experience: to persist data that has not yet be saved, but in the process of being edited</li>\n<li>Undo/redo</li>\n<li>Offline support</li>\n<li>Asynchronous interface (non-blocking)\n\n<ul>\n<li>user can make changes as quickly as possible (changes can be queued up and synced at your apps convenience)</li>\n</ul></li>\n</ul>\n\n<h2>Engineering Fault Tolerant UX</h2>\n\n<ul>\n<li>Ember provides simple elgant patterns for building a consistent UX</li>\n<li>Similarly, ember data provides durable UX</li>\n<li>Ember data requires customization (extra code) to provide atomic and isolated code</li>\n</ul>\n\n<h2><a href=\"https://github.com/orbitjs\">Orbit</a></h2>\n\n<h3>Orbit application patterns</h3>\n\n<ul>\n<li>Client first development</li>\n<li>Pluggable sources</li>\n<li>Data synchronization</li>\n<li>Editing contexts</li>\n<li>Undo/redo</li>\n</ul>\n\n<h3><a href=\"https://github.com/orbitjs/ember-orbit\">ember-orbit</a></h3>\n\n<ul>\n<li>Provides a store with synchronous and asynchronous methods</li>\n</ul>\n\n<h1>Aligning Ember with Web Standards by Matthew Beale</h1>\n\n<p><a href=\"https://github.com/mixonic\">@mixonic</a></p>\n\n<h2>Standards</h2>\n\n<ul>\n<li>The JS standardization process is about to change: ES5, ES6, ES2015!</li>\n<li>Standards Process\n\n<ul>\n<li>5 stages - strawman, proposal(polyfills), draft(experimental), candidate(compliant), finished(shipping)</li>\n<li><a href=\"https://remysharp.com/2010/10/08/what-is-a-polyfill\">Polyfill</a>: A polyfill is a piece of code (or plugin) that provides the technology that you expect the browser to provide natively. </li>\n</ul></li>\n<li>2 major standards groups:\n\n<ul>\n<li>WHATWG + W3C (html / dom related)</li>\n<li>TC39 + Ecma International (promises, classes, for loops, etc)</li>\n</ul></li>\n<li>Aligning with standards is not a one time event. It is ongoing!</li>\n</ul>\n\n<h2>Why Standards?</h2>\n\n<ul>\n<li>The goal is productivity</li>\n<li>Standards are portable, reflect best preactices, and endure </li>\n<li>Participants win</li>\n</ul>\n\n<h3>ES5 -> ES2015</h3>\n\n<ul>\n<li>New API for maps</li>\n<li>Promises</li>\n<li>Proxies</li>\n</ul>\n\n<h3>Babel</h3>\n\n<ul>\n<li>Babel will turn your ES6+ code into ES5 friendly code\n\n<ul>\n<li>Enables new syntax (fat arrow, let) , APIs (map, set), not everything</li>\n</ul></li>\n</ul>\n\n<h3>Aligning Ember&#39;s Object Model</h3>\n\n<ul>\n<li> is this feature: stable? a good pattern? implemented correctly? implemented performantly?</li>\n</ul>\n\n<h3>ES Classes</h3>\n\n<ul>\n<li>Three new tools: class, extend, super</li>\n<li>More gotchas: \n\n<ul>\n<li>setUnknownProperty </li>\n<li>Transpiler output</li>\n<li>New syntax</li>\n<li>Changes in way that super behaves</li>\n<li>Mixins</li>\n</ul></li>\n</ul>\n\n<p>Remember: standards are a two-way street!</p>\n\n<p><a href=\"http://www.201-created.com/ember-community-survey-2015\">Ember Community Survey</a></p>\n\n<h1>Growing Ember One Tomster at a Time by Jamie White</h1>\n\n<p><a href=\"https://github.com/jgwhite\">@jgwhite</a></p>\n\n<p>How did a tech community come to be so vibrant? How can we continue?</p>\n\n<h2>1. The Tomster</h2>\n\n<ul>\n<li>Representation of productivity and friendliness</li>\n<li>Tomster wore different hats\n\n<ul>\n<li>Custom tomsters</li>\n</ul></li>\n<li>Good defaults\n\n<ul>\n<li>Having a friendly mascot makes things easier.</li>\n<li>\u201cAmbition\u201d and \u201cfriendliness\u201d is hard to juxtapose</li>\n</ul></li>\n<li>Composing concepts</li>\n</ul>\n\n<h2>2. Language</h2>\n\n<ul>\n<li>Tomster is a tool. Productivity and friendliness implicitly part of conversation\n\n<ul>\n<li>Words stick; the right words enable conversations</li>\n<li>\u201chack\u201d is not a good vocabulary word - negative connotation </li>\n</ul></li>\n</ul>\n\n<h2>3. User Interface</h2>\n\n<ul>\n<li>Programming language and documentation with good user interface</li>\n</ul>\n\n<h2>4. Hackability</h2>\n\n<ul>\n<li>Parts have to be accesible - has to feel hackable.\n\n<ul>\n<li>Tomster was not overly done.</li>\n</ul></li>\n</ul>\n\n<h2>5. Roles</h2>\n\n<ul>\n<li>Many specialisms in Ember Community: documenteer, student, mentor, critic, explorer, and many more!</li>\n</ul>\n\n<p>Community building is a design and engineering challenge</p>\n\n<h1>Interaction Design with Ember 2.0 and Polymer by Bryan Langslet</h1>\n\n<p><a href=\"https://github.com/blangslet\">@blangslet</a></p>\n\n<ul>\n<li>The web browser is the largest app runtime in the world, and will continue to grow</li>\n<li>Every device has to be connected to the web</li>\n<li>Web frameworks and toolkits are getting closer to native performance everyday </li>\n</ul>\n\n<p>&quot;How can I - one person with a laptop - leverage my time as powerfully as I possibly can, every minute I work?&quot;</p>\n\n<h2>Ember-Flow</h2>\n\n<ul>\n<li>A paradigm shift for web interaction design</li>\n<li>The goal: to blur the lines between native and web applications</li>\n</ul>\n\n<h3>Web Components</h3>\n\n<ul>\n<li>Extends the browser itself\n\n<ul>\n<li>Polymer components extend a base component</li>\n</ul></li>\n<li>Encapsulation</li>\n<li>Declarative</li>\n<li>True reusability/portability</li>\n</ul>\n\n<h2>Ember vs. Polymer Use Cases:</h2>\n\n<ul>\n<li>Ember: developer productivity, conventions</li>\n<li>Ember: community</li>\n<li>Ember: World-class routing and state management</li>\n<li>Polymer: constantly pushing the web forward</li>\n</ul>\n\n<h3>Web Animations API</h3>\n\n<ul>\n<li>Has the best of both CSS and javascript animations</li>\n<li>Web animations run outside of the main thread and can be accelerated on the GPU</li>\n</ul>\n\n<h3><a href=\"https://github.com/blangslet/treasure-hunt\">Treasure Hunt Demo Application</a></h3>\n\n<ul>\n<li>&quot;Demonstrates an experimental integration between ember.js routing and Polymer&#39;s core-animated-pages component to create beautiful inter-state animated transitions&quot;</li>\n</ul>\n\n<h1>Building Applications for Custom Environments with Ember CLI by Brittany Storoz</h1>\n\n<p><a href=\"https://github.com/brittanystoroz\">@brittanystoroz</a></p>\n\n<h3>Ember CLI</h3>\n\n<ul>\n<li>Everyones favorite command line tool</li>\n<li>Build organized ember apps quickly</li>\n<li>Fills huge void in toolset for JS devs</li>\n</ul>\n\n<h3>Ember CLI Addons</h3>\n\n<ul>\n<li>Extend ember-cli beyond core fucntionality</li>\n<li>Follow standard npm conventions</li>\n<li>Easy to create &amp; install:</li>\n</ul>\n\n<p><code>ember addon name-of-your-addon</code></p>\n\n<p><code>ember install:addon name-of-your-addon</code></p>\n\n<h2>Firefox OS</h2>\n\n<ul>\n<li>Requirements that Ember CLI could not provide\n\n<ol>\n<li>Generate and validate a manifest file (same concept as package.json)</li>\n<li>UI components that mimic OS interface</li>\n<li>Publish to Firefox marketplace</li>\n</ol></li>\n<li>Ember CLI Addon was born to fill those requirements.</li>\n</ul>\n\n<h3>1st Requirement: Generating The Manifest</h3>\n\n<ul>\n<li>Creating Blueprints\n\n<ul>\n<li>rules for generating common code and file structures:</li>\n</ul></li>\n</ul>\n\n<p><code>ember generate blueprint name-of-blueprint</code></p>\n\n<h3>2nd Requirement: FirefoxOS UI (<a href=\"https://github.com/gaia-components/gaia-tabs\">Gaia</a>)</h3>\n\n<ul>\n<li>Building components\n<code>bower install gaia-components/gaia-stubs</code></li>\n<li>2 responsibilities:\n\n<ul>\n<li>including dependencies and creating the addon</li>\n<li>making both available to the consuming application</li>\n</ul></li>\n</ul>\n\n<h2>Components Review</h2>\n\n<ul>\n<li>Dependencies:\n\n<ul>\n<li>bower install within addon</li>\n<li>bower install withing consuming logic</li>\n</ul></li>\n<li>Component logic\n\n<ul>\n<li>create component</li>\n<li>export components to consuming aplication</li>\n<li>define component template</li>\n</ul></li>\n<li>Validation &amp; Publishing\n\n<ul>\n<li>creating commands for control over when these things happen</li>\n<li><code>includedCommands</code> hook: returns object of commands which are found inside <code>lb/commands</code></li>\n<li><code>ember help</code> lists out information about available add-on commands. And lots more useful info.</li>\n</ul></li>\n</ul>\n\n<h1>Building Real-time Applications with Ember by Steve Kinney</h1>\n\n<p><a href=\"https://github.com/stevekinney\">@stevekinney</a></p>\n\n<ul>\n<li>Integrating browser functionality and third party code into our applications. In this case, WebSockets.</li>\n<li>What is a WebSocket Used for? \n\n<ul>\n<li>Collaboration, analytics dashboards, prompting user to upgrade application</li>\n</ul></li>\n<li>Can I actually use WebSockets? \n\n<ul>\n<li>For the most part, yes (some earlier version of IE not supported)</li>\n</ul></li>\n<li>Socket.io -> library for Node</li>\n<li>Faye  -> simple pub/sub messaging</li>\n</ul>\n\n<h3>Approach #1: Use Standalone Controller</h3>\n\n<ul>\n<li>Somewhat limited because it only works between controllers</li>\n</ul>\n\n<h3>Approach #2: Dependency Injection with Services</h3>\n\n<ul>\n<li><code>ember generate service websocket</code></li>\n<li>Declare where you want to inject it inside the Initializer</li>\n<li>Inside controller: <code>websocket: Ember.inject.service()</code></li>\n</ul>\n\n<h3>Approach #3 Using Socket.io</h3>\n\n<ul>\n<li>Socket.io is both a server and client side library</li>\n</ul>\n\n<p><a href=\"bit.ly/js-poll\">What is your favorite thing about JavaScript?</a></p>\n\n<h1>Minitalks!</h1>\n\n<h2>1. Measuring Performance with User Timing API by Bill Heaton</h2>\n\n<p><a href=\"https://github.com/pixelhandler\">@pixelhandler</a></p>\n\n<ul>\n<li>Measuring the differences in template rendering speeds between Ember.js v1.8.1 w/Handlebars v1.3 and Ember.js v1.10.0 w/HTMLBars</li>\n<li>Check out his findings on <a href=\"http://pixelhandler.com/posts/measuring-performance-with-user-timing-api-in-an-ember-application\">blog!</a></li>\n</ul>\n\n<h2>2. <code>ember-islands</code> by Mitch Lloyd</h2>\n\n<p><a href=\"https://github.com/mitchlloyd\">@mitchlloyd</a></p>\n\n<ul>\n<li><a href=\"https://github.com/mitchlloyd/ember-islands\"><code>ember-islands</code></a></li>\n<li>Render Ember components UJS-style to achieve &quot;Islands of Richness&quot;. You can arbitrarily render Ember components in the body of the page and they will all be connected to the same Ember app.</li>\n</ul>\n\n<h2>3. Ember Testing with Chemistry Dog by Liz Bailey</h2>\n\n<p><a href=\"https://github.com/lizzerdrix\">@lizzerdrix</a></p>\n\n<ul>\n<li>Migration from Rails to Ember</li>\n<li>Ember does not provide as much documentation on testing</li>\n<li>Would love to help make Ember more approachable to beginners</li>\n</ul>\n\n<h2>4. Running C++ in ember-cli with Emscripten by Michael Nutt</h2>\n\n<p><a href=\"https://github.com/mnutt\">@mnutt</a></p>\n\n<ul>\n<li><a href=\"https://github.com/movableink/ember-cli-emscripten\"><code>ember-cli-emscripten</code></a></li>\n<li>Allows you to add C or C++ to your ember app, then require the exposed functions and classes.</li>\n<li>Fibonacci sequence demo!</li>\n</ul>\n\n<h2>5. Ember Observer by Kate Gengler</h2>\n\n<p><a href=\"https://github.com/kategengler\">@kategengler</a></p>\n\n<ul>\n<li><a href=\"https://github.com/emberobserver/client\">Ember Observer</a></li>\n<li>Gives addons a score out of 10</li>\n<li>pulls hourly from npm and Github</li>\n</ul>\n\n<h2>6. CSS is Hard by Erik Bryn</h2>\n\n<p><a href=\"https://github.com/ebryn\">@ebryn</a></p>\n\n<ul>\n<li><a href=\"https://github.com/ebryn/ember-component-css\"><code>ember-component-css</code></a></li>\n<li>namespaces our component styles automatically!</li>\n</ul>\n\n<h1>Physical Design by Edward Faulkner</h1>\n\n<p><a href=\"https://github.com/ef4\">@ef4</a></p>\n\n<ul>\n<li>Computers are so abstract. Possibilities are endless, only hindered by your imagination.</li>\n<li>Constrained by physics</li>\n<li>Googles material design spec\n\n<ul>\n<li>does not break rules of physics</li>\n<li>animations and motion appeal to us because they fit into our idea of how it should physically work.</li>\n</ul></li>\n<li><a href=\"https://github.com/ef4/liquid-fire\">Liquid Fire</a> live demo!\n\n<ul>\n<li> <code>npm install \u2014save-dev liquid-fire</code> for Ember 1.11+</li>\n</ul></li>\n<li><a href=\"http://miguelcobain.github.io/ember-paper\">Ember Paper</a></li>\n</ul>\n\n<h1>Closing Keynote: Chris Eppstein</h1>\n\n<p><a href=\"https://github.com/chriseppstein\">@chriseppstein</a></p>\n\n<h2>Announcing: Eyeglass</h2>\n\n<ul>\n<li>Distribute SASS extensions as NPM modules for <a href=\"https://github.com/sass/libsass\">LIBSASS</a></li>\n<li>Will be able to integrate with a number of different build systems, including Ember CLI</li>\n<li>Major performance improvements</li>\n<li>The best parts of SASS and Compass, working with the best tools JS has to offer</li>\n</ul>\n\n<h2>A Selection of Chris&#39; Inspirational Messages</h2>\n\n<ul>\n<li>&quot;Don&#39;t be a Sasshole&quot;</li>\n<li>&quot;People come to a community for the tech, but stay for the love!&quot;</li>\n<li>&quot;Sass didn&#39;t lose when I started ignoring the haters&quot;</li>\n<li>&quot;If you use a framework you love, you&#39;ll never work a day in your life&quot;</li>\n<li>&quot;Secret to a vibrant community: be excellent to eachother&quot;</li>\n</ul>\n","summary":"Live blog of EmberConf 2015","illustration":null,"illustration_alt":null,"tags":["ember"],"shallow":false,"date":"2015-03-04T00:00:00Z"},{"id":"2015/03/03/ember-conf","title":"EmberConf 2015 Day 1","dockyarder":"marin-abernethy","body":"<h1>Opening Keynote: Tom Dale and Yehuda Katz</h1>\n\n<ul>\n<li>To kick off the conference Tomster joined Tom Dale and Yehuda Katz on stage!</li>\n<li><a href=\"https://github.com/mixonic\">@mixonic</a> <a href=\"https://github.com/ef4\">@ef4</a> <a href=\"https://github.com/mmunm\">@mmun</a> were welcomed as new members to the Ember Core Team</li>\n<li>Big thanks to Robert Jackson <a href=\"https://github.com/rwjblue\">@rwjblue</a>!!!! <a href=\"http://getrwjblueabeer.com\">Get rwjblue a beer!</a></li>\n</ul>\n\n<h2>Ember 2014 in Review</h2>\n\n<ul>\n<li>Rapid Release worked great! 6 week release cycle to get new features into everyone&#39;s hands.</li>\n</ul>\n\n<h3>HTMLBars</h3>\n<div class=\"highlight hbs \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>&lt;a href={{url}}&gt;\n</pre></td>\n</tr></table>\n</div></div>\n<p>instead of</p>\n<div class=\"highlight hbs \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>&lt;a {{bindAttr href=&quot;url&quot;}}&gt; \n</pre></td>\n</tr></table>\n</div></div>\n<ul>\n<li>Block parameters, faster and lower memory, validation for templates</li>\n<li>Killed metamorphs!</li>\n<li>Improvements to Ember Inspector including Ember Data and promises pane, render performance tab, multiple <code>&lt;iframe&gt;</code>s, and redesigned UI, to name a few.</li>\n</ul>\n\n<h3>Ember CLI</h3>\n\n<ul>\n<li>Single install command for Addons, test support, massive performance improvements, and API stubbing, and server proxy (the list goes on!).</li>\n</ul>\n\n<h3>Testing Ecosystem</h3>\n\n<ul>\n<li>handles asynchrony </li>\n</ul>\n\n<h3>Ember Data</h3>\n\n<ul>\n<li>Relationship syncing, async relationships - built with async loading in mind.</li>\n<li>Adapter Ecosystem</li>\n</ul>\n\n<h2>That was last year, what&#39;s next?</h2>\n\n<ul>\n<li><a href=\"http://guides.emberjs.com\">Versioned Guides</a> -- live today!</li>\n<li>Next Version of Ember CLI (as of last night)</li>\n<li>Engines</li>\n<li>List View</li>\n<li><angle-bracket> Components (already in Canary)</li>\n<li>Liquid Fire</li>\n<li>Async and Routable Components</li>\n<li>Ember Data: JSON API support out of the box</li>\n<li>Pagination and Filtering</li>\n<li>Shipping Ember Data 1.0</li>\n<li>6/12 release date for Ember 2.0, Ember Inspector, Ember CLI, LiquidFire, etc.</li>\n</ul>\n\n<h1>Ember.js Performance by Stefan Penner</h1>\n\n<p><a href=\"https://github.com/stefanpenner\">@stefanpenner</a></p>\n\n<ul>\n<li>Important choices to make, how to make the right choices?</li>\n<li>Time vs. Space</li>\n<li>Things that are costly in space: closures, objects, non-optimized code, compiled code, excess shape allocations</li>\n<li>In Ember.js, need to do less work, align with primitives</li>\n</ul>\n\n<h2>Mis-alignment #1</h2>\n\n<p>Problem: Ember does too much work.</p>\n\n<p>Solution: do less</p>\n\n<ul>\n<li>Actions up, bindings down, no two-way bindings, explicit data flow</li>\n<li>RIP singleton controllers, explicit lifecycle</li>\n</ul>\n\n<h2>Mis-alignment #2</h2>\n\n<p>Problem: <code>init</code> and <code>super</code> are hard to learn and mis-aligned with ES2015</p>\n\n<p>Solution: Embrace super</p>\n\n<ul>\n<li>Explicit defaults in super</li>\n<li>Don&#39;t set properties until super</li>\n<li>When to call <code>_super()</code>: When overwriting a framework method before touching <code>this</code></li>\n</ul>\n\n<h2>Mis-alignment #3</h2>\n\n<p>Problem: Ember.Object.reopen, buggy, complex internals, massive allocations &amp; shapes</p>\n\n<p>Solution: Limit reopen to before first instantiation</p>\n\n<ul>\n<li>Meta is a good thing. Every class has a meta, every instance has a meta. Metas for instances are what kill us. Meta is &quot;live&quot; inheriting. If can limit reopen, can make all metas one shape.</li>\n<li>meta.listeners is crazier</li>\n<li>Solution: work with V8 to make things better</li>\n</ul>\n\n<h1>Designing for Ember Apps by Steve Trevathan</h1>\n\n<p><a href=\"https://twitter.com/strevat\">@strevat</a></p>\n\n<ul>\n<li>Mental models: Understand where the user is coming from and what kinds of interactions they deal with\n\n<ul>\n<li>&quot;What I think the thing is&quot;</li>\n<li>Influenced by experiences from the past</li>\n<li>Not always solid: can be updated and changed. (improvements)</li>\n</ul></li>\n<li>2 types of mental models\n\n<ul>\n<li>Macro: what I think it is from a distance.</li>\n<li>Micro: how I think each individual interaction works; the specific feature.</li>\n</ul></li>\n<li>Build a framework of understanding\n\n<ul>\n<li>Some apps are just too complicated</li>\n<li>Use explicitly if they apply</li>\n<li>Break mental models if it improves the experience</li>\n</ul></li>\n</ul>\n\n<h2>Design Patterns</h2>\n\n<h3>#1 Gradual Engagement</h3>\n\n<ul>\n<li>Core value given for free. Eventually you may be asked to sign up.</li>\n</ul>\n\n<h3>#2 Skeleton UI</h3>\n\n<ul>\n<li>ex. Google maps: grid becomes fully rendered map.</li>\n</ul>\n\n<h3>#3 Carry Context</h3>\n\n<ul>\n<li>ex. rdio: music played on laptop is reflected on iPad (or other devices). </li>\n</ul>\n\n<h3>#4 Reuse Core Interactions</h3>\n\n<ul>\n<li>ex. Browsing Pinterest: provides click and follow tangent.</li>\n<li>Micro becomes Macro; core interactions become a symbol of your app.</li>\n<li>&quot;When I go home and think of your app, I think of the experience, the micro features more than the macro ones.&quot;</li>\n</ul>\n\n<h3>#5 Offline Mode</h3>\n\n<ul>\n<li>ex. Google Docs: \u201ctrying connect\u201d message and can\u2019t interact with document. Incredibly Frustrating.</li>\n</ul>\n\n<h2>Tools of the Trade</h2>\n\n<ul>\n<li>A free design pattern library for Ember apps. <a href=\"http://toolsofthetrade.dockyard.com\">Sign up!!</a></li>\n</ul>\n\n<h1>Hijaking Hacker News with Ember.js by Godfrey Chan</h1>\n\n<p><a href=\"https://github.com/chancancode\">@chancancode</a></p>\n\n<ul>\n<li>Being a canadian is awesome</li>\n</ul>\n\n<h2><a href=\"https://github.com/chancancode/hn-reader\">Hijacking Hacker News App</a></h2>\n\n<ul>\n<li>Browser extension that transforms old site design to new, more usable app</li>\n<li>Runs in hacker news domain</li>\n</ul>\n\n<h3>Getting the Data</h3>\n\n<ul>\n<li><code>$.get(&quot;/news&#39;).then()</code>: request html page, extract data, then manipulate</li>\n<li>Hacker News HTML Scrapper: need adapter to help talk to Ember Data store; customize adapter and serializer.</li>\n</ul>\n\n<h3>Fixing the URLs</h3>\n\n<ul>\n<li>Hacker News urls are not ideal for building an Ember app.</li>\n<li>HN urls (serialized App States) to Ember Router (Actual App States)\n\n<ul>\n<li>trick Ember into seeing URLs that are different from what is in the address bar</li>\n</ul></li>\n<li>Router location types: <code>Ember.HistoryLocation</code> vs. <code>Ember.HashLocation</code>\n\n<ul>\n<li>Can use same mechanism to make a custom Ember.Location: <code>App.HackerNewsLocation = Ember.Location.extend()</code></li>\n</ul></li>\n</ul>\n\n<h3>Preferences</h3>\n\n<ul>\n<li>Changing preferences in one place and can see changes reflected in other\n\n<ul>\n<li>Use observer pattern</li>\n</ul></li>\n</ul>\n\n<h3>The Possibilities</h3>\n\n<ul>\n<li>What if your ideas do not line up with the framework&#39;s choices?</li>\n<li>If the frameworks is doing it&#39;s job, than the possibilities should be endless!</li>\n</ul>\n\n<h1>The Art of Ember App Deployment by Luke Melia</h1>\n\n<p><a href=\"https://github.com/lukemelia\">@lukemelia</a></p>\n\n<ul>\n<li>Need to adjust deployment techniques from &quot;server app&quot; days</li>\n<li>When traffic starts routing to the new app, finger-printed assets can no longer be accessed\n\n<ul>\n<li>Need to keep old and new finger printed assets for a few minutes after a deploy.</li>\n</ul></li>\n</ul>\n\n<h2>Versioning</h2>\n\n<ul>\n<li>Learn from native apps - phones run different versions of an app</li>\n<li>Keep API working for older clients through API versioning</li>\n</ul>\n\n<h2>Deployment &amp; serving strategy</h2>\n\n<ul>\n<li>HTML page should be managed and deployed as part of static asset deployment process</li>\n<li>HTML page should be served by the API server</li>\n<li>Preview before activating</li>\n<li>A/B Testing\n\n<ul>\n<li>Setting global flags based on A/B buckets</li>\n<li>Serving up wholly different HTML based on A/B bucket</li>\n</ul></li>\n<li>Notify connected clients</li>\n</ul>\n\n<h2>The New <a href=\"github.com/ember-cli/ember-cli-deploy\"><code>ember-cli-deploy</code></a></h2>\n\n<ul>\n<li>Merged these three projects: <code>ember-deploy</code>, <code>front-end-builds</code>, <code>ember-cli-deploy</code></li>\n<li>Now, one project with 6 maintainers (and growing!)</li>\n</ul>\n\n<h3>Roadmap</h3>\n\n<ul>\n<li>Release 0.4.0 by the end of this week!</li>\n<li>Reelease 0.5.0 \n\n<ul>\n<li>New pipeline hooks and plugins architecture</li>\n<li>Includes post-deploy hook</li>\n<li>Documentation for plugin developers</li>\n<li><code>ember-cli-front-end-builds</code> becomes a plugin</li>\n<li>USAGE: <code>ember deploy staging</code></li>\n</ul></li>\n<li>Beyond 0.5.0: deployment to named buckets, support A/B tests, beta testing, etc.</li>\n</ul>\n\n<h1>Ambitious UX for Ambitious Apps by Lauren Tan</h1>\n\n<p><a href=\"https://github.com/poteto\">@poteto</a></p>\n\n<p>Good Design is:</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n  <td class=\"code\"><pre>* how it works\n* reactive\n* playful\n* informative\n</pre></td>\n</tr></table>\n</div></div>\n<ul>\n<li>Designing the product vs. designing the experience</li>\n<li>You are not the same as your website users</li>\n</ul>\n\n<h2>Good Design is Reactive</h2>\n\n<ul>\n<li>Instant feeback</li>\n<li>Flow of data and maintaining relationships between that data</li>\n<li>Ember allows reactivity through the observer pattern</li>\n</ul>\n\n<h3>The Observer Pattern</h3>\n\n<ul>\n<li>Computed properties transform properties and keep relationships in sync</li>\n<li>Computed Property Macros to keep things DRY.\n\n<ul>\n<li>Ember ships with a bunch of these out of the box (map, mapBy, concat, etc)</li>\n</ul></li>\n<li>Observers synchronously invoked when dependent properties change</li>\n</ul>\n\n<h2>Good design is playful</h2>\n\n<ul>\n<li>Has personality</li>\n<li>Ex. Slack when you open app (fun messages)</li>\n</ul>\n\n<h2>Good Design is Informative</h2>\n\n<ul>\n<li>Visibility of System Status\n\n<ul>\n<li>Jakob Nielson - 10 heuristics for User Interface Design</li>\n</ul></li>\n<li>Ex. Flash messages\n\n<ul>\n<li><a href=\"https://github.com/poteto/ember-cli-flash\"><code>ember-cli-flash</code></a></li>\n</ul></li>\n</ul>\n\n<h2>Good Design is Intuitive</h2>\n\n<ul>\n<li>Drag and drop (trello, Google Calendar, etc...)</li>\n<li>Ember handles drag and drop events out of the box\n\n<ul>\n<li>add <code>draggable=true</code> to any html element to make it draggable</li>\n</ul></li>\n</ul>\n\n<h1>Bring Sanity to Frontend Infastructure with Ember by Sam Selikoff</h1>\n\n<p><a href=\"https://github.com/samselikoff\">@samselikoff</a></p>\n\n<h2>How Ember Can Help Today:</h2>\n\n<ul>\n<li>Ember and Ember CLI helps infastructure by reducing boilerplate</li>\n<li>Similar directory structure and architecture</li>\n<li>Conventions: eliminate trivial differences that hold us back</li>\n<li>Writing add-ons for shareable code. Allows us to build structure.</li>\n<li>Use <code>ember deploy</code> to deploy apps. Auth and backend config work into separate deploy server.</li>\n<li>Testing in Ember using <code>ember test</code>. QUnit provides helpers.</li>\n<li>Identify redundancies and abstractions</li>\n</ul>\n\n<h2>How Ember Can Help Tomorrow:</h2>\n\n<ul>\n<li>Semantic versioning and CLI conventions</li>\n<li>Flexibility</li>\n<li>New standards and best practices\n\n<ul>\n<li>generally, shared solutions/frameworks help identify and discover ways of improving applications</li>\n<li>Ember always keeps up to date with these best practices</li>\n</ul></li>\n<li>\u201cEmber is not just a framework, it\u2019s a philosophy\u201d of how to create and improve software\n\n<ul>\n<li>First, give real developers the tools to tinker</li>\n<li>Then, deliberately fold in shared solutions</li>\n</ul></li>\n</ul>\n\n<p>In summary, innovate &amp; share!</p>\n\n<h1>Dynamic Graphic Composition In Ember by Chris Henn</h1>\n\n<p><a href=\"https://github.com/chnn\">@chnn</a></p>\n\n<h2>Spliting a Statistical Graphic into Parts</h2>\n\n<ul>\n<li>Splitting a problem allows us to change one feature of the graphic at a time</li>\n<li>Suggests the aspects of a plot that are possible to change</li>\n<li>Encourages custom visualizations for every data situation</li>\n<li><p>Demo: <a href=\"https://github.com/chnn/composing-graphics\">Scatterplot example</a></p>\n\n<ul>\n<li><p>Adds multiple regression lines (in example, based on # of cylinders of each car)</p>\n<div class=\"highlight hbs \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre>{{#each subset as |subset|}}\n  // component\n{{/each}}\n</pre></td>\n</tr></table>\n</div></div>\n<ul>\n<li>Each point in the graph is an svg circle</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h3>Grammer of Graphics by Hadley Wickham</h3>\n\n<p>(Book of guidlines to follow)</p>\n\n<ul>\n<li>Data to Aesthetic Mappings</li>\n<li>Scales: one per Asthetic mapping\n\n<ul>\n<li>Each data to aesthetic mapping has some mapping function</li>\n<li>he has chosen to represent these as points in scatterplot example</li>\n</ul></li>\n<li>Layers: geom, stat, optional data to aesthetic mapping</li>\n<li>Coordinate System</li>\n<li>Faceting</li>\n</ul>\n\n<h3>What does this look like using Ember?</h3>\n\n<ul>\n<li>Data to Aesthetics = outer layer component which takes in the data as params</li>\n<li>Scales = computed properties (using computer property macros)</li>\n<li>Layers = looks like top level component, but must pass the scales</li>\n</ul>\n\n<h3>Further Considerations</h3>\n\n<ul>\n<li>Interactivity</li>\n<li>Animations and transitions\n\n<ul>\n<li>performance (updating graphic many times per second)</li>\n</ul></li>\n</ul>\n\n<h1>Test-Driven Development By Example by Toran Billups</h1>\n\n<p><a href=\"https://github.com/toranbn\">@toranb</a></p>\n\n<p>Live coding!!</p>\n\n<ul>\n<li>Red, green, refactor\n\n<ul>\n<li>You get a lot of feedback from red (so it can be red, red, red, green, refactor)</li>\n</ul></li>\n<li>Incorrect selector in template to make sure you\u2019re doing it correctly (aka. test should fail)</li>\n<li>Test should not be very layout dependent\n\n<ul>\n<li>Should be more general and not break whenever you make template changes that do not change app functionality.</li>\n</ul></li>\n<li>Test names should be descriptive</li>\n<li>Testing computed properties is recommended because of how caching works with them. Failing test will let you know which properties should be observed in order to break the cache.</li>\n<li>Design proof testing</li>\n</ul>\n","summary":"Live blog of EmberConf 2015","illustration":null,"illustration_alt":null,"tags":["ember"],"shallow":false,"date":"2015-03-03T00:00:00Z"},{"id":"2015/02/24/rubyists-guide-to-executing-javascript","title":"Rubyist's Guide to Executing JavaScript","dockyarder":"michael-dupuis","body":"<p>JavaScript is introduced to developers as a programming language that runs client-side, in the browser. This is convenient as a jumping off point for aspiring programmers, who can simply open up Chrome\u2019s Web Inspector and start alerting \u201cHello, World!\u201d, but it\u2019s a concept that isn\u2019t easy to unpack. Soon enough, the developer will likely find herself in contact with JavaScript outside of the browser \u2013 Node.js being the most prominent example of this. At this point, the notion of JavaScript being a language for the browser is no longer helpful; it obfuscates what is happening when a developer executes a line of code.</p>\n\n<p>This post is a high level primer on what is happening \u201cunder the hood\u201d with our code. It will lend some insight into what terminology like \u201ctokenizing,\u201d \u201cinterpreting,\u201d \u201ccompiling,\u201d and a host of other terms mean. You&#39;ll gain a better sense of what the concept of a virtual machine encapsulates. And hopefully you&#39;ll leave with a better understanding of what your script is doing before it hits your computer&#39;s processor.</p>\n\n<p>I feel this article will be well-suited for Rubyists who find themselves increasingly working in the realm of JavaScript, as I\u2019ll be comparing how code executes between the two languages.</p>\n\n<p>Rather than explaining how a line of Ruby or JavaScript code gets processed and run, I\u2019d like to work our way backwards, beginning with machine code. When you write a line of Ruby, it doesn\u2019t simply go to the processor when you run the script. It goes through a number of translations before being turned into machine code that the processor can execute. We\u2019ll look at how Ruby gets processed and then touch on how JavaScript differs.</p>\n\n<h1>Ruby</h1>\n\n<p><img src=\"http://i.imgur.com/Sa1qURz.png\" alt=\"Ruby execution diagram\"></p>\n\n<h2>Machine code</h2>\n\n<p>Machine code is binary that is executed directly by your computer\u2019s CPU. The bit patterns correspond directly to the architecture design of the processor.</p>\n\n<p>Before a statement in a scripted language becomes machine code, it gets compiled into machine code by a compiler.</p>\n\n<h2>Virtual Machine</h2>\n\n<p><a href=\"http://www.aosabook.org/en/llvm.html\">LLVM</a> compiles code on most\nUnix-based machines. It generates the machine code for the processor\nduring compilation, which is just the process of translating one language to another.</p>\n\n<p>The virtual machine executes your code. It&#39;s written in C and is known as the <a href=\"http://en.wikipedia.org/wiki/YARV\">YARV</a> interpreter. It is at the heart of a scripting languages &quot;implementation,&quot; as it executes the source code via whatever language the scripting language is built upon (<a href=\"http://en.wikipedia.org/wiki/C_(programming_language)\">C</a> in the case of <a href=\"http://en.wikipedia.org/wiki/Ruby_MRI\">Ruby MRI</a>). </p>\n\n<p>YARV doesn\u2019t receive the Ruby statement as you typed it. It goes through an abstraction of your code known as an <a href=\"http://en.wikipedia.org/wiki/Abstract_syntax_tree\">Abstract Syntax Tree (AST)</a>, which get compiled to YARV byte code and run.</p>\n\n<p>This &quot;tree&quot; is made up of nodes assembled by something called the parser. </p>\n\n<h2>Parser</h2>\n\n<p>You can think of a node on the Abstract Syntax Tree as an atomic representation of a Ruby grammar rule. The reason that Ruby knows to print \u201cHello, World\u201d when it sees <code>print &#39;Hello, World&#39;</code> is because the parser knows that <code>print</code> is a method and the string <code>&#39;Hello, World&#39;</code> is its argument. These syntax rules are located inside of a language\u2019s grammar rule file.</p>\n\n<p>Again, the parser creates the Abstract Syntax Tree that the virtual machine compiles and interprets.</p>\n\n<h2>Tokenizer/Lexer</h2>\n\n<p>If you\u2019re wondering how Ruby knows that <code>print</code> is a separate element in the language from <code>&#39;Hello, World&#39;</code>, then you\u2019re understanding the function of the Lexer or Tokenizer. The Tokenizer scans your line of Ruby code, character-by-character and determines where the &quot;words&quot; of the language begin and end. The Tokenizer can tell the difference between a space separating words and a space separating a method name from its arguments.</p>\n\n<p>And that\u2019s the 10,000 foot lifecycle of a Ruby statement, as it goes from Tokenization to becoming machine code. If you\u2019re looking for the microscopic explanation, I\u2019d recommend <a href=\"http://www.nostarch.com/rum\">Ruby Under a Microscope</a>.</p>\n\n<h1>JavaScript</h1>\n\n<h2>Client-side</h2>\n\n<p>Most browsers implement <a href=\"http://en.wikipedia.org/wiki/Just-in-time_compilation\">Just-In-Time (JIT) compiling</a>. This means that the JavaScript code you write is compiled right before it gets executed by the virtual machine; though, in JavaScript, the interpreter is not referred to as a virtual machine, but as a JavaScript engine.</p>\n\n<p>V8 is the engine that interprets and executes JavaScript in the Chrome browser, Nitro is the engine for Safari, SpiderMonkey for Firefox, and Chakra on Internet Explorer. The efficiency with which a browser interprets JavaScript accounts for a substantial portion of its performance these days, especially as JavaScript-heavy, Single Page Applications become increasingly important.</p>\n\n<h2>Server-side</h2>\n\n<p>Node.js is the predominant framework for running JavaScript server-side. It is built on top of Google\u2019s V8 engine, which is a little confusing if you\u2019ve just read that V8 interprets JavaScript in the browser. In general terms, the JavaScript interpreter is extracted from Chrome, compiled on the server, and utilized by Node.js, allowing you to execute JavaScript outside of the browser.</p>\n\n<h1>Conclusion</h1>\n\n<p>Upon researching how a line of Ruby or JavaScript gets executed, you&#39;ll quickly find that you can go down a rabbit hole. There are so many different implementations of Ruby, so many advancements in how code gets processed, and so much ambiguity in the terminology we use, that it can be quite challenging to form a mental model of what&#39;s going on under the hood. That being said, a little patience goes a long way, and if you&#39;re looking to dive into any one of the topics described above, I think you&#39;ll be surprised at how readable much of the technical documentation is out there.</p>\n","summary":"A high-level look at how your Ruby and JavaScript code gets executed.","illustration":null,"illustration_alt":null,"tags":["ruby","javascript"],"shallow":false,"date":"2015-02-24T00:00:00Z"},{"id":"2015/02/12/automating-reefpoints","title":"Automating Reefpoints","dockyarder":"dan-mcclain","body":"<p>We have a healthy mix of developers and designers, plus a project manager and\noffice manager. This results in a group of people with varying degress of command line expertise.\nTo make it easier to write blog posts, <a href=\"https://github.com/dockyard/reefpoints#the-github-web-interface-way\">I added instructions to create a blog\npost using only GitHub</a>.</p>\n\n<p>This made it super easy for anyone to create a new blog post, have people\nreview it, but one piece was missing: making it easy for people to publish\ntheir article once it was reviewed. Well, I solved that problem today with\n<a href=\"http://travis-ci.org\">Travis-CI</a> and a little bit of bash script.</p>\n\n<p>The first step required was to script the publishing of our blog. We already\nuse <a href=\"https://github.com/neo/middleman-gh-pages\"><code>middleman-gh-pages</code></a>, which makes publishing as easy as <code>rake publish</code>.\nI created the following <a href=\"https://github.com/dockyard/reefpoints/blob/master/travis_deploy.sh\"><code>travis_deploy.sh</code></a> script:</p>\n<div class=\"highlight sh \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n</pre></td>\n  <td class=\"code\"><pre>#!/usr/bin/env bash\n\nset -e\n\ngit config --global user.email &quot;socko@dockyard.com&quot;\ngit config --global user.name &quot;sockothesock&quot;\n\n\n# This specifies the user who is associated to the GH_TOKEN\nUSER=&quot;sockothesock&quot;\n\n# sending output to /dev/null to prevent GH_TOKEN leak on error\ngit remote rm origin\ngit remote add origin https://${USER}:${GHTOKEN}@github.com/dockyard/reefpoints.git &amp;&gt; /dev/null\n\nbundle exec rake publish\n\necho -e &quot;Done\\n&quot;\n</pre></td>\n</tr></table>\n</div></div>\n<p><code>middleman-gh-pages</code> is smart in that it figures out your GitHub remote based\non the origin, so what we did is update the origin to use a GitHUb OAuth token\nthat allows writing to public repos. We store the OAuth token in the\nenvironment variable <code>GHTOKEN</code>, which we encrypt in our <a href=\"https://github.com/dockyard/reefpoints/blob/master/.travis.yml\"><code>travis.yml</code></a>:</p>\n<div class=\"highlight yml \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n</pre></td>\n  <td class=\"code\"><pre><span class=\"key\">language</span>: <span class=\"string\"><span class=\"content\">ruby</span></span>\n<span class=\"key\">sudo</span>: <span class=\"string\"><span class=\"content\">false</span></span>\n<span class=\"key\">cache</span>: <span class=\"string\"><span class=\"content\">bundler</span></span>\n<span class=\"key\">rvm</span>:\n- <span class=\"string\"><span class=\"content\">2.0.0</span></span>\n<span class=\"key\">branches</span>:\n  <span class=\"key\">only</span>:\n  - <span class=\"string\"><span class=\"content\">master</span></span>\n<span class=\"key\">script</span>: <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">./travis_deploy.sh &amp;&gt; /dev/null</span><span class=\"delimiter\">&quot;</span></span>\n<span class=\"key\">env</span>:\n  <span class=\"key\">secure</span>: <span class=\"string\"><span class=\"content\">eAyjmkDKLbXnGvC75KRNVLoAr6WE7ldT6JGOzOKOfQ9WxhEFgzAXoKZVO4mX4DfDfJbZbCyFmxKqALXGXjaBKwU2eQKeq1g4svBnxGPHmOKFMfVjkSCFag0bppE2JK9VXn70lVYFh8kJHavHgQ2pRYlSb78WfmUKbbB9PSH/rSE=</span></span>\n<span class=\"key\">notifications</span>:\n  <span class=\"key\">slack</span>:\n    <span class=\"key\">secure</span>: <span class=\"string\"><span class=\"content\">o2ksyDNq6Ea2oHUbUpgICYHAUdZ0QgHSQNqgn/gginNyPYAd2MtS2h7iXVrzSgeXDSNi6WpAvAeOcUnzpA6h6oBkl0YvUTaXJs50IepWfAE4UZPwX9ZFfV8YiwnOCU9ByUTU2L9qeq83W3LuDYY7j6xZJjP5KMLC78TqTKy5pd8=</span></span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>I also added a Slack notification so that people can see when new blog posts\nget published. The last thing I did was go into the Travis-CI setting and\nturned off the option to build Pull Requests, as that would publish articles\nbefore they were merged.  I accidentally leaked the OAuth Token in the Travis\nlogs (that&#39;s why the <code>script</code> step is redirecting output to <code>/dev/null</code>).</p>\n\n<p>In the end, it was really simple to automate the publication of our blog. It\nhas the added bonus of publishing corrections to the blog when anyone&#39;s pull\nrequest is merged.</p>\n","summary":"We used Travis-CI to automatically publish this blog","illustration":null,"illustration_alt":null,"tags":["automation"],"shallow":false,"date":"2015-02-12T00:00:00Z"},{"id":"2015/02/11/managing-the-conversation","title":"Manage the conversation","dockyarder":"maria-matveeva","body":"<p>One of my core UX design skills is finding information through user testing and interviews. What we gather will help us decide what to build, and how. This makes our ability to source qualitative information very important to the success of a product.</p>\n\n<p>A user interview is, at its essence, a closely managed conversation. It is my responsibility, as the designer, to manage it. The level of control required of the UX designer in this situation is unfamiliar, and can be stressful in the beginning. I think the reason for this initial discomfort is that we have little context for this managed type of conversation in our everyday life. We\u2019re used to conversations in which both parties share control over the direction and tone. Owning the conversation completely can feel rough and undemocratic. It takes skill and experience to do it while making the other party feel at ease.</p>\n\n<p>I want to share what I learned while conducting interviews and user tests at DockYard. I hope this will take some of the edge off the initial difficulty for others also learning this skill, and make it a more pleasant and productive time for all.</p>\n\n<h2>Lessons learned</h2>\n\n<h3>1. Prepare well</h3>\n\n<p>There is a lot of prep work involved, before the conversations can even start. Taking the time to do these steps properly allows me to get the most out of the time I spend with the interviewee.</p>\n\n<ul>\n<li>Schedule the interviews. You may need to find suitable users yourself. Or, the client may help by putting you in touch with some preselected users to interview. Try not to schedule interviews back-to-back in case one takes a bit longer than expected.</li>\n<li>Arrange for the legal details. This could include notifying the interviewee of privacy arrangements, having them sign an NDA, or otherwise vetting the situation. Basically, you want to protect yourself, the person you\u2019re interviewing, and the client by specifying how information is going to be used.</li>\n<li>Draft a sequence of questions that cover your desired information.</li>\n<li>Edit until questions sound polished and neutral (more on this to follow, in a separate post)</li>\n<li>Prepare a notebook, pen and a laptop.</li>\n<li>Print the questions so I can write notes in context and check off completed ones.</li>\n<li>Prepare backups and extra copies of any materials I\u2019m planning to use.</li>\n<li>Grab water and a snack! You don\u2019t want to take focus away from the interview by being too thirsty or hungry.</li>\n<li>If needed, also grab a timer and a sound recorder (your needs may vary)</li>\n<li>Triple-check the list of interviewees and their basic information. For example, phone interviews can happen over different time zones. It\u2019s nice to verify you&#39;re not calling the person who kindly offered up their time at 6am.</li>\n</ul>\n\n<h3>2. Establish context</h3>\n\n<p>Your interviewee should theoretically know who you are and what you\u2019re talking about. After all, they agreed to the interview. However, it is always a good idea to confirm your assumptions. A brief introduction won\u2019t hurt. For example, you could start with <em>\u201cHi ____, thank you for taking time to do this! My name is ____, and my company was hired by ____ to improve their product. How familiar are you with the product?\u201d</em></p>\n\n<h3>3. Direct the conversation</h3>\n\n<p>For a UX designer starting out, it may seem rude to redirect the conversation. Especially so if your interviewee is describing, with passion and detail, a subject they are an expert in. But don&#39;t be afraid to redirect the conversation. You need to get to the specific questions you want answered (but of course be nice about it!). For example, to get back on track, you might say <em>\u201cGreat - this extra information is very helpful, but I\u2019d like to get back to the original reason you started using ____?\u201d</em>  This acknowledges the value of their insight, then nudges them to answer your original question.</p>\n\n<h3>4. Go with the flow</h3>\n\n<p>At the start of the interview, there is a prepared, logical sequence of questions to ask. But in a conversation, one thing may lead naturally to another. If it makes sense to ask things out of order, it\u2019s totally acceptable to do so. This is where a printed list of questions helps. Check them off as you go to make sure none remain unanswered.</p>\n\n<h3>5. Use teamwork</h3>\n\n<p>It is definitely easier to have a team of two handling the interview. This way, one person asks questions while the other focuses on capturing notes. Some notes may be of things like body language, expression, and movement - all important indicators of how a user may feel about the questions in addition to what they actually say. An experienced interviewer could probably handle both tasks with grace. As a beginner, it&#39;s almost impossible. Try to do both at once, and you&#39;ll either get awkward pauses as you write notes, or you&#39;ll fail to record some of the valuable details.</p>\n\n<h3>6. Don\u2019t be afraid to clarify</h3>\n\n<p>Some interviews happen over the phone. The challenge here is that we lose most of the added information of body language and facial expression. This could be remedied with extra questions. For example, if I think the interviewee is referring to their laptop to answer something, I would literally ask that: <em>\u201cI\u2019m guessing you\u2019re looking at the laptop screen for reference - is that correct?\u201d</em>  It is also important to be  attentive to the tone of voice so you can hear emotion, like hesitation.</p>\n\n<p>Another possible challenge in phone interviews is sound quality. Users may be on a shaky cell phone connection, or calling us via Skype. This can make their (and potentially your own) voice difficult to understand. It is tempting to dismiss the poor quality of sound and just omit details you can\u2019t quite hear. Make sure to always ask the interviewee to repeat or speak louder if you do not understand what\u2019s being said.</p>\n\n<h2>In conclusion</h2>\n\n<p>Conducting interviews caused me to cringe quite a few times. Am I doing it right? What does the interviewee think of me? Do I sound professional? Looking back, I can see how I and my colleagues got over our fears, and made significant improvements with just a few rounds of practice.</p>\n\n<p>Remember, both you and the interviewee are there because you want to improve some aspect of people\u2019s lives through your work and their experience. You\u2019re on the same side, and you share this interest in the thing you\u2019re discussing. Make the most of this interviewing situation, and you will see improved results each time.</p>\n","summary":"Learning to conduct user tests and interviews","illustration":null,"illustration_alt":null,"tags":["ux-design","research","discovery"],"shallow":false,"date":"2015-02-11T00:00:00Z"},{"id":"2015/02/06/ember-qunit-0-2","title":"Ember QUnit 0.2.x","dockyarder":"robert-jackson","body":"<p><a href=\"https://github.com/rwjblue/ember-qunit\">Ember QUnit</a> 0.2.x has been released. It brings a whole bunch of bug fixes and some much needed cleanup, but there are a couple breaking changes also.</p>\n\n<h3>History of the changes</h3>\n\n<p>Ember QUnit started as a self contained library to make unit testing of Ember applications significantly easier. Ember QUnit proved that unit testing an Ember application could be very simple, and users of other testing frameworks wanted to join in the unit testing fun.  Unfortunately, the early code was fairly coupled to <a href=\"http://qunitjs.com\">QUnit</a> (the testing framework being used) so reusing the Ember unit testing helpers separate from QUnit was not possible.</p>\n\n<p>Ember QUnit 0.2.x is a complete organizational refactor to remove the Ember unit testing helpers (into the appropriately named <a href=\"https://github.com/switchfly/ember-test-helpers\">ember-test-helpers</a>) and keep the QUnit specific parts in Ember QUnit. The majority of this refactoring effort was done by <a href=\"https://twitter.com/dgeb\">Dan Gebhardt</a> and sponsored by the good folks at <a href=\"http://www.switchfly.com\">SwitchFly</a> (you can read their write-up of the work <a href=\"http://blog.switchfly.com/2014/11/Refactoring-Ember-Testing-for-Mocha\">here</a>). Out of this effort we have been able to create <a href=\"https://github.com/switchfly/ember-mocha\">Ember Mocha</a> which now has feature parity with Ember QUnit and is a truly first class Ember unit testing solution. Due to the usage of a general purpose underlying ember-test-helpers library, it should now be possible to create a nice wrapper around nearly any JS testing framework.</p>\n\n<h3>Notable Changes</h3>\n\n<h4>setup and teardown Deprecation</h4>\n\n<p><code>setup</code> and <code>teardown</code> are deprecated in favor of <code>beforeEach</code> / <code>afterEach</code>. This update was made to allow closer conformance to <a href=\"http://qunitjs.com/upgrade-guide-2.x/\">QUnit 2.x</a> concepts.</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\">// Refactor from (under 0.1.x):</span>\n<span class=\"reserved\">import</span> { test, moduleForComponent } from <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">ember-qunit</span><span class=\"delimiter\">'</span></span>;\n\nmoduleForComponent(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">awesome-sauce</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">AwesomeSauceComponent</span><span class=\"delimiter\">'</span></span>, {\n  <span class=\"function\">setup</span>: <span class=\"keyword\">function</span>() { },\n\n  <span class=\"function\">teardown</span>: <span class=\"keyword\">function</span>() { }\n});\n\n<span class=\"comment\">// To (under 0.2.x):</span>\n<span class=\"reserved\">import</span> { test, moduleForComponent } from <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">ember-qunit</span><span class=\"delimiter\">'</span></span>;\n\nmoduleForComponent(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">awesome-sauce</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">AwesomeSauceComponent</span><span class=\"delimiter\">'</span></span>, {\n  <span class=\"function\">beforeEach</span>: <span class=\"keyword\">function</span>() { },\n\n  <span class=\"function\">afterEach</span>: <span class=\"keyword\">function</span>() { }\n});\n</pre></td>\n</tr></table>\n</div></div>\n<h4>Global Assertion Deprecation</h4>\n\n<p>Usage of global assertions are deprecated and should be replaced with the <code>Assert</code> argument to your test callbacks. This update was made to allow closer conformance to <a href=\"http://qunitjs.com/upgrade-guide-2.x/\">QUnit 2.x</a> concepts.</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\">// Refactor from (under 0.1.x):</span>\n<span class=\"reserved\">import</span> { test, moduleForComponent } from <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">ember-qunit</span><span class=\"delimiter\">'</span></span>;\n\nmoduleForComponent(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">awesome-sauce</span><span class=\"delimiter\">'</span></span>);\n\ntest(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">implements awesomeness</span><span class=\"delimiter\">'</span></span>, <span class=\"keyword\">function</span>() {\n  equal(....);\n  ok(....);\n});\n\n<span class=\"comment\">// To (under 0.2.x):</span>\n<span class=\"reserved\">import</span> { test, moduleForComponent } from <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">ember-qunit</span><span class=\"delimiter\">'</span></span>;\n\nmoduleForComponent(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">awesome-sauce</span><span class=\"delimiter\">'</span></span>);\n\ntest(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">implements awesomeness</span><span class=\"delimiter\">'</span></span>, <span class=\"keyword\">function</span>(assert) {\n  assert.equal(....);\n  assert.ok(....);\n});\n</pre></td>\n</tr></table>\n</div></div>\n<h4>Arguments to setup / teardown / beforeEach / afterEach</h4>\n\n<p>In prior versions of Ember QUnit, the <code>setup</code> and <code>teardown</code> hooks were called with a single argument: the container. In Ember QUnit 0.2 this argument is no longer present.</p>\n\n<p>Note: usage of <code>setup</code> and <code>teardown</code> are deprecated, you should use <code>beforeEach</code> and <code>afterEach</code>.</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n22\n23\n24\n25\n26\n27\n28\n29\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\">// Refactor from (under 0.1.x):</span>\n<span class=\"reserved\">import</span> { test, moduleForComponent } from <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">ember-qunit</span><span class=\"delimiter\">'</span></span>;\n\nmoduleForComponent(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">awesome-sauce</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">AwesomeSauceComponent</span><span class=\"delimiter\">'</span></span>, {\n  <span class=\"function\">setup</span>: <span class=\"keyword\">function</span>(container) {\n    <span class=\"comment\">/* do stuff */</span>\n  },\n\n  <span class=\"function\">teardown</span>: <span class=\"keyword\">function</span>(container) {\n    <span class=\"comment\">/* do stuff */</span>\n  }\n});\n\n<span class=\"comment\">// To (under 0.2.x):</span>\n<span class=\"reserved\">import</span> { test, moduleForComponent } from <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">ember-qunit</span><span class=\"delimiter\">'</span></span>;\n\nmoduleForComponent(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">awesome-sauce</span><span class=\"delimiter\">'</span></span>, {\n  <span class=\"function\">beforeEach</span>: <span class=\"keyword\">function</span>() {\n    <span class=\"keyword\">var</span> container = <span class=\"local-variable\">this</span>.container;\n\n    <span class=\"comment\">/* do stuff */</span>\n  },\n\n  <span class=\"function\">afterEach</span>: <span class=\"keyword\">function</span>() {\n    <span class=\"keyword\">var</span> container = <span class=\"local-variable\">this</span>.container;\n\n    <span class=\"comment\">/* do stuff */</span>\n  }\n});\n</pre></td>\n</tr></table>\n</div></div>\n<h4>Deprecated this.append in Component tests</h4>\n\n<p>In a component test you would previously call <code>this.append()</code> to append your component into the DOM.  This was somewhat confusing, and took some explaining when teaching to newcomers, so it has been replaced with <code>this.render()</code> which fits much better in our Ember mindset.</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n22\n23\n24\n25\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\">// Refactor from (under 0.1.x):</span>\n<span class=\"reserved\">import</span> { test, moduleForComponent } from <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">ember-qunit</span><span class=\"delimiter\">'</span></span>;\n\nmoduleForComponent(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">awesome-sauce</span><span class=\"delimiter\">'</span></span>);\n\ntest(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">implements awesomeness</span><span class=\"delimiter\">'</span></span>, <span class=\"keyword\">function</span>() {\n  <span class=\"keyword\">var</span> component = <span class=\"local-variable\">this</span>.subject();\n\n  <span class=\"local-variable\">this</span>.append();\n\n  equal(component.<span class=\"predefined\">$</span>().text(), <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">WHOAA!! AWESOME!!!</span><span class=\"delimiter\">'</span></span>);\n});\n\n<span class=\"comment\">// To (under 0.2.x):</span>\n<span class=\"reserved\">import</span> { test, moduleForComponent } from <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">ember-qunit</span><span class=\"delimiter\">'</span></span>;\n\nmoduleForComponent(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">awesome-sauce</span><span class=\"delimiter\">'</span></span>);\n\ntest(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">implements awesomeness</span><span class=\"delimiter\">'</span></span>, <span class=\"keyword\">function</span>(assert) {\n  <span class=\"keyword\">var</span> component = <span class=\"local-variable\">this</span>.subject();\n\n  <span class=\"local-variable\">this</span>.render();\n\n  assert.equal(component.<span class=\"predefined\">$</span>().text(), <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">WHOAA!! AWESOME!!!</span><span class=\"delimiter\">'</span></span>);\n});\n</pre></td>\n</tr></table>\n</div></div>\n<h4>Ordering of afterEach / teardown Callback</h4>\n\n<p>In Ember QUnit 0.1.x, the <code>teardown</code> callback was called <em>after</em> all internal cleanup was finished (like clearing the container, removing any views from the DOM, etc).  In Ember QUnit 0.2.x <code>afterEach</code> / <code>teardown</code> is called before the internal hooks.</p>\n\n<h4>Build Changes</h4>\n\n<p>There are a few build related changes with Ember QUnit 0.2.x:</p>\n\n<ul>\n<li>Build output is removed from the main repo, and now is maintained at <a href=\"https://github.com/rwjblue/ember-qunit-builds\">ember-qunit-builds</a>.</li>\n<li>The output file locations are no longer nested in <code>dist/</code>.</li>\n<li>CJS and AMD output is no longer generated.</li>\n</ul>\n\n<h4><a href=\"https://github.com/ember-cli/ember-cli-qunit\">ember-cli-qunit</a> Version</h4>\n\n<p>If you are using Ember CLI, you should update to <a href=\"https://github.com/ember-cli/ember-cli-qunit\">ember-cli-qunit</a> version 0.3.7.</p>\n\n<h3>Summary</h3>\n\n<p>Please file issues <a href=\"https://github.com/rwjblue/ember-qunit/issues\">ember-qunit issues</a> if you come across anything that isn&#39;t listed here.</p>\n","summary":null,"illustration":null,"illustration_alt":null,"tags":["ember-cli","testing","ember"],"shallow":false,"date":"2015-02-06T00:00:00Z"},{"id":"2015/02/04/vim-jump-jump-jump","title":"Vim: Jump, Jump, Jump!","dockyarder":"doug-yun","body":"<h1><a href=\"https://www.youtube.com/watch?v=010KyIQjkTk\" target=\"_blank\">Jump, Jump, Jump!</a></h1>\n\n<p>In the last Vim-related post, we\n<a href=\"http://reefpoints.dockyard.com/2014/04/10/vim-on-your-mark.html\">discussed <strong>mark</strong> motion</a>,\nand today, we&#39;re going to cover another type of navigation: <strong>jump</strong> motion.</p>\n\n<p>The main benefit of jump motion is its speed; it allows us to quickly traverse through the current file\nopen or previously visited files.</p>\n\n<p>Let&#39;s briefly cover some of the most familiar ones.</p>\n\n<h2>File Jumps</h2>\n\n<p><em>File jumps</em> will navigate you to a location within the current file, regardless if that\nlocation is seen or not seen within the window.</p>\n\n<h3><a href=\"https://www.youtube.com/watch?v=Xz-UvQYAmbg\" target=\"_blank\">Ain&#39;t no Mountain high enough, ain&#39;t no valley low enough...</a></h3>\n\n<p><strong>gg</strong></p>\n\n<ul>\n<li>Will take you to the <em>top</em> of the file.</li>\n</ul>\n\n<p><strong>G</strong></p>\n\n<ul>\n<li>Will take you to the <em>bottom</em> of the file.</li>\n</ul>\n\n<h3>Sentences and Paragraphs</h3>\n\n<p><strong>(</strong></p>\n\n<ul>\n<li>Move a <em>sentence backwards</em>, can take a prefix argument.\n\n<ul>\n<li><strong>5(</strong> - Navigates you 5 sentences backwards.</li>\n</ul></li>\n</ul>\n\n<p><strong>)</strong></p>\n\n<p>e Move a <em>sentence forward</em>, can take a prefix argument.\n  * <strong>10)</strong> - Navigates you 10 sentences forwards.</p>\n\n<p><strong>{</strong></p>\n\n<ul>\n<li>Move a <em>paragraph backward</em>, can take a prefix argument.\n\n<ul>\n<li><strong>5{</strong> - Navigates you 5 paragraphs backwards.</li>\n</ul></li>\n</ul>\n\n<p><strong>}</strong></p>\n\n<ul>\n<li>Move a <em>paragraph forward</em>, can take a prefix argument.\n\n<ul>\n<li><strong>5}</strong> - Navigates you 5 paragraphs forwards.</li>\n</ul></li>\n</ul>\n\n<h3><a href=\"https://www.youtube.com/watch?v=EDNzQ3CXspU\" target=\"_blank\">Search and Destroy</a></h3>\n\n<p><strong>/</strong></p>\n\n<ul>\n<li>Allows you to search <em>forwards</em> for a desired pattern within the file.\n\n<ul>\n<li><strong>/fishsticks</strong> - Searches for all occurences of <code>fishsticks</code> ahead of your current cursor.</li>\n</ul></li>\n</ul>\n\n<p><strong>?</strong></p>\n\n<ul>\n<li>Allows you to search <em>backwards</em> for a desired pattern within the file.\n\n<ul>\n<li><strong>?catdog</strong> - Searches for all occurences of <code>catdog</code> behind your current cursor.</li>\n</ul></li>\n</ul>\n\n<p><strong>n</strong></p>\n\n<ul>\n<li>Repeats the last <strong>/</strong> or <strong>?</strong> search.</li>\n</ul>\n\n<p><strong>N</strong></p>\n\n<ul>\n<li>Repeats the last <strong>/</strong> or <strong>?</strong> search in the <em>opposite</em> direction.</li>\n</ul>\n\n<h2>Window Jumps</h2>\n\n<p><em>Window</em> jumps allow you to move within the current scope of the window or viewport.</p>\n\n<h3><a href=\"https://www.youtube.com/watch?v=JECF2EB3LXU\" target=\"_blank\">High, Middle, and Low</a></h3>\n\n<p><strong>H</strong></p>\n\n<ul>\n<li>Jumps your cursor to the <strong>highest</strong> line of the window.</li>\n</ul>\n\n<p><strong>M</strong></p>\n\n<ul>\n<li>Jumps your cursor to the <strong>middle</strong> line of the window.</li>\n</ul>\n\n<p><strong>L</strong></p>\n\n<ul>\n<li>Jumps your cursor to the <strong>lowest</strong> line of the window.</li>\n</ul>\n\n<h2>System Wide Jumps</h2>\n\n<p><em>System</em> jumps are special; they have the ability to take us to any previously visited file,\nregardless if those files are or are not within the same directory.</p>\n\n<p>This is where jump motion really shines!</p>\n\n<h3><a href=\"https://www.youtube.com/watch?v=KZaz7OqyTHQ\" target=\"_blank\">Jump Around</a></h3>\n\n<p>Give these next commands a try:</p>\n\n<p><strong>CTRL-O</strong></p>\n\n<ul>\n<li>Jump to our previous position.</li>\n</ul>\n\n<p><strong>CTRL-I</strong></p>\n\n<ul>\n<li>Jump to our next postion.</li>\n</ul>\n\n<p>By pressing these commands repeatedly, you&#39;ll see that you are traversing through\nyour recently visited files.</p>\n\n<h3>Jump list</h3>\n\n<p>Our recent jumps are stored on our <em>jump</em> list. We can view all the jumps through Vim&#39;s\ncommand-line mode. There are three ways to open up the jump list.</p>\n\n<p><strong>:jumps</strong></p>\n\n<p><strong>:jump</strong></p>\n\n<p><strong>:ju</strong></p>\n\n<ul>\n<li>Opens up the jump list</li>\n</ul>\n\n<p><img src=\"https://i.imgur.com/mFc1cHz.png\" alt=\"\"></p>\n\n<p>Above is an example of a jump list. There are four columns: <em>jump</em>, <em>line</em>, <em>col</em> and <em>file/text</em>.\nThe numbers underneath the <em>jump</em> column are used to prefix our jump command, <strong>CTRL-O</strong> and <strong>CTRL-I</strong>.\nWe are also given the position of our cursor from the  <em>line</em> and <em>col</em>umn columns. Lastly, the\n<em>file/text</em> column, gives us either the file path or, if the jump is located in our currently opened file,\nthe line of text.</p>\n\n<p>Using our example jump list, if we want to jump to the <code>4</code>th jump, located within <code>~/dir2/file.md</code>, we&#39;d\nprefix our previous jump command with the number <strong>4</strong>, i.e. <strong>4CTRL-O</strong>.</p>\n\n<p>Next if we want to get back to our previous position, the line\n<code>This is another sentence!</code> we can cycle back to it with a couple of <strong>CTRL-I</strong>s. Cool!</p>\n\n<p>I find that <em>jump</em> motion complements <em>mark</em> motion really well. By setting multiple marks in the current file,\nand flying to different files with jumps, my workflow has greatly improved.</p>\n\n<p>Hope you give <em>jump</em> motion a try!</p>\n","summary":"Kris Kross' favorite Vim feature","illustration":null,"illustration_alt":null,"tags":["vim","workflow"],"shallow":false,"date":"2015-02-04T00:00:00Z"},{"id":"2015/02/02/debugging-a-broccoli-tree","title":"Debugging a Broccoli Tree","dockyarder":"robert-jackson","body":"<p><a href=\"https://github.com/broccolijs/broccoli\">Broccoli</a> is a great tool for building up assets gradually through a list of changing steps. Unfortunately, when things go wrong in one of your steps it is often very difficult to figure out what is happening at each stage.</p>\n\n<p>Here is where <a href=\"https://github.com/stefanpenner/broccoli-stew\">broccoli-stew</a> comes in, it is a Broccoli utility library that contains a number of super useful plugins with a <a href=\"https://en.wikipedia.org/wiki/POSIX\">posix</a> flair to them. Tools like <code>mv</code>, <code>rename</code>, <code>find</code>, <code>map</code>, <code>rm</code>, <code>log</code>, and <code>debug</code> make it much easier to reason about your Broccoli build.</p>\n\n<p>And thanks to the <code>debug</code> and <code>log</code> plugins it has become <strong>massively</strong> easier to log the contents of each tree, or get an extra copy to poke at manually.</p>\n\n<h3>Initial Brocfile.js</h3>\n\n<p>Lets assume you have the following <code>Brocfile.js</code>:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\">// Brocfile.js</span>\n<span class=\"keyword\">var</span> Funnel = require(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">broccoli-funnel</span><span class=\"delimiter\">'</span></span>);\n<span class=\"keyword\">var</span> ES2015 = require(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">broccoli-es6modules</span><span class=\"delimiter\">'</span></span>);\n<span class=\"keyword\">var</span> log = require(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">broccoli-stew</span><span class=\"delimiter\">'</span></span>).log;\n\n<span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Funnel(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">app</span><span class=\"delimiter\">'</span></span>, {\n  <span class=\"key\">destDir</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">my-app-name</span><span class=\"delimiter\">'</span></span>,\n});\n\n<span class=\"keyword\">var</span> transpiledTree = <span class=\"keyword\">new</span> ES2015(app);\n\nmodule.exports = transpiledTree;\n</pre></td>\n</tr></table>\n</div></div>\n<p>The goal of the Brocfile.js listed above is:</p>\n\n<ol>\n<li>Grab all files in <code>app/</code> and its subdirectories</li>\n<li>&quot;move&quot; those files to <code>my-app-name/</code></li>\n<li>transpile those files from <a href=\"http://webreflection.blogspot.co.uk/2015/01/javascript-and-living-ecmascript.html\">ES2015</a>.</li>\n</ol>\n\n<p>So far this seems pretty easy, but what if your resulting output didn&#39;t contain the files you expected?  How would you track that down?</p>\n\n<h3>Log Tree</h3>\n\n<p>You can log the files in a tree using <code>broccoli-stew</code>&#39;s <code>log</code>:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\">// Brocfile.js</span>\n<span class=\"keyword\">var</span> Funnel = require(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">broccoli-funnel</span><span class=\"delimiter\">'</span></span>);\n<span class=\"keyword\">var</span> ES2015 = require(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">broccoli-es6modules</span><span class=\"delimiter\">'</span></span>);\n<span class=\"keyword\">var</span> log = require(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">broccoli-stew</span><span class=\"delimiter\">'</span></span>).log;\n\n<span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Funnel(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">app</span><span class=\"delimiter\">'</span></span>, {\n  <span class=\"key\">destDir</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">my-app-name</span><span class=\"delimiter\">'</span></span>\n});\n\n<span class=\"keyword\">var</span> loggedApp = log(app, { <span class=\"key\">output</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">tree</span><span class=\"delimiter\">'</span></span>, <span class=\"key\">label</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">my-app-name tree</span><span class=\"delimiter\">'</span></span> });\n\n<span class=\"keyword\">var</span> transpiledTree = <span class=\"keyword\">new</span> ES2015(loggedApp);\n\nmodule.exports = transpiledTree;\n</pre></td>\n</tr></table>\n</div></div>\n<p>Using <code>log</code> like this will list out the files that are present just after the <code>Funnel</code> step.  It might output something like the following:</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n  <td class=\"code\"><pre>my-app-name tree\n\u2514\u2500\u2500 my-app-name/\n   \u251c\u2500\u2500 my-app-name/cat.js\n   \u2514\u2500\u2500 my-app-name/dog.js\n</pre></td>\n</tr></table>\n</div></div>\n<p>This is super helpful to see that the right files are selected, but what if you are seeing the right files but the contents were not right?</p>\n\n<h3>Debug Tree</h3>\n\n<p>Using <code>broccoli-stew</code>&#39;s <code>debug</code> you can have a duplicate copy of the tree generated into the root of the project so you can inspect it later (it will not get cleaned up at the end of the build like the temp folders do).</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\">// Brocfile.js</span>\n<span class=\"keyword\">var</span> Funnel = require(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">broccoli-funnel</span><span class=\"delimiter\">'</span></span>);\n<span class=\"keyword\">var</span> ES2015 = require(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">broccoli-es6modules</span><span class=\"delimiter\">'</span></span>);\n<span class=\"keyword\">var</span> debug = require(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">broccoli-stew</span><span class=\"delimiter\">'</span></span>).debug;\n\n<span class=\"keyword\">var</span> app = <span class=\"keyword\">new</span> Funnel(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">app</span><span class=\"delimiter\">'</span></span>, {\n  <span class=\"key\">destDir</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">my-app-name</span><span class=\"delimiter\">'</span></span>\n});\n\n<span class=\"keyword\">var</span> debugApp = debug(app, { <span class=\"key\">name</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">my-app-name</span><span class=\"delimiter\">'</span></span> });\n\n<span class=\"keyword\">var</span> transpiledTree = <span class=\"keyword\">new</span> ES2015(debugApp);\n\nmodule.exports = transpiledTree;\n</pre></td>\n</tr></table>\n</div></div>\n<p>The <code>debug</code> plugin as used above will create a folder on disk at <code>DEBUG-my-app-name</code> in the root of your project with the full contents of the <code>app</code> tree when it was called. You can review this folder&#39;s contents at your leisure without worrying about the Broccoli server calling cleanup and deleting the directory.</p>\n\n<h3>Conclusion</h3>\n\n<p>Using <code>broccoli-stew</code> to debug a Broccoli pipeline is absolutely awesome, and makes getting a project using Broccoli much easier.  Thanks to <a href=\"https://twitter.com/stefanpenner\">@stefanpenner</a> and <a href=\"https://twitter.com/chadhietala\">@chadhietala</a> for pushing things forward!</p>\n\n<p>If you&#39;d like to checkout and play with the <code>Brocfile.js</code> above, you can do the normal <code>git clone</code> and <code>npm install</code> song and dance with <a href=\"https://github.com/rwjblue/debugging-broccoli\">https://github.com/rwjblue/debugging-broccoli</a>.</p>\n","summary":null,"illustration":null,"illustration_alt":null,"tags":["broccoli"],"shallow":false,"date":"2015-02-02T00:00:00Z"},{"id":"2015/01/30/why-i-am-disappointed-in-react-native","title":"Why I'm disappointed in React Native","dockyarder":"brian-cardarella","body":"<p>This week at React.js Conf 2015 React Native was introduced. You can see\nthe two most important videos here:</p>\n\n<iframe width=\"560\" height=\"315\"\nsrc=\"https://www.youtube.com/embed/KVZ-P-ZI6W4\" frameborder=\"0\"\nallowfullscreen></iframe>\n\n<iframe width=\"560\" height=\"315\"\nsrc=\"https://www.youtube.com/embed/7rDsRXj9-cU\" frameborder=\"0\"\nallowfullscreen></iframe>\n\n<p>The TLDR is that Facebook has developed a view layer for React that can\nbe used within native mobile apps. Within this context React&#39;s templates\ncan call native components (and views) as if you were referring to normal\nHTML elements. Furthermore a JavaScript layer has been introduced to the\nnative layer that runs the React applications, this means that you can\ndebug your React Native applications in Chrome Web Tools while it runs\non an iOS device.</p>\n\n<p>This is <em>amazing</em> technology and I don&#39;t think anyone was expecting\nthis. As an Ember developer I&#39;m jealous. After some reflection I\nrealized I was also incredibly disappointed in Facebook for heading in\nthis direction.</p>\n\n<h3>We are (supposed to be) all in this together</h3>\n\n<p>The web development Holy Grail right now is to compete directly with (perhaps\nsomeday replace) native mobile applications. With React Native the web\nhas lost a huge partner in Facebook for helping make this a reality.\nWhat incentive does Facebook have for pushing forward mobile web now\nthat they can just produce native applications with web technology? What\nincentive do the existing React developers (and the large number of\ndevelopers that will move to React in the near future) have for building\nand proving out mobile web use-cases with React Native? <strong>None</strong>.</p>\n\n<h3>We are getting close</h3>\n\n<p>This year saw significant improvements in mobile web. We are so close.\nCheck out this video from Google showing off the potential of mobile\nweb:</p>\n\n<iframe width=\"560\" height=\"315\"\nsrc=\"https://www.youtube.com/embed/v0xRTEf-ytE\" frameborder=\"0\"\nallowfullscreen></iframe>\n\n<p>No longer is mobile web a matter of <em>if</em> but a matter of <em>when</em>.\nHowever, with Facebook effectively taking themselves out of the\nconversation we&#39;ve lost one of the best use-cases and the largest voices\nwith one of the most popular JavaScript frameworks.</p>\n\n<p>Mobile web is a point of friction currently, and that friction existing\nis good because it will drive people and companies to pursue solutions\nto the problem. React Native is a work-around for mobile web. Some will\nthink of it as a &quot;best of both worlds&quot; and perhaps they are correct. But\nthe problem of mobile web will continue to exist.</p>\n\n<h3>Business needs trump ideological ones</h3>\n\n<p>Of course Facebook should do what is in its own best interest. <a href=\"http://techcrunch.com/2012/09/11/mark-zuckerberg-our-biggest-mistake-with-mobile-was-betting-too-much-on-html5/\">In 2012\nMark Zuckerberg said that Facebook bet too heavily on\nHTML5</a>.\nHe was correct then and he is correct now: mobile web feels like shit\nwhen compared to native. The User Experience is the primary concern for\nany product company. This, however, should not stop us from persuing\nmobile web and pushing the technology forward. I just hope that React\nNative doesn&#39;t impede that progress in any way.</p>\n","summary":null,"illustration":null,"illustration_alt":null,"tags":["opinion","javascript"],"shallow":false,"date":"2015-01-30T00:00:00Z"},{"id":"2015/01/30/empowering-through-design","title":"Empowering through Design","dockyarder":"ashley-treni","body":"<p>There has been some debate in the development community between the <a href=\"https://medium.com/@cramforce/tradeoffs-in-server-side-and-client-side-rendering-14dad8d4ff8b\">&quot;tradeoffs in server side and client side rendering.&quot;</a> As a UX designer working at an Ember shop that focuses on rich client experiences, I&#39;ve observed the benefits of single page web applications, from a design perspective.</p>\n\n<p>The best kind of user interface is one where the system remains transparent, and moves the user fluently through relevant prompts to accomplish the task at hand. That experience can only be as good as the tools we have to shape and elevate that participation. At DockYard, we design and develop single page web apps using Ember as our client-side framework, because it allows for greater clarity of interaction, while keeping the technology transparent.</p>\n\n<p>A single page web app is a webpage that can update contents within the page without refreshing the entire browser window. Because the server doesn&#39;t dictate the display, the &quot;client,&quot; or browser, determines how to represent it. Only the data associated with the selection is changed to reflect the action. </p>\n\n<p>You can imagine how beneficial that real time feedback is on the user side of the experience. Whether aware of it or not, this creates a more immersive experience, and enables the user to better grasp the information by directing attention to content. There is more opportunity to nest information which alleviates information overload, and animation simplifies complexity while still engaging the user. </p>\n\n<p>To do this well, good information architecture and content organization are imperative. Functionality and interaction must be part of the architecture, but not interrupt the flow and navigation. The visual design and communication must be clear and directive. The design supports self directed navigation and the process is not disrupted by the reload of a page. Creating this kind of real time response in the browser is the result of better, faster performance, bringing us closer to a native feel from the web.</p>\n\n<iframe src=\"//player.vimeo.com/video/118249906\" width=\"500\" height=\"452\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\n\n<p><a href=\"https://learnivore.com/\">Learnivore</a> is a website that connects teachers and students searching for instruction across many disciplines. The search page is one of the largest hubs in the Learnivore experience. This <a href=\"http://reefpoints.dockyard.com/2015/01/07/complex-search-pages-feel-better-in-ember.html\">&quot;complex search&quot;</a> filters by type of instruction, location, rate, price, qualifications, and more. The results change dynamically, reflecting the filter selection, as demonstrated in the video above.</p>\n\n<p>Good design empowers the user to make the choices they need to accomplish their goals. It promotes communication and supports informed decision making through real time response. The single page web app model and the technologies to create and innovate with it are at the forefront of mobile and web design and development. It is a technology that not only provides opportunities for creativity and innovation for designers and developers alike, it constructs a more informative and cooperative experience for our users.</p>\n","summary":"The UX benefits of Single Page Web Apps","illustration":null,"illustration_alt":null,"tags":["design","interaction","user-experience","native-web"],"shallow":false,"date":"2015-01-30T00:00:00Z"},{"id":"2015/01/28/estimation-buyers-guide","title":"Estimation Buyers Guide","dockyarder":"jon-lacks","body":"<p>As a Project Manager, I have seen estimates in all forms - points, days, months, hours, mario coins, etc. Many say estimates in Software development are garbage and significant margin of error should be the expected norm. I believe this perspective to be true if estimation is conducted in a vacuum vs. as a means to have a conversation with prospective clients about what it is going to take to achieve their vision.</p>\n\n<p>While estimation provides financial insight into a project, it also provides the project team with a point of reference when it comes to establishing schedules and conducting impact analysis when something needs to change (which is inevitable). As a project manager, a solid process by which we establish an estimate allows me to best serve the client and team.</p>\n\n<p>I would question any firm who claims to offer a high confidence estimate to a prospective client without spending time mapping out the direction an application/product may take on paper. I am not talking about writing a 50 page requirements document (which I once did on a project 10 years before I knew any better).  I am talking about getting the \u201csupporting&quot; cast the context they need to provide an informed perspective on the complexity associated with building the application.  This complexity spans design, engineering, quality and any other overhead associated with a project. </p>\n\n<p>Let me paint this picture for you. Client X wants to build out a new application. The team to build said application provides client X with an estimate based off of a couple pre-sales meetings. Cost is negotiated until everyone around the table is happy with the economics and then the project is handed over to the project team and they are told to build \u201cthis\u201d application in \u201cthis\u201d amount of time. Client X is doomed regardless of whether or not that application is handed over in the agreed amount of time. Here\u2019s why:</p>\n\n<ul>\n<li>The team has no context - Therefore, they are going to spend the first weeks of development getting up to speed as opposed to delivering working features putting the schedule behind right out of the gate</li>\n<li>The team does not &quot;own&quot; the estimate -  Someone else provided it on their behalf (who wants to be responsible for something they don\u2019t own?)</li>\n<li>Unexpected risks and complexity will (not \u201cmay\u201d) put schedule at risk</li>\n<li>Quality will (not \u201cmay&quot;) suffer because the team will attempt to meet the date commitment at the expense of quality</li>\n</ul>\n\n<p>To avoid this at DockYard, we use a tool called Discovery. This is an intensive time-boxed exploration of a client\u2019s business objectives, market and user needs, as well as technological possibilities. These inputs translate into wireframes and those wireframes translate into an estimable breakdown of deliverables that provides a platform to discuss scope, schedule and cost with our client. Our Discovery phase is cross-functional where we have designers and developers working hand in hand to understand the direction a client wants to go. We iterate on design concepts, we discuss technical direction and potential complexities, we map out scope in a way that allows clients to make decisions which may adjust cost and schedule up or down.   While this Discovery phase might feel like a tough nut to crack, it typically results in lower overall project cost, higher quality and better probability of staying on budget/schedule.</p>\n\n<p>A recent post by our own Mike Dupuis speaks to the value engineers can add to the \u201cDiscovery\u201d phase of a project resulting in savings later in the project lifecycle-  <a href=\"http://reefpoints.dockyard.com/2014/09/12/features-as-business-objectives.html\">Features as Business Objectives</a></p>\n\n<p>Whether you love them or hate them, estimates are here to stay in a client services context.  Therefore, instead of grumbling about them - make sure you&#39;re using estimation as more than just a number but a means to have a conversation. Buyer beware of anyone who slaps an estimate on the table without providing you an explanation of how that estimate was derived.  </p>\n\n<p>\u201cLuck is what happens when preparation meets opportunity\u201d - Well said by someone much more insightful than I!</p>\n","summary":"Buyer beware of estimates without understanding how it was derived","illustration":null,"illustration_alt":null,"tags":["project-management"],"shallow":false,"date":"2015-01-28T00:00:00Z"},{"id":"2015/01/28/bubbling-actions-through-components","title":"Bubbling actions through components","dockyarder":"dan-mcclain","body":"<p>If you&#39;re building components for re-use, you&#39;re likely to run into the\nfollowing problem. Say you built a form component, and you also built some type\nof custom button component. You want the action triggered by the button to be\nhandled in your controller or route. If you try to bind the action of that\ninner button, it will be captured by the component, not the controller. The\nissue is that components swallow actions that are triggered within them; they\nwill not escape the component unless we punch a hole for them to bubble up.</p>\n\n<p>You need to capture the action of the inner components and fire off new actions\nfrom the parent component. In the example below, the button is in a component\nthat is inside of another component. The controller has an action to increment\nthe counter.</p>\n\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/suvat/4/embed?output\">Ember Starter Kit</a><script src=\"http://static.jsbin.com/js/embed.js\"></script></p>\n\n<p>Our components&#39; templates are super simple:</p>\n<div class=\"highlight hbs \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n</pre></td>\n  <td class=\"code\"><pre>{{! index.hbs}}\n  {{pressCount}} Button presses\n  {{button-wrapper action=&quot;buttonClick&quot;}}\n\n{{! components/button-wrapper.hbs}}\n  &lt;h2&gt;Button Wrapper&lt;/h2&gt;\n  {{press-button action=&quot;buttonClick&quot;}}\n\n{{! components/press-button.hbs}}\n  &lt;button {{action &quot;buttonClick&quot;}}&gt;My Button&lt;/button&gt;\n</pre></td>\n</tr></table>\n</div></div>\n<p>Notice we bind to the action of the <code>press-button</code> component in our\n<code>button-wrapper</code> component, and in our <code>index</code> template, we bind to the action\nof the <code>button-wrapper</code>. This alone doesn&#39;t work; we need to send actions from\neach component when they receive actions from the underlying component.</p>\n\n<p>In our <code>press-button</code> component, we send an action when the button is clicked:</p>\n<div class=\"highlight js \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n  <td class=\"code\"><pre>App.PressButtonComponent = Ember.Component.extend({\n  <span class=\"key\">classNames</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">press-button</span><span class=\"delimiter\">'</span></span>,\n  <span class=\"key\">actions</span>: {\n    <span class=\"function\">buttonClick</span>: <span class=\"keyword\">function</span>() {\n      <span class=\"local-variable\">this</span>.sendAction();\n    }\n  }\n});\n</pre></td>\n</tr></table>\n</div></div>\n<p>Our <code>button-wrapper</code> receives the action from the <code>press-button</code> component and\nfires its own action:</p>\n<div class=\"highlight js \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n  <td class=\"code\"><pre>App.ButtonWrapperComponent = Ember.Component.extend({\n  <span class=\"key\">classNames</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">button-wrapper</span><span class=\"delimiter\">'</span></span>,\n  <span class=\"key\">actions</span>: {\n    <span class=\"function\">buttonClick</span>: <span class=\"keyword\">function</span>() {\n      <span class=\"local-variable\">this</span>.sendAction();\n    }\n  }\n});\n</pre></td>\n</tr></table>\n</div></div>\n<p>And our index controller receives that action from <code>button-wrapper</code> and\nincrements the <code>pressCount</code>:</p>\n<div class=\"highlight js \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n  <td class=\"code\"><pre>App.IndexController = Ember.Controller.extend({\n  <span class=\"key\">pressCount</span>: <span class=\"integer\">0</span>,\n\n  <span class=\"key\">actions</span>: {\n    <span class=\"function\">buttonClick</span>: <span class=\"keyword\">function</span>() {\n      <span class=\"local-variable\">this</span>.incrementProperty(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">pressCount</span><span class=\"delimiter\">'</span></span>);\n    }\n  }\n});\n</pre></td>\n</tr></table>\n</div></div>\n<h2>Wrapping up</h2>\n\n<p>It&#39;s pretty easy, yet tedious to wire up an action from a component within a\ncomponent. You can trigger actions multiple levels above your initial action,\nand even mutate the action&#39;s arguments on the way up. Maybe the model that\ntriggered the initial action should be put into some type of intermediate\nstate. Maybe you want to normalize several different actions that are bubbling\nup through certain components. Since you need to manually bubble these\nactions up, we can manipulate them at each level that the bubbling occurs. It&#39;s\nsomewhat trivial to handle, you just have to be aware of the work needed to\ntie all your pieces together.</p>\n","summary":"Let your actions be handled in your controllers and routes","illustration":null,"illustration_alt":null,"tags":["ember"],"shallow":false,"date":"2015-01-28T00:00:00Z"},{"id":"2015/01/20/is-your-homepage-as-good-as-your-door-sign","title":"Is your homepage as good as your door sign?","dockyarder":"maria-matveeva","body":"<p>Today is a federal holiday, and a day off for us at DockYard. On days like these, when I do not travel, I often go to the local library.</p>\n\n<p>Today gave me the perfect opportunity to see how easy it would be to find a specific bit of information (<em>is the library open today?</em>) on a library website.</p>\n\n<p>Like many government and community organizations, libraries are easy targets for ridicule when it comes to web design. Look at the outdated styles their site uses! How crowded it is! The HTML tables used for layout! The multi-colored announcements \u201cdesigned\u201d in Word!\u00a0</p>\n\n<p>What I am looking for today is something else: I want to judge the achievability of a specific task regardless of the presentation. Presentation (layout, hierarchy, and just plain good design) affects a user\u2019s ability to achieve her goals, no doubt. I just want to start with the goals, and a specific measurement, rather than starting with the common pitfall of visual designers like myself: noticing the surface details that seem broken rather than the process behind them.</p>\n\n<p>So, here\u2019s my experiment:</p>\n\n<h2>Find out if the library is open today.</h2>\n\n<p><em>With a few considerations.</em></p>\n\n<p>It may be <strong>self evident</strong> that a library is closed on a government holiday. It was not to me. I assume that most casual users have a vague suspicion that it may be closed, and would seek confirmation via the website.</p>\n\n<p>I narrowed my search to just the homepage for this exercise, expecting to find the equivalent of a physical \u201cSorry, closed today!\u201d door sign. And while many libraries provided the same information on Twitter or Facebook, it would be prohibitive to compare all these resources for this quick study.</p>\n\n<p>I saw most of these homepages for the first time today. A regular user of the local library may notice things differently than a new user, so for example the \u201cCLOSED\u201d text announcement that replaces a daily schedule of events, might stand out more for them.</p>\n\n<p>I looked for three things:</p>\n\n<ul>\n<li> was the holiday at all on the homepage, \u00a0</li>\n<li>was it clear, and\u00a0</li>\n<li>was it obvious?</li>\n</ul>\n\n<p>I got about halfway down the alphabetized list of Minuteman Library Network locations, and consider this to be a useful and fair sample for my purpose.</p>\n\n<p>Let\u2019s roll:</p>\n\n<h3>1. Acton</h3>\n\n<h2>3/3!</h2>\n\n<p><img src=\"http://imgur.com/ebDk2UJ.jpg\" alt=\"\"></p>\n\n<p>The site is visually appealing and clear at the same time. I immediately got an answer to my question. Success!</p>\n\n<h3>2. Arlington (Robbins Library)</h3>\n\n<h2>0/3</h2>\n\n<p><img src=\"http://imgur.com/CpqOqdR.jpg\" alt=\"\"></p>\n\n<p>Hours are clearly listed, but the holiday is not. Based on this page, I would assume it is open today\u200a\u2014\u200ain fact, the clear listing of hours reinforces my wrong assumption. To see the holiday announcement, I would need to know to visit the Calendar. A shame, because the site looks quite polished to me and was likely re-designed fairly recently (guessing 2013, from its footer). An investment in a bit of user testing and research would have likely fixed this.</p>\n\n<h3>3. Ashland</h3>\n\n<h2>Huh? 0.5/3</h2>\n\n<p><img src=\"http://imgur.com/yQ2dOww.jpg\" alt=\"\"></p>\n\n<p>While there is no indication of library closure today, the Townhall is clearly  closed. As a local, I might know what that means for my library trip, so I gave 0.5 points for at least mentioning the holiday exists.</p>\n\n<h3>4. Bedford</h3>\n\n<h2>0/3</h2>\n\n<p><img src=\"http://imgur.com/XhAfaNt.jpg\" alt=\"\"></p>\n\n<p>Today\u2019s closure is not mentioned anywhere. Neither are the regular hours. I would look  either in About Us, or (eventually) see a link for Hours &amp; Directions close to the top right.</p>\n\n<h3>5. Belmont</h3>\n\n<h2>3/3!</h2>\n\n<p><img src=\"http://imgur.com/inJbhUs.jpg\" alt=\"\"></p>\n\n<p>The site doesn\u2019t look like much, but it accomplishes my goal today perfectly. The library is clearly closed.</p>\n\n<h3>6. Brookline</h3>\n\n<h2>3/3</h2>\n\n<p><img src=\"http://imgur.com/jpBCY9k.jpg\" alt=\"\"></p>\n\n<p>This library goes beyond my expectations by clearly listing not only today\u2019s closure, but the entire holiday weekend for all three of its locations. The \u201cClosed\u201d notice is clear and immediately jumps to my attention. While there is no \u201cclosed TODAY\u201d notice, I found this more detailed listing works just as well.</p>\n\n<h3>7. Cambridge</h3>\n\n<h2>0/3</h2>\n\n<p><img src=\"http://imgur.com/QVg8HQO.jpg\" alt=\"\"></p>\n\n<p>This library was a particular disappointment, because I have used it many times and the collection and its building are delightful. I am assuming it is one of the better funded libraries, given its location in direct proximity to Harvard. While the amount of content this page needs to show may be far greater than what a smaller local library deals with, this is no excuse for making things difficult to find. I get the feeling that the structure of the site is based on internal objectives, rather than user goals.\u00a0</p>\n\n<p>Here\u2019s where today\u2019s closure information is, in fact, located:</p>\n\n<p><img src=\"http://imgur.com/W4eopoE.jpg\" alt=\"\"></p>\n\n<p>I would have to do this:\n- \u201cfind library hours\u201d on the homepage\n- select \u201cholidays\u201d among eleven listings\n- see on the list that today, January 19th, is a holiday</p>\n\n<h3>8. Concord</h3>\n\n<h2>0/3</h2>\n\n<p><img src=\"http://imgur.com/zH7HVUy.jpg\" alt=\"\"></p>\n\n<p>No indication of whether it is open today. The latest news seems to be the New Year\u2019s.</p>\n\n<h3>9. Dedham</h3>\n\n<h2>3/3</h2>\n\n<p><img src=\"http://imgur.com/8qHlEVH.jpg\" alt=\"\"></p>\n\n<p>It is immediately clear that the library is closed today.</p>\n\n<h3>10. Dover</h3>\n\n<h2>2/3</h2>\n\n<p><img src=\"http://imgur.com/ZmLY9lq.jpg\" alt=\"\"></p>\n\n<p>There is a clear indication that the library is closed today. I had to scan the page for a while and read a few things before I noticed it, so it was not obvious.</p>\n\n<h3>11. Framingham</h3>\n\n<h2>2.5/3</h2>\n\n<p><img src=\"http://imgur.com/3j83pAP.jpg\" alt=\"\"></p>\n\n<p>It was almost obvious that \u201call libraries will be closed\u201d today\u200a\u2014\u200aeven on this crowded page. I was distracted by the email sign-up notice, but the next thing I read was the closure notice. Not pretty, but close to functional.</p>\n\n<h3>12. Franklin</h3>\n\n<h2>0/3</h2>\n\n<p><img src=\"http://imgur.com/9CnV6Uv.jpg\" alt=\"\"></p>\n\n<p>The public library website seems to be just a layer of content on top of the Franklin local government site. Very confusing. No indication of closure.</p>\n\n<h3>13. Holliston</h3>\n\n<h2>2.5/3</h2>\n\n<p><img src=\"http://imgur.com/UNEAehM.jpg\" alt=\"\"></p>\n\n<p>I found the closure information quickly, but it did not stand out enough (for my taste) from other news.</p>\n\n<h3>14. Lexington</h3>\n\n<h2>3.5/3</h2>\n\n<p><img src=\"http://imgur.com/n6IeQHX.jpg\" alt=\"\"></p>\n\n<p>The first indication of the library closure for MLK is in the featured image. It eventually changes to another feature, but there is a second indicator (Today\u2019s hours: CLOSED) that makes the situation obvious. This fall-back \u201cclosed\u201d notice got this site an extra\u00a0.5 points on my scale.</p>\n\n<h2>What did I miss?</h2>\n\n<p>Of course, this is a very small test for a very specific user need. The sites that did well on my scale for \u201cclosing hours\u201d may fail miserably at providing an answer to \u201cwhat\u2019s the street address?\u201d or \u201ccan I renew my book online?\u201d.</p>\n\n<p>This test reiterated for me the importance of research and real-life user testing. Knowing what problems people might try to solve by going to a website, and where the site fails them, is necessary for most any meaningful improvement.\u00a0</p>\n\n<h2>How not to miss things:</h2>\n\n<p>As a designer, I am often excited by a problem I see, and can jump to a solution I consider to be self-evident. (<em>The page is too crowded. Let\u2019s change the typeface and layout!</em>) But to make my solutions truly useful to other people, I must know what they need.</p>\n\n<p>In this example, I am a user with a specific need. Designers do not often start working on a project with solid knowledge of user needs. To bridge this gap, we test the current product (if it exists), create personas and scenarios, and ask lots of questions.</p>\n\n<p>Research could have prevented the \u201cis the library closed?\u201d problem. If there was one question I could ask people,  it would be \u201cWhat was the most frustrating thing about this library?\u201d Out of many responses, I would imagine at least one would mention showing up at the library to find it closed. Asking these types of general questions, not <em>\u201chow satisfied are you with the library website? (on a scale from one to ten)\u201d</em>, will eventually lead us to meaningful design.</p>\n\n<p>Or, at least, save us the frustration of showing up to a closed library.</p>\n","summary":"Ask good questions to solve for real user goals","illustration":null,"illustration_alt":null,"tags":["design","observations","user-experience"],"shallow":false,"date":"2015-01-20T00:00:00Z"},{"id":"2015/01/16/joining-dockyard","title":"Joining DockYard","dockyarder":"estelle-deblois","body":"<p>Six months ago today, I signed the letter officially accepting the offer\nto join DockYard as a Senior Developer. It was the best decision I could have made.</p>\n\n<p>When I announced my resignation to my previous employer, he jokingly said that if\nthey had known choosing Ember as a new client-side framework would\neventually make me want to pursue a new Ember-focused opportunity, they would\nhave chosen Angular.</p>\n\n<p>I first started dipping my toes into Ember in late Spring 2013, some time after\nEmber 1.0 RC3 was released. The Ember.js community was undeniably very active and\nvibrant. That following June, I attended my first Boston Ember meetup,\nwhere <a href=\"https://twitter.com/dgeb\">Dan Gebhardt</a> shared tips on testing Ember apps,\nand <a href=\"https://twitter.com/twokul\">Alex Navasardyan</a> gave an introduction to Ember Data.\nThat&#39;s how I came to know of DockYard.</p>\n\n<p>Soon, some names started to emerge as familiar names within the\ncommunity. <a href=\"https://twitter.com/bcardarella\">Brian Cardarella</a> became\nknown within our dev team as the one who wrote\n<a href=\"https://github.com/dockyard/ember-validations\">ember-validations</a>,\nwhich we were using in our application. <a href=\"https://twitter.com/rwjblue\">Robert\nJackson</a> was another name that kept popping\nup on my Twitter and GitHub feeds. Call me a nerd if you will, but I was\nas excited to have The Robert Jackson accept a fix that I submitted to\n<a href=\"https://github.com/emberjs/ember-dev\">ember-dev</a> later that year to make builds\npass on Windows (with Rake at the time) as I would have been meeting a film celebrity.</p>\n\n<p>DockYard further reinforced its reputation by organizing the Wicked Good Ember\nconference in Boston, in June of 2014, which I of course attended.</p>\n\n<p>Needless to say, when Brian reached out to me last July about joining the team, I\nsaw it as an opportunity that was really hard to pass on. Logistically,\nI may have been better off staying where I was. I had a 40 min commute.\nJoining DockYard would have doubled my commuting time. I was also\ncomfortable with the position I was holding, building out cool D3.js\ncharts with Ember, leading the development of new products, and getting\nmyself involved in all kinds of engineering team growth efforts. But\nthen there was DockYard. I went with my gut feeling instead and left\nthe warm and comfortable seat to face the exciting, though new and scary thing that was\nDockYard.</p>\n\n<p>Scary? Yes. From everything DockYard had done for the Boston community\nto the talent behind its wheel, I was absolutely terrified of not\nfitting in, that it was too elite for me. I checked out the team page on\nthe website and read everyone&#39;s biography a number of times,\ntrying to picture what kind of co-workers I would be interacting with\ndaily. No matter how great the projects can be, culture is a big thing.\nTo my delight, the culture at DockYard is one that resonates the\nmost with me in my 10 years of professional career.</p>\n\n<p>DockYard has a well-balanced team of young, bright minds and more\nseasoned developers, and I embrace that. There is none of that &quot;I am\nbetter than you&quot; bullshit. Those I once viewed as Ember Gods and would\nhave been intimidated to talk to have been incredibly supportive and encouraging.\nIn the past, whenever I was involved in the hiring process for\nEngineering, I had always wondered where all the great developers were.\nWell, they&#39;re here, happily employed at places like DockYard. If there\nis one thing I can say about the company, it&#39;s that it&#39;s doing something\nright to attract an amazingly talented and diverse crew. I&#39;ve been\nparticularly impressed with our designers. It&#39;s nice as a developer to\nwork on such nifty UIs!</p>\n\n<p>Doing consultancy work was new to me, and I had been warned about what I was\nthrowing myself into, that I&#39;d end up losing focus on quality and just\nhack solutions together quickly to meet client deadlines. I don&#39;t doubt\nthat those kinds of situations can creep up, but so far, I&#39;ve found\nquite the opposite in the two projects that I&#39;ve been involved in.\nPeople care deeply about delivering clean, maintainable,\nand well-tested code, and they&#39;ve been especially adept at maintaining those\nprinciples throughout the life of a project.</p>\n\n<p>It&#39;s also refreshing to be able to work on a diverse portfolio of\nprojects. In the first few months since joining DockYard, I worked on a Rails and Ember app\nthat incorporated some really cool geolocation functionality. I am now\nworking on something that is unlike any other app I have ever developed.\nThe project includes Arduino code, Ember.js, and Node WebKit\n(<a href=\"http://nwjs.io/\">NW.js</a>).</p>\n\n<p>The best, of course, is DockYard&#39;s mindset towards open source. I always\nlook forward to our &quot;DockYard days&quot; on Fridays to hack on code, blog\n(this is my first one!), contribute back to the community in some ways,\nor just to level up our craftsmanship.</p>\n\n<p>And as much as everyone works really hard, we also know when to have\nfun, be it through Risk game tournaments, friendly games of Carcassonne\n(or, as some would say, &quot;Casserole&quot;), or world exploring and building on\nMinecraft.</p>\n\n<p>Finding a job that you&#39;ll love can be hard. Finding a team that you&#39;ll\nlove working with can be twice as hard. And sometimes, it&#39;s okay\nto leave behind what is comfortable and secure, in light of\nsomething promising, yet unknown. You may be pleasantly surprised.</p>\n","summary":"Reflections on the past few months of being employed at DockYard","illustration":null,"illustration_alt":null,"tags":["jobs","culture","team"],"shallow":false,"date":"2015-01-16T00:00:00Z"},{"id":"2015/01/14/sr-ui-designer","title":"Job: Senior UI & Visual Designer","dockyarder":"steven-trevathan","body":"<p>We are looking for the next addition to our design team.</p>\n\n<p>The ideal candidate is someone who can demonstrate a strong user-centric approach to their work, cares deeply about how their work will ultimately function, has been part of the user research process in the past, and shows strength in typography, color, and information layout.</p>\n\n<p>We\u2019re a design-driven software consultancy with design projects typically lasting 2-4 months. If you\u2019re sick of working on the same product for years at a time, this may be a welcome change for you. Many of our client projects are \u201cgreenfield\u201d, so you\u2019ll have the opportunity to define the core concepts that will permeate throughout the application and be built upon as the product grows.</p>\n\n<p>We are also heavily involved in the Boston design community. We very successfully ran our first UX East Camp last Nov, we host and coorganize UX Boston, run UX Happy Hour, speak at industry conferences and meetups, and blog about our experience (blog traffic is around 300 hits per day). If you\u2019re publishing your work and articles through DockYard they will get traction.</p>\n\n<p>You will be expected to take part in your community and we will give you tools to do so. We run weekly internal talks on a rotating schedule, run company wide peer-reviews of blog posts, and will fly you to one industry conference a year.</p>\n\n<p>DockYard also has a full engineering team on staff (actually much larger than the design team by about 2-to-1). They are experts in both front and back end technologies. The implementation of your work will be on-point and very well engineered.</p>\n\n<p>We offer better than market rates. Full health and dental coverage (no matter what your coverage requirements are). We also have 6 weeks of vacation time per year. 4 of those are mandatory vacation.</p>\n\n<p>This is an on-site position in Boston, MA.</p>\n\n<p>If this type of working environment interests you, then we\u2019d love to hear from you. <a href=\"mailto:jobs@dockyard.com\">E-mail us</a> (we do not work with recruiters) to get in touch.</p>\n","summary":"Work at DockYard designing highly interactive web applications!","illustration":null,"illustration_alt":null,"tags":["design","jobs"],"shallow":false,"date":"2015-01-14T00:00:00Z"},{"id":"2015/01/14/check-your-expectations","title":"Check your expectations (at the bathroom door)","dockyarder":"maria-matveeva","body":"<p><img src=\"/images/post-assets/maria/blog-bathroom-expectations-01.jpg\" alt=\"\">\n<em>This is what we walked through one Friday evening as we were leaving work.</em></p>\n\n<p>The building we work in is under construction. There are many small and large annoyances that come with a live construction site nearby. One thing has been particularly awkward: access to our restrooms.</p>\n\n<p>As you might suspect, most if not all construction workers are men. There is active pipe work going on in the building, so they often need to do work directly inside the women&#39;s restroom at random times throughout the day. We would discover that a man is working on a ceiling duct in a space we expected to be for women only, and it has caused a considerable amount of tension.</p>\n\n<p>While there may be many alternatives to doing construction work like this without warning, with less disruption of our work day, I had also started to question why this behavior felt like such an intrusion. After all, there are covered stalls with doors that go down close to the ground, so there&#39;s still a significant amount of privacy.</p>\n\n<p>The reason seems to be not the exposure itself, but the fact that a certain space (e.g. beyond the door that says &quot;WOMEN&quot;) has been designated for a specific use, and is limited to one gender. This situation is not default - in fact, there are a few alternatives:</p>\n\n<p>Often located in smaller restaurants or coffee shops, a single-user bathroom normally does not have a gender restriction. One would simply wait for it to be vacant, and use it without a second thought.</p>\n\n<p>A &quot;family&quot; bathroom (explicitly marked as such) is for one or many users. It is roomier than the &quot;regular&quot; bathrooms next to it, and normally utilized by a parent with children, or someone using a wheelchair. Few eyebrows would be raised when several people at once, regardless of gender, walk out.</p>\n\n<p>At MOMA PS1 there is an explicitly declared unisex shared restroom. It has three stalls (with doors) and a urinal facing the back wall. It is a bit unsettling to use for the first time, but the explicit declaration makes it feel like a shared awkward experience, rather than a disadvantage of one group of people or another.</p>\n\n<p>In summary - our expectations always determine what we consider to be unacceptable. The example of bathrooms in our office building clearly shows that a construction worker&#39;s expectation (&quot;this is my work site&quot;) and my female co-workers&#39; expectation (&quot;this is a space for women only&quot;) did not line up. More importantly, both parties were &quot;right&quot; in their own way. </p>\n\n<p>To me as a designer, this awkward situation clearly illustrates how important it is to understand a client&#39;s or a colleague&#39;s expectations in any given situation. It is entirely possible \u2013 especially when working with a client in an industry I am not familiar with \u2013 to commit terrible missteps without even knowing they happened.</p>\n\n<p>To avoid the kind of toxic misunderstanding, it is important to communicate assumptions (even the &quot;duh!&quot; kind) early on in a project. It may feel awkward to have to say out loud the things that you consider to be understood by everyone involved. Get over it. When you find and defuse that one thing you did not agree was a given, it will all be worth it.</p>\n","summary":"Your normal is not always their normal.","illustration":null,"illustration_alt":null,"tags":["design","observations"],"shallow":false,"date":"2015-01-14T00:00:00Z"},{"id":"2015/01/13/should-we-consider","title":"Masking private information from the owner","dockyarder":"steven-trevathan","body":"<h2>Should we consider allowing the display of all private or risky information to the owner strictly through a prompt?</h2>\n\n<p><strong>This could include:</strong></p>\n\n<ul>\n<li>username</li>\n<li>password</li>\n<li>e-mail</li>\n<li>birth date</li>\n<li>social security number</li>\n<li>credit card info (maybe never show it)</li>\n<li>account numbers</li>\n<li>you get it by now</li>\n</ul>\n\n<h2>Why?</h2>\n\n<p>Well, one little bit of information that someone tweets about themselves in a screenshot could mean they\u2019re sharing a useful piece of data to a DOXX operation by some douchebag on the internet. That\u2019s the theory, but as I know very little about DOXXing it may not make sense.</p>\n\n<h2>Why am I thinking this?</h2>\n\n<p>I just tweeted a photo and I realized after the fact I might have put some sensitive information in it. Not like credit cards or actionable items to any normal viewer, but the kind of information that could add up to something a technically sophisticated malicious person might like. Turns out it was just my name, which seems ok to me.</p>\n\n<h2>Because users don\u2019t really know better and they never will</h2>\n\n<p>I\u2019ve spent a lot of time resisting the \u201cour users don\u2019t know\u201d mantra in certain scenarios, and I can tell you why sometimes still resist it, but I digress. When it comes to security, our brains aren\u2019t very good at remembering the pieces of information we\u2019ve shared. I have 4k+ tweets and I know a lot of people are at that or beyond. How can we be sure we haven\u2019t shared too much information? I don\u2019t think we can.</p>\n\n<p>It could certainly be a pain in the designer&#39;s ass to worry about protecting the user from doing something harmful to themselves (on purpose yet without being aware) in addition to everything else our daunting jobs require us to, but maybe this really warrants consideration by designers. Maybe it\u2019s part of the job.</p>\n","summary":"Are we allowing users to walk right into identity theft?","illustration":null,"illustration_alt":null,"tags":["design","observations","privacy"],"shallow":false,"date":"2015-01-13T00:00:00Z"},{"id":"2015/01/13/book-design-and-the-web","title":"Book design and the web","dockyarder":"maria-matveeva","body":"<p>I recently attended a presentation by a <a href=\"http://www.ludovic-balland.ch\">Swiss book designer Ludovic Balland</a> where he described the process behind his beautiful and sophisticated books. His studio has done many architecture monographs, because the format lends itself well to carefully considered custom design. (Architects with lots of work to show also tend to have the budget for and interest in such things.)</p>\n\n<h2>Formats in print</h2>\n\n<p>A key concept in his book design process is the selection of an appropriate medium, or format, for each type of content. He explained that with enough analysis, the materials from which a book is to be made can clearly be separated by type of content. For example, photographs of completed buildings are one type, and architectural drawings of incomplete or conceptual projects\u200a\u2014\u200aanother. Once the separation is made, the next logical step is to select the best format for each type of content, with sensitivity to its beautiful representation. Type of paper, ink, printing methods, folding and binding possibilities all become variables in an equation, which can have a logical and aesthetic solution.</p>\n\n<p><em>Barents Lessons</em> is a book based on a trip that a group of students took to the Barents Sea.\n(All images via <a href=\"http://www.ludovic-balland.ch/\">ludovic-balland.ch</a>)\n<img src=\"/images/post-assets/maria/blog-books-and-web-design-01.jpg\" alt=\"\"></p>\n\n<p>This book consists of three sections, with three distinct formats. The first\u200a\u2014\u200aAnalysis\u200a\u2014\u200ais text, meant for long form reading.\n<img src=\"/images/post-assets/maria/blog-books-and-web-design-02.jpg\" alt=\"\"></p>\n\n<p>It is followed by a section of detailed maps. Colors were individually selected to take advantage of the cartographic detail. For this and other projects, Ludovic\u2019s studio often completely re-draws graphics like this all in a consistent style for the book, which they then can print at the highest quality.\n<img src=\"/images/post-assets/maria/blog-books-and-web-design-03.jpg\" alt=\"\"></p>\n\n<p>The final section holds student photographs. They are shown in an order determined by the value of the photo: from dark to light, avoiding forced storylines between photographs that do not necessarily relate to each other. The paper selection has changed once again, and the photos are given full prominence with minimal captions.\n<img src=\"/images/post-assets/maria/blog-books-and-web-design-04.jpg\" alt=\"\"></p>\n\n<p>I find this book to be a great example of logical and thoughtful design: content is well supported and enhanced through the technology of book production. Everything, from the binding, to the paper, to the colors and page layouts, supports the content of the book. I also think it\u2019s a strong parallel to the use of technology to support users, and the things they want to do, when we build products on the web.</p>\n\n<h2>Formats on the web</h2>\n\n<p>While technology allows us to make things respond in a specific manner to an action, to show only the necessary things to the right person, or to add delightful and playful details to already common tasks, it is the thoughtful and often economical selection of the \u201cformats\u201d we use on the web that makes for a strong, impactful project.</p>\n\n<p>For example, using Ember.js - <a href=\"http://reefpoints.dockyard.com/2015/01/07/complex-search-pages-feel-better-in-ember.html\">a technology that allows us to change portions of a web page without reloading the entire thing</a> - allows us to enhance a search page very effectively. We could use the same technology to enhance a gallery type page (whose primary purpose is to show static content) but the improvement would be marginal and not cost effective. The <a href=\"http://www.indexhibit.org/what-who-why-how/\">Inexhibit platform</a> focuses on <em>\u201ca community of users who place emphasis on content over complicated website design\u201d</em> and offers a minimal tool for artists to create a gallery and show their work.</p>\n\n<p>We can always add technology to marginally improve the experience. We could also print newspapers on higher quality paper, but the format would conflict with the nature of a newspaper as a frequently updated disposable item. </p>\n\n<p>Our ability to select the appropriate format, or technology, for a task reflects our deep understanding of the content and the problem we are solving. The rejection of unnecessary improvements is an important decision. It makes our work efficient and focused.</p>\n","summary":"Really understand your content, then select its format.","illustration":null,"illustration_alt":null,"tags":["design","observations"],"shallow":false,"date":"2015-01-13T00:00:00Z"},{"id":"2015/01/11/why-is-google-ignoring-over-400000-backlinks","title":"Why is Google ignoring over 400,000 backlinks to DockYard?","dockyarder":"brian-cardarella","body":"<p>Imagine our enthusiasm when the opportunity to add hundreds of thousands\nof backlinks from one of the web&#39;s most popular library hosting websites\nback to our domain came our way. And imagine our surprise when Google\ndecided they meant nothing.</p>\n\n<p>Back in <a href=\"http://reefpoints.dockyard.com/2014/11/18/rubygems-redesign.html\">November we launched the redesign of\nRubyGems.org</a>. We were contacted by\n<a href=\"http://rubycentral.org\">RubyCentral</a> about 9 months prior. I was\ninterested in this opportunity for three reasons:</p>\n\n<ul>\n<li>It gave DockYard the opportunity to give back to the Ruby community,\none that has been so pivotal to our growth early on (and one that has\nbeen pivotal to my growth as a professional engineer for nearly 10\nyears)</li>\n<li>DockYard can show off its design talents to the community</li>\n<li>DockYard would get a <em>&quot;Designed By&quot;</em> sponsor link at the bottom of\nevery page.</li>\n</ul>\n\n<p>This blog post is going to explore the third reason and the result of\nthis over the past two months.</p>\n\n<p>At the time of launch RubyGems.org had over 90,000 gems published. This\nmeant a sponsor link at the bottom of every page that was backlinking\nto <a href=\"https://dockyard.com\">DockYard.com</a>. In addition to the landing page\nand the other static pages. This was an appealing value to gain from a\nre-design effort. According to Google&#39;s own backlink search DockYard had\nonly 65 pages linking back. This struck me as odd considering this blog\nitself links back to DockYard.com and there were more than 65 posts. But\nsurely after the redesign this number should go up. Our estimated\nPageRank was <code>5</code>.</p>\n\n<p>After the redesign we saw the expected spike in traffic</p>\n\n<p><img src=\"http://i.imgur.com/tpcgGpK.png\" alt=\"\"></p>\n\n<p>Checking in on the referrals we can see that to date we have received\nover 600 referrals from RubyGems.org. I&#39;m OK with these numbers as I\nnever expected everyone to be clicking on those links.</p>\n\n<p><img src=\"http://i.imgur.com/cM66gW5.png\" alt=\"\"></p>\n\n<p>However, what did shock me was that none of these backlinks were being\ncounted by Google.</p>\n\n<p><img src=\"http://i.imgur.com/fTyXVzV.png\" alt=\"\"></p>\n\n<p>The sponsor link does not have a <code>nofollow</code> attribute. And I admit that\nSEO is not something I&#39;ve very good at. But if I were to look at another\nbacklink source such as\n<a href=\"https://ahrefs.com/site-explorer/overview/subdomains/?target=dockyard.com\">ahrefs</a></p>\n\n<p><img src=\"http://i.imgur.com/tlHt3sK.png\" alt=\"ahrefs\"></p>\n\n<p>You can clearly see the spike in referring pages. A <strong>huge</strong> jump from\nnearly nothing to over 400,000. The bottom graph shows that these are\nprimarly <em>DoFollow</em> links.</p>\n\n<p>So these backlinks aren&#39;t being counted by Google? Does Google only count\none domain per backlink? Color me confused. I suspect we&#39;re doing\nsomething wrong on our end to not get any credit. Could it be that such\na huge spike in backlinks are flagged as suspicious by Google? I&#39;d\nappreciate any thoughts in the comments.</p>\n","summary":null,"illustration":null,"illustration_alt":null,"tags":["opinion","business"],"shallow":false,"date":"2015-01-11T00:00:00Z"},{"id":"2015/01/07/complex-search-pages-feel-better-in-ember","title":"Complex Search Pages Feel Better in Ember","dockyarder":"dan-mcclain","body":"<p>With many server rendered search pages, a change to your search parameters\ntypically renders a new page. The use of some JavaScript can alter the\nsearch results, as seen below. Note that both refreshes and JavaScript results\nswapping happens.</p>\n\n<iframe width=\"560\" height=\"315\" src=\"//www.youtube.com/embed/pstevGCOUHs\" frameborder=\"0\" allowfullscreen></iframe>\n\n<p>Whenever the results are altered, it feels (and is) slow. The times that\nrefresh the whole page feel the slowest, but even when a partial\nchange happens, it&#39;s obvious and slow. It feels clunky</p>\n\n<p>With Ember, we can provide a better experience. The video below is a similiar\nstyle search page on a site we built for <a href=\"http://learnivore.com\">Learnivore</a> with Ember.</p>\n\n<iframe width=\"560\" height=\"315\" src=\"//www.youtube.com/embed/7F2F1iGOw4s\" frameborder=\"0\" allowfullscreen></iframe>\n\n<p>Notice that the page never refreshes completely. The search box always stays on\nthe page. And when we switch categories, only the relevant options are swapped\nout, we don&#39;t have to redraw the whole page. And when we select an additional\nfilter on the left, only the search results are swapped out. <strong>This page performs\nbetter because it performs less work.</strong> It feels better because you are constantly\nseeing parts of the page reloaded without being changed. The filters on the left\nonly change when they need to.</p>\n\n<p>It will also perform better on low bandwith connections; it only requests the\ndata necessary to render the page.  This will require fewer bytes to be sent\ncompared to the server rendered page.  When you render the page on the server,\nyou have to include every tag necessary to render that content. When you are\nusing a single page application architecture like Ember, it will only need the\ndata that makes up that result.</p>\n\n<p>What a representation of the server rendered page looks like coming across the\nweb to your device:</p>\n<div class=\"highlight html \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n22\n23\n</pre></td>\n  <td class=\"code\"><pre><span class=\"tag\">&lt;html&gt;</span>\n  <span class=\"tag\">&lt;head&gt;</span>\n    <span class=\"tag\">&lt;title&gt;</span>Your search results<span class=\"tag\">&lt;/title&gt;</span>\n    <span class=\"comment\">&lt;!-- Several to tens of lines for stylesheets and javascript --&gt;</span>\n  <span class=\"tag\">&lt;/head&gt;</span>\n  <span class=\"tag\">&lt;body&gt;</span>\n    <span class=\"tag\">&lt;header&gt;</span>\n      <span class=\"tag\">&lt;h1&gt;</span>Search results!<span class=\"tag\">&lt;/h1&gt;</span>\n      <span class=\"tag\">&lt;p&gt;</span>This can be tens of lines, hundreds of characters to establish content\n      and look<span class=\"tag\">&lt;/p&gt;</span>\n    <span class=\"tag\">&lt;/header&gt;</span>\n    <span class=\"tag\">&lt;div&gt;</span>\n      <span class=\"tag\">&lt;a</span> <span class=\"attribute-name\">href</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">somepage</span><span class=\"delimiter\">&quot;</span></span><span class=\"tag\">&gt;</span>Here is one of the search results<span class=\"tag\">&lt;/a&gt;</span>\n      <span class=\"tag\">&lt;p&gt;</span>Some description of your search result<span class=\"tag\">&lt;/p&gt;</span>\n      <span class=\"tag\">&lt;img</span> <span class=\"attribute-name\">src</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">SomeImage</span></span><span class=\"error\">&gt;</span>\n    <span class=\"tag\">&lt;/div&gt;</span>\n    <span class=\"comment\">&lt;!--Repeat the result 10/20/50 times --&gt;</span>\n    <span class=\"tag\">&lt;footer&gt;</span>\n      <span class=\"tag\">&lt;a</span> <span class=\"attribute-name\">href</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">about</span></span><span class=\"error\">&gt;</span>About us<span class=\"tag\">&lt;/a&gt;</span>\n      <span class=\"tag\">&lt;p&gt;</span>Hundreds more characters to provide links, style, etc<span class=\"tag\">&lt;/p&gt;</span>\n    <span class=\"tag\">&lt;/footer&gt;</span>\n  <span class=\"tag\">&lt;/body&gt;</span>\n<span class=\"tag\">&lt;html&gt;</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Since the page needs to be completely reloaded, we need to display not only\nthe contents, but any header and footer content. This simplified example also\nlacks any type of filters or inputs to alter your results, which would make the\namount of data sent to your device larger to view the page. This needs to happen\nwhenever the page is updated.</p>\n\n<p>Compare the above to what Ember requires to update the page:</p>\n<div class=\"highlight json \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n  <td class=\"code\"><pre>{\n  <span class=\"error\">s</span><span class=\"error\">e</span><span class=\"error\">a</span><span class=\"error\">r</span><span class=\"error\">c</span><span class=\"error\">h</span><span class=\"error\">R</span><span class=\"error\">e</span><span class=\"error\">s</span><span class=\"error\">u</span><span class=\"error\">l</span><span class=\"error\">t</span><span class=\"error\">s</span>: [\n    {\n      <span class=\"error\">t</span><span class=\"error\">i</span><span class=\"error\">t</span><span class=\"error\">l</span><span class=\"error\">e</span>: <span class=\"error\">'</span><span class=\"error\">H</span><span class=\"error\">e</span><span class=\"error\">r</span><span class=\"error\">e</span> <span class=\"error\">i</span><span class=\"error\">s</span> <span class=\"error\">o</span><span class=\"error\">n</span><span class=\"error\">e</span> <span class=\"error\">o</span><span class=\"error\">f</span> <span class=\"error\">t</span><span class=\"error\">h</span><span class=\"error\">e</span> <span class=\"error\">s</span><span class=\"error\">e</span><span class=\"error\">a</span><span class=\"error\">r</span><span class=\"error\">c</span><span class=\"error\">h</span> <span class=\"error\">r</span><span class=\"error\">e</span><span class=\"error\">s</span><span class=\"error\">u</span><span class=\"error\">l</span><span class=\"error\">t</span><span class=\"error\">s</span><span class=\"error\">'</span>, <span class=\"error\">u</span><span class=\"error\">r</span><span class=\"error\">l</span>: <span class=\"error\">'</span><span class=\"error\">s</span><span class=\"error\">o</span><span class=\"error\">m</span><span class=\"error\">e</span><span class=\"error\">p</span><span class=\"error\">a</span><span class=\"error\">g</span><span class=\"error\">e</span><span class=\"error\">'</span>,\n      <span class=\"error\">d</span><span class=\"error\">e</span><span class=\"error\">s</span><span class=\"error\">c</span><span class=\"error\">r</span><span class=\"error\">i</span><span class=\"error\">p</span><span class=\"error\">t</span><span class=\"error\">i</span><span class=\"error\">o</span><span class=\"error\">n</span>: <span class=\"error\">'</span><span class=\"error\">S</span><span class=\"error\">o</span><span class=\"error\">m</span><span class=\"error\">e</span> <span class=\"error\">d</span><span class=\"error\">e</span><span class=\"error\">s</span><span class=\"error\">c</span><span class=\"error\">r</span><span class=\"error\">i</span><span class=\"error\">p</span><span class=\"error\">t</span><span class=\"error\">i</span><span class=\"error\">o</span><span class=\"error\">n</span> <span class=\"error\">o</span><span class=\"error\">f</span> <span class=\"error\">y</span><span class=\"error\">o</span><span class=\"error\">u</span><span class=\"error\">r</span> <span class=\"error\">s</span><span class=\"error\">e</span><span class=\"error\">a</span><span class=\"error\">r</span><span class=\"error\">c</span><span class=\"error\">h</span> <span class=\"error\">r</span><span class=\"error\">e</span><span class=\"error\">s</span><span class=\"error\">u</span><span class=\"error\">l</span><span class=\"error\">t</span><span class=\"error\">'</span>, <span class=\"error\">i</span><span class=\"error\">m</span><span class=\"error\">a</span><span class=\"error\">g</span><span class=\"error\">e</span>: <span class=\"error\">'</span><span class=\"error\">S</span><span class=\"error\">o</span><span class=\"error\">m</span><span class=\"error\">e</span><span class=\"error\">I</span><span class=\"error\">m</span><span class=\"error\">a</span><span class=\"error\">g</span><span class=\"error\">e</span><span class=\"error\">'</span>\n    },\n    <span class=\"error\">R</span><span class=\"error\">e</span><span class=\"error\">p</span><span class=\"error\">e</span><span class=\"error\">a</span><span class=\"error\">t</span><span class=\"error\">e</span><span class=\"error\">d</span> <span class=\"integer\">10</span><span class=\"error\">/</span><span class=\"integer\">20</span><span class=\"error\">/</span><span class=\"integer\">50</span> <span class=\"error\">t</span><span class=\"error\">i</span><span class=\"error\">m</span><span class=\"error\">e</span><span class=\"error\">s</span>\n  ]\n}\n</pre></td>\n</tr></table>\n</div></div>\n<p>Bytes are wasted sending down the markup to render the page; it&#39;s already\nthere, along with the header and footer. This payload is much smaller, and\nprovides a friendlier experience to those on a slow connection.</p>\n\n<p>We can provide better interactions with Ember because the user will not see unnecessary\nrerendering of the same content. The requests to update the content will be\nsmaller, so new results will arrive faster. The difference in speed of these two\napproaches is increased as the user&#39;s bandwidth shrinks. Faster pages help with\nconversions, and Ember can provide a faster, more intuitive experience.</p>\n","summary":"Creating a better search experience with Ember","illustration":null,"illustration_alt":null,"tags":["ember"],"shallow":false,"date":"2015-01-07T00:00:00Z"},{"id":"2015/01/05/avoid-chaining-modifiers","title":"BEM Tips: Avoid Chaining Modifiers","dockyarder":"amanda-cheung","body":"<p>At DockYard, we use the BEM methodology for naming our CSS classes. BEM\nstands for Block, Element, Modifier and is a front-end development\ntechnique that suggests a class naming convention for your HTML elements. If\nyou aren&rsquo;t already familiar with BEM, it would be helpful to take a look at\n<a href=\"http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/\">Harry Robert&rsquo;s MindBEMding blog post</a>\nand the <a href=\"https://bem.info/\">BEM website</a> first.</p>\n\n<p>When I started looking into using BEM, I thought it would definitely work well\nfor large web applications. The more rules we could put in place\nregarding naming conventions, the better. What I didn&rsquo;t understand\nwas what to do when an element could be considered an element of a block <em>or</em> a\nmodifier. If I had a button that was in the footer and it was styled differently\nthan other buttons in the website, should it be named <code>.footer__button</code>\nor <code>.button--footer</code>? Arguments could be made for both sides, so is one better\nthan the other?</p>\n\n<p>After trying out both ways, <code>.footer__button</code> proved more scalable because\nthis rule could be consistently applied in more situations. Could there\nbe more types of buttons in the footer?\nIf there are also social buttons in the footer, our choices now become\n<code>.footer__button--social</code> or <code>.button--footer--social</code>. In the second one, is social modifying\nfooter and footer modifying button? Or is social modifying button as\nwell? To avoid confusion, I would call it <code>.footer__button--social</code>\nand not chain my modifiers. This doesn&rsquo;t mean we\nshouldn&rsquo;t use multiple modifiers in a class name at all.\n<code>.person--female__hand--right</code> is still fair game. It&rsquo;s clear that female\nis modifying person and right is modifying hand.</p>\n\n<h2>TL;DR</h2>\n\n<p>If I had an element that could potentially be either an element of a\nblock or modifying an element, the latter is better because\nchaining modifiers can be confusing.</p>\n","summary":null,"illustration":null,"illustration_alt":null,"tags":["css"],"shallow":false,"date":"2015-01-05T00:00:00Z"},{"id":"2014/12/30/modeling-mental-models","title":"Tips on Mental Models","dockyarder":"steven-trevathan","body":"<p>Just as a single color can have conflicting associations between different cultures, mental models can vary widely between users. If you haven\u2019t heard of <a href=\"http://en.wikipedia.org/wiki/Mental_model\">mental models</a>, they are a beholder\u2019s mental image of a designed object and how it may be interfaced with. </p>\n\n<p>Understanding the mental models your users have created of your product (or similar product experiences) is important. It will help you improve either by adjusting the product to better fit their mental model or by changing the users\u2019 mental model to better fit your product. Neither are simple.</p>\n\n<p>To give you a sense of how a mental model is constructed or applied to a product, let&#39;s imagine looking at a new object in extreme slow motion:</p>\n\n<p>The object is placed before you. The first thing you notice is its size and shape. It\u2019s small enough to fit in the palm of your hand, thin, and rectangular in shape. Its color is off-white. In this first glance you might make some general assumptions about the object\u2019s nature and function, but given that there are countless objects that could share these qualities, your observation continues. </p>\n\n<p>On the grey rectangle you can clearly see a small red button, a small green button, a large square button, and a series of small grey buttons in a familiar 3x3 grid. Given that the device is small enough to fit in your hand, has multiple buttons, and lacks a screen, you might conclude that it\u2019s a remote of some kind. And you might stop there, unless you actually have to use the remote.</p>\n\n<p>While making these observations, your brain was building a mental model of how to interact with it by referencing past experiences with similar objects. Taking the path of least resistance, your brain wants to reapply these models wherever and whenever it can. You won\u2019t need to re-teach yourself how to use something you\u2019ve consistently used over the years unless something significantly breaks the pattern. With each connection you make with familiar and unfamiliar qualities of the object, either consciously or not, you pave ways to interpret the purpose, value, and effectiveness of the object.</p>\n\n<p>The speed with which we identify these things correlates to how similar the object is in form to other objects we\u2019re familiar with. The models you create as a user aren\u2019t originating solely with the object in front you; instead they are created from all the objects you\u2019ve ever interacted with. This is where understanding and employing mental models gains value in design. We can use them to manipulate, speed up, or slow down interpretation of our products.</p>\n\n<p>The information and interpretations from that first glance are all gleaned with relatively low effort, almost instantaneous, and you\u2019re not always aware that you are making these evaluations. However, a unique object often takes a conscious effort to understand. If the object wasn\u2019t very well designed to reveal its own function you may instead have exhausted yourself with a seemingly uninterpretable thing and given up.</p>\n\n<h2>Borrowing</h2>\n\n<p>We sometimes borrow mental models from unrelated or contextually irrelevant experiences because some aspect of what we are interacting with may have unconsciously reminded us of previous experiences. A thing isn\u2019t always what we think it is.</p>\n\n<p>Because we are all somewhat responsible for building our own mental models from our experiences with the designed world, our interpretations of an object\u2019s purpose or quality of performance can vary greatly. I think this is part of the reason why reviews of products are so polarized. People\u2019s expectations and preferences are different, and sometimes they just aren\u2019t able to build a fitting mental model of the product. So they\u2019ll borrow it.</p>\n\n<p>If the object is truly unique, layers of mystery may remain for a broad user base. Thus, there may be limits to how they have evaluated the object\u2019s purpose. As designers, we don\u2019t need to hold ourselves responsible for explaining everything, but it is important to get a user to as complete an understanding as possible using the object\u2019s form alone. No language, no manuals, no tutorials. No automatically playing videos after they log in for the first time.</p>\n\n<h2>Against the grain</h2>\n\n<p>Going against the grain of a mental model is generally a bad idea, but it can be valuable. It should be by design, of course, and might provide some comparative market value and interest. An example of this working was the introduction of the iPod and its very unique interface (the wheel) while competitors had basically indistinguishable and boring (by comparison) arrow key pads. The iPod might have been a little more difficult to use, but the innovative design wasn\u2019t enough of a challenge to stop people from using it. Instead the change helped Apple greatly differentiate their product from other MP3 players.</p>\n\n<p>What happens when you go against the grain for no good reason? Lots of avoidable and silly mistakes, that\u2019s what. Take this remote for our projector as an example.</p>\n\n<p><img src=\"/images/post-assets/steve/mental-models-remote.jpg\" alt=\"A very frustrating projector remote\">\n<em>For emphasis, I\u2019ve erased the small labels generally ignored by users when turning the projector on or off.</em></p>\n\n<p>We know it\u2019s a remote at first glance because we\u2019ve used them before. The shape seems to suggest both purpose and a direction for use. Which end of the remote would you point toward the projector?</p>\n\n<p>If you said you\u2019d point it with the slanted side forward and the red button in the upper right, you would have found on your first (and second, and third) attempt that this remote\u2019s form does not align with your mental model. With this particular design, you are expected to hold the remote with the red button positioned on the bottom left. </p>\n\n<p>In other words, the mental model I have for remotes is not matched to the device because the manufacturer ignored a common design pattern without apparent reason, adding only momentary confusion, rather than enhanced functionality, to my experience.</p>\n\n<h1>Last words on defining (and refining) your models</h1>\n\n<p>When designing your product, be aware of your users\u2019 mental models and recognize that your own will be very different from theirs. This is an overwhelmingly common mistake.</p>\n\n<p>You should also be aware of user and market contexts to judge what aspects of their models you may break and which you should keep. Don\u2019t break the model just to be different if the difference provides no value or delightful experience for a user.</p>\n\n<p>Lastly, designers must understand that users will have wildly varying points of reference, so presumed models need to be tested with multiple different users before the direction of the product design is settled upon. Failure to do this will put the success of the product at risk.</p>\n","summary":"A few things to keep in mind.","illustration":null,"illustration_alt":null,"tags":["design","design-process","design-thinking"],"shallow":false,"date":"2014-12-30T00:00:00Z"},{"id":"2014/12/28/lessons-learned-three-years-running-a-software-consultancy","title":"Lessons Learned - Three years of running a software consultancy","dockyarder":"brian-cardarella","body":"<p>This year&#39;s story is one of how we nearly went out of business <em>twice</em> yet\nstill managed to pull off our most successful year yet.</p>\n\n<h2>People</h2>\n\n<p>In 2013, we ended the year with 11 employees. We made a key hire at the start of the year with <a href=\"http://twitter.com/rwjblue\">Robert\nJackson</a> joining us. I had met Robert a few\nmonths prior at <a href=\"http://burlingtonrubyconference.com/\">Burlington Ruby\nConf</a>. Robert had been\ncontributing to a few of our Ember libraries, as well as making a name\nfor himself by quickly moving up the contributors list in Ember.js\nitself. Less than four months after we hired Robert he was welcomed onto\nthe Ember.js Core Team. I&#39;m extremely proud of him accomplishing\nthat.</p>\n\n<p>We added depth to our design team in Q1 2014 with <a href=\"http://twitter.com/rgbcolor\">Maria Matveeva</a>\nand <a href=\"http://twitter.com/imakemusic\">Tim Walsh</a>. Tim and Maria have been\ninvaluable for us, their dedication and ability allows you to easily\nforget how young they are. I&#39;m looking forward to seeing how they\ncontinue to grow in 2015.</p>\n\n<p>Early in 2014, we hired our first Project Manager, <a href=\"https://twitter.com/jon_lacks\">Jon\nLacks</a>. Jon and I went to college\ntogether, and historically I have not had a good run of\nworking with friends. That has been my fault, I think I was more\ninterested in working with people I was friends with than establishing\nwhat their responsibilities would be. Jon and I agreed that any and all\npotential issues that may arise that could conflict with our prior\nrelationship should be aired out immediately. Jon joined\nDockYard in February and spent the first month or so observing our team\nmore than taking complete ownership of our process. I gradually handed\noff some of what I was managing to Jon (running standups, getting involved with\nsome client meetings, helping with estimations). All this to say that\nadding a dedicated PM was one of the highest impact decisions I made in\n2014. I suspect that many companies don&#39;t need one until they&#39;re around\n10 people in size but once you do hire one you&#39;ll be thankful.</p>\n\n<p><a href=\"https://twitter.com/i_am_romina\">Romina Vargas</a> and <a href=\"https://twitter.com/Linstula\">Lin Reid</a> were two engineers that went through our\nintern program and we upgraded them to full-time as soon as we could.\nBoth Lin &amp; Romina have been important members of some of our larger\nclients projects in 2014.</p>\n\n<p>Marin Abernethy, a former engineering intern, came back for her third (and final)\ninternship with us after her graduation from college.\nIn the Fall we hired her as a full-time engineer.</p>\n\n<p><a href=\"https://twitter.com/netopwibby\">Paul Webb</a> interviewed with us in early 2014 but we had some projects\nfall through and things got very tight for us (more on this later) so we\nhad to pass. But as soon as we had the bandwidth we brought Paul onboard\nto our UX Development team.</p>\n\n<p>Heading into the Summer, we started to get spread a little thin on the\nengineering team. I had come off of client work completely to focus on\nthe business so we needed another Senior level engineer. I reached out\nto <a href=\"https://twitter.com/edeblois\">Estelle DeBlois</a>, who had come to our\n<a href=\"http://wickedgoodember.com\">Wicked Good Ember</a> conference in June.\nShe&#39;s been lead developer for one of our larger clients over the past\nfew months.</p>\n\n<p>Our final hire starts full-time with us in January. <a href=\"https://twitter.com/ashleytreni\">Ashley\nTreni</a> was actually tending bar at\n<a href=\"http://www.highballboston.com/\">Highball Lounge</a> right next door to our\noffice (they can see us, we can see them). She asked what we did and it\nturns out that she is an amazing designer who was completing her Masters\nin Information Design and Visualization at Northeastern. She did a summer internship with us and\naccepted our offer for full-time employment just recently.</p>\n\n<h3>Hiring is hard</h3>\n\n<p>Hiring continues to be hard. We have had success by focusing on\ntechnology niches, but we may have tapped that out. Going into 2015, we\nwill have to consider how do we reach out and attract top talent,\n<em>and</em> how do we improve the existing talent we have. Promoting from within\nis something I&#39;ve talked a big game about but have done little with.\nThis will change in 2015.</p>\n\n<p>I began 2014 with the same trend I had in the previous two years: I\nwould hire good people even if we didn&#39;t have projects to put them on.\nComing out of Q1 2014, I had to stop this immediately. While we had built\nup a great team, the weight of that payroll and our lack of cashflow at\nthe time was at a breaking point where I could no longer cover the\ndifference by taking myself off salary. Since then I have been very\nconservative with hiring. Unfortunately we actually missed out on some\ngreat people because of this, and I regret that as I was perhaps <em>too</em>\nconservative in our hiring at the time. Heading into 2015, this will\nprobably continue to be an aspect of the company I will continue to\nimprove.</p>\n\n<h3>Firing still sucks</h3>\n\n<p>I had to fire two employees in 2014. Firing always sucks and I don&#39;t\nthink I&#39;ll ever get used to it. There is a guilt that is attached that\nat some point is out-weighed by whatever you&#39;re not getting from said\nemployee. So how does one mitigate the guilt? <a href=\"http://www.slideshare.net/reed2001/culture-1798664?ref=https://gigaom.com/2013/01/29/netflix-company-culture/\">Netflix has a great\npolicy when it comes to firing\nemployees</a>.\nThe document outlines their full cultural philosophy but the gist of how\nthey fire is that they give a very generous severance package. So\nmanagers don&#39;t concern themselves with the guilt what will happen to\nthis employee without their job. I think this is a great idea, but not\nalways practical for all companies. If we had Netflix money then I would\ndefinitely align our severance package with theirs.</p>\n\n<h3>Culture</h3>\n\n<p>We&#39;ve done a lot of work to define what the culture of DockYard actually\nis. Until Q4 2014 our culture was never written in stone. So we took\nsome time to put it into words:</p>\n\n<ul>\n<li>strong problem solvers, with attention to detail</li>\n<li>coachable learners and willing mentors</li>\n<li>professional, kind and respectful</li>\n<li>collaborative team players</li>\n<li>disciplined</li>\n<li>reputation</li>\n<li>diverse</li>\n<li>fun</li>\n</ul>\n\n<p>I&#39;m sure you&#39;re looking at this list and thinking &quot;yeah this is pretty much what every company will say&quot;.\nThat could be true, but these are going to be our hiring and retention criteria. We will be building a team around \nthese principles and expect everyone at DockYard to live up to them.</p>\n\n<h3>Heading into next year</h3>\n\n<p>We have a goal of expanding our team to over 25 by the end of 2015. I\nwould actually prefer to be closer to 30. Our hiring will be focused on\nSenior Level talent for engineering, design, and UX. We&#39;re always interested\nin <a href=\"mailto:jobs@dockyard.com\">hearing from great people, get in touch if you&#39;re\ninterested</a>.</p>\n\n<h2>Estimations</h2>\n\n<p>Our problems with maintaining our estimations were not significantly\nimproving in early 2014. We had to eat a lot of money on contracts that\nwas due either to bad estimations or our inability to properly manage our\nclients. If we ever expected to build a real company, this had to be\nfixed. This is where Jon came in as our first Project Managing hire. It\ntook a few months but we&#39;ve gone from being consistently late to being\nconsistently early. Our estimations are currently one of the more\nreliable aspects of our business. This has not just helped relationships\nwith existing clients but being able to reliably sell our services to\nnew clients is incredibly powerful.</p>\n\n<h3>Heading into the next year</h3>\n\n<p>I suspect we will continue to hone our ability to estimate. We will also\nbe looking to hire an additional Project Manager as we decided we don&#39;t\never want to spread a PM over more than three projects.</p>\n\n<h2>Financials</h2>\n\n<p>In 2013 we ended the year with $1.7m in revenue with about 20% profit\nmargin. This year we improved that to $3.1 in revenue with 33% profit\nmargin. This is a significant jump, in many ways I&#39;m incredibly proud of\nwhat we were able to accomplish this year. However, I also know that we\n(as a company) underperformed. If we had been as productive in the first\nhalf of the year as we were in the second half we should have been\ncloser to a $4m+ company with &gt;50% profit margin.</p>\n\n<h3>What went wrong</h3>\n\n<p>We were getting contracts coming in through the year, but nothing with\nthe challenge or scope that I was hoping for. Small $50k contracts here\nand there. I like working on small projects but from a business\nperspective we were burning too much time negotiating contracts,\nbalancing people on and off between contracts. I was butting heads with\nour business developer. He and I had different ideas on how to run the\ncompany. The funny thing is that neither of us were wrong. He wanted to\nreduce price due to lack of the demand we had at the time. I didn&#39;t want\nto do that. I was willing to pass on contracts that we could have\ngotten if we cut our rate 25%. This eventually put us in a position of\nbringing in 0% of billings for more than 50% of the company rather than\n75% of billings. Which would you rather have?</p>\n\n<p>I&#39;m sure there are people reading this was a deeper background in\nrunning a business than saying it was stupid not to take the 75%. Here\nis my problem: at that amount we weren&#39;t making any profit and our\npeople were tied up on projects. I was tired of living hand to mouth, I\nhad taken myself off of payroll consistently for the past few years. I\nwas living off my wife&#39;s salary.</p>\n\n<p>At the end of Q1 I was looking down the barrel of DockYard and not\nliking what I was seeing. Then we got a whale of a contract come our\nway. This was a contract that could right the ship. Or so I thought.</p>\n\n<p>I was not heading up the contract negotiations. The only criteria I gave\nwas what I thought our rate should be for this contract. When it came to\nit our business developer was not confident that we could get that rate.\nI was distraught. I was not willing to lock DockYard into a long-term\ncontract at cost. I told my wife at dinner I was going to start looking\nfor a &quot;real job&quot; and that DockYard was finished.</p>\n\n<p>I didn&#39;t sleep. I stayed up and kept mulling over the contract, was this\nit? I came to several conclusions:</p>\n\n<ol>\n<li>The client could afford our rate.</li>\n<li>We were worth the rate.</li>\n<li>Our business developer did not believe in #2</li>\n<li>I should be handling contract negotiations for DockYard</li>\n</ol>\n\n<p>I came into work that morning. Within a span of 15 minutes I fired our\nbusiness developer and landed the client at the rate we felt we\ndeserved.</p>\n\n<p>I realize the above might seem indifferent to letting someone go. He and\nI actually got along very well on a personal level. But as I mentioned\npreviously when it came to how to run DockYard we didn&#39;t see eye to eye.\nI was stressing out over this constantly and in the event I was not able\nto land this client on my own at the very least I could say that I went\nout my way. Egotistical? Yes, of course. But it is something I needed to\ndo. If we had slowly died over the rest of 2014 due to no real profit\nmargin I would have quit.</p>\n\n<p>This was the first of two near-deaths for DockYard this year. The second\nwould come just two months later.</p>\n\n<p>The large client came with a large legal team, one that I was unprepared\nfor handling properly. We have an excellent lawyer we&#39;re working with\nbut I am accustomed to contract negotiation taking maybe a week. This\ntook months to complete.</p>\n\n<p>The problem with dealing with Enterprise companies is that they can\noutlast you. It isn&#39;t their intent to do so, it is in their best\ninterest that their vendors are able to work on what they need to the\nbest of the vendor&#39;s ability. It doesn&#39;t help either party if the vendor\ncan&#39;t make payroll. However, because of how many Enterprise companies\nare structured, and who has to sign off on what, an unprepared small\nvendor can be put into a position of agreeing to some things that are not\nin its best interest so it can start getting paid ASAP.</p>\n\n<p>I was perhaps too  risky in this regard. I held out on the contract, I\nput it through multiple rounds of negotionation. There was some legit\nscary stuff in it that I was not willing to agree to. We had started\nwork with the client before the contract was completed. At the time I\ndidn&#39;t consider this to be a big risk.</p>\n\n<p>What happened was that there was little to no incentive to speed up the\ncontract signing for our client. We were working, doing what they\nwanted, and they had no obligation to pay us. I realize some of you are\nreading this and thinking &quot;Rookie Move!&quot; but consider the context.\nStarting work with large clients prior to contracts being completed is\nactually a common practice in the Enterprise. I hear some of you\nscreaming &quot;no it isn&#39;t!&quot;. Yes, it is.</p>\n\n<p>We ran out of money. We had a payroll that we were $25k short for. I had\na very difficult conversation with the client and made the tough\ndecision to stop work until the contract was signed and our existing\ninvoices were immediately covered. I made a personal loan to DockYard to\ncover payroll. (as a side-note, banks never loan you money when you need\nit) Thankfully the client saw the situation for what it was and we were\nable to move forward. This was in June.</p>\n\n<p>Putting the brakes on the project and getting the contract done and\ngetting paid was the turning point for DockYard. We went from invoicing\non average $30k/week to over $100k/week. With no contract longer than\nNet-30 by August we had all of our debts paid off and were in a position\nto hire again. By November we had gone from a 1% profit margin for the\nyear in June to over 25%.</p>\n\n<p>It is actually strange writing about this now, and I&#39;m not entirely\ncertain I should have written all of this. In some ways it was one of\nthe most stressful times in my life, and looking back it feels surreal.</p>\n\n<p>I hope there are some nuggets of knowledge in here to help others avoid\na similar situation.</p>\n\n<h3>Heading into next year</h3>\n\n<p>We have ambitious financial goals. We aim for a $5m+ business in 2015. A\n$10m+ business in 2016, each year with &gt;25% margin. If we can maintain our current momentum we\nshould easily meet 2015&#39;s goal.</p>\n\n<h2>Technology</h2>\n\n<h3>Ember.js</h3>\n\n<p>We bet very heavily on <a href=\"http://emberjs.com\">Ember.js</a> in 2013. That bet\nhas paid off very well for us in 2014. The client mentioned above hired\nus for our expertise in Ember.js. We landed another great client in the\nSummer because of Ember.js. We are seeing a steady flow of work come in\nbecause of Ember.js but I don&#39;t think we can meet our $5m goal by\nrelying on inbound leads from Ember.js.</p>\n\n<p>One thing we&#39;ve never dealt with is selling our services into another\ncompany. We&#39;ve got most work by companies making a technology decision then\nfinding who is good at working with said technology. How do you convince\na company unfamiliar with Ember.js that it is what they should use to\nbuild their product with? What if this person is not technology savvy?</p>\n\n<p>I came to the conclusion that you cannot sell Ember.js directly. I\nneeded help with building a sales pipeline and sales pitch. A friend put\nme in touch with <a href=\"https://www.linkedin.com/pub/lorne-cooper/0/9a6/811\">Lorne\nCooper</a> who I have\nbeen working with over the past two months. Lorne convinced me that I\nhad sales backwards. We need to start with Marketing. (he also convinced\nme that I couldn&#39;t sell Ember.js)</p>\n\n<p>So what we built was the DockYard marketing funnel. Working backwards\nfrom Ember.js, we broadened the funnel. If the answer is: <strong>Ember.js</strong>\nthen the question should be <strong>What is the best Single Page App\nframework?</strong> (let&#39;s save tech debates for another time). I didn&#39;t feel\nthat selling SPAs was any better than selling Ember.js. Again, the\nanswer is <strong>Single Page Apps</strong> so the question should be <strong>How do you\nprovide a modern user experience on the web?</strong>. Now were had something.\nSelling UX as a solution to companies was tangible. If we could market\nthat UX improvements was the way to solve common problems in modern web\napps then we could hook companies on the idea that Single Page Apps was\nthe best way to deliver modern UX. If we could convince companies on\nSPAs then we have the chance to convince them that Ember.js is the best\nframework for building out SPAs. At this point we have to make a case\nthat DockYard is the best company as building Ember.js applications. We\nnow had our marketing funnel. We plan on putting this funnel to the test\nin early 2015, but don&#39;t expect any significant number of qualified\nleads to be produced until late 2015, more likely early 2016.</p>\n\n<h3>Elixir</h3>\n\n<p>While we are not currently writing any <a href=\"http://elixir-lang.org\">Elixir</a> apps I think \nit will be part of our offerings around Q3 2015. Specifically because of\nthe <a href=\"http://www.phoenixframework.org/\">Phoenix Framework</a> being very\nsimilar to <a href=\"http://rubyonrails.org\">Ruby on Rails</a> I think we should be\nable to ramp upon it quickly.</p>\n\n<p>The other choices I considered looking into were\n<a href=\"http://golang.org\">Go</a> and <a href=\"http://www.rust-lang.org/\">Rust</a>. Elixir\nfeels like the best of the three to me. It is far less popular than the\nother two but considering it is backed by Erlang and boasts the most\napproachable syntax, has meta-programming, concurrency, and is built for\nfault tolerance I feel of those three language Elixir is the best suited\nfor the future. Of course, this is a gamble and time will tell.</p>\n\n<h3>Ruby on Rails</h3>\n\n<p>Our involvement with Ruby on Rails will never go away completely but I\ndon&#39;t see Ruby or Rails being a serious part of our technology identity\nin the future. I would like to think that we were out with a bang\nthough, in early 2014 we were selected to redesign\n<a href=\"http://rubygems.org\">RubyGems</a>. We launched the redesign at\n<a href=\"http://rubyconf.org\">RubyConf</a> and it was a nice way to say &quot;thank-you&quot;\nto a community that we&#39;ve benefited from for so long.</p>\n\n<h3>Heading into next year</h3>\n\n<p>I always want DockYard to be a company that does not stagnate on\ntechnology. I enjoy working with and exploring new technology and I\nalways want to push our engineering team to do that same. In the near\nfuture I think Ember.js and Elixir will be important for us, of course\nwe must be open-minded enough about new technology on the horizon.</p>\n\n<h2>Design</h2>\n\n<p>Design has become so essential to our process I don&#39;t understand how we\ngo by in the early years without a dedicated design team. We rely upon\ndesign to manage our Discovery Phase, build and inform our estimations.\nDesign has more impact on us converting a client out of Discovery to a\nfull client than engineering does.</p>\n\n<h3>UX East</h3>\n\n<p>This year we ran our first Design conference, <a href=\"http://uxeast.org/\">UX East</a>.\nIt was structured as a design camp with two talks and one workshop.  The conference was organized by our Creative Director Steven Trevathan\nand Maria Matveeva we believe we were hugely successful.</p>\n\n<p>We&#39;re already beginning plans for next year&#39;s UX East (you can sign up for\nupdates, including call for proposals, <a href=\"http://eepurl.com/_NCUL\">here</a>).</p>\n\n<h3>Team Structure</h3>\n\n<p>Every project is now assigned at least two designers. This is partially\nbecause the projects are big enough to merit the team, but it&#39;s also a huge\nqualitative add to the final delivery. Pairing designers is really helpful for &quot;leveling up&quot; as well. Matching\ndesigners by their different strengths they&#39;ll help each other grow. The\nconcept is very similar to pair programming, however the designers go\nthrough many rounds of critiques instead of using the same computer for an\nextended period.</p>\n\n<p>While we hadn&#39;t previously done this, and it looks like a fairly obvious\nimprovement to make, the result has been surprisingly positive and our most\nrecent projects are seeing a huge benefit from it.</p>\n\n<h3>Setting Goals &amp; Sticking To Them</h3>\n\n<p>One thing we&#39;re very good at is coming up with ideas. Lot&#39;s of them. There is\nno shortage there, however there is a real challenge in effectively using down\ntime and DockYard Fridays to commit to delivering on those ideas. I believe\nthis is due to not having specific departmental goals that directly fit into\ncompany annual or quarterly objectives.</p>\n\n<p>An example of this challenge is <a href=\"http://toolsofthetrade.dockyard.com/\">Tools of the Trade</a>.\nIn the beginning of 2014 we put effort into creating small and novel icon packs\nand distrubuting them as free to use. It generated some interest, and we had\nfun with our icons, but we dropped the ball and lost momentum on it. Not because\nwe didn&#39;t enjoy making them or that it didn&#39;t benefit our designers by the\nchallenge, but because it didn&#39;t fit cleanly into any company objective.</p>\n\n<p>We&#39;ve set a Q1 2015 goal to create a program and agenda for design experimentation\nwith a focus on single page web applications. By that objective we&#39;ll be aiming\nto provide more practical design tools, design and interaction patterns, and free\nassets for other designers in creating single page web applications. By commiting\nto this goal and using Tools of the Trade as vehicle, we should be able to promote\nourselves, &quot;level up&quot; our designers, and effectively utilizing downtime.</p>\n\n<h2>Business</h2>\n\n<p>On the business side of things we&#39;ve begun to add more structure to DockYard. We hired a CEO coach \nto take us through an OGSM (Objectives, Goals, Strategies and Measures)\nplanning session for 2015. It was a tiring two days of time that helped\nus discover what type of company we want to be. The management team has\nall decided that DockYard should aim big and that is what we&#39;re going to\ndo.</p>\n\n<h3>Office Space</h3>\n\n<p>In Q2 2015 we&#39;ll be moving into a new office space. Our current space\nhas served us well but it has its problems. The new space will be\nmodern and have plenty of space for us (we&#39;re upgrading from 2,800 sq/ft to\n7,800 sq/ft). I&#39;m excited to share those plans in the upcoming months.</p>\n\n<h2>Wrapping Up</h2>\n\n<p>I hope this year&#39;s reflection has been useful for you in some way. Each\nyear&#39;s summary has felt different and I&#39;m sure next year&#39;s will too. As\na company DockYard has taken some knocks this year but we came out\nstronger for it with more focus and an actual gameplan. I&#39;d love to hear\nother&#39;s experiences as well in the comments.</p>\n","summary":null,"illustration":null,"illustration_alt":null,"tags":["opinion","business"],"shallow":false,"date":"2014-12-28T00:00:00Z"},{"id":"2014/12/26/pattern-matching-in-elixir-for-rubyists","title":"Pattern Matching in Elixir for Rubyists","dockyarder":"brian-cardarella","body":"<p>This is the first in a series of posts for helping Ruby devs understand\nsome of the concepts in Elixir.</p>\n\n<h2>Pattern Matching</h2>\n\n<p>Pattern Matching is one of my favorite Elixir features. Let&#39;s take a\nlook. (using an <a href=\"http://elixir-lang.org/getting_started/7.html#7.2-maps\">Elixir\nMap</a>)</p>\n<div class=\"highlight elixir \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>%{foo: bar} = %{foo: &quot;baz&quot;}\n</pre></td>\n</tr></table>\n</div></div>\n<p>The above is matching a pattern. Don&#39;t think of <code>=</code> as assignment, you\nshould think of <code>=</code> as <em>equality</em>. The left-hand side of the <code>=</code> is\nequal to the right-hand side. Through pattern matching the variable\n<code>bar</code> is assigned the value <code>&quot;baz&quot;</code>. Consider:</p>\n<div class=\"highlight elixir \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>[foo, bar] = [1, 2]\n</pre></td>\n</tr></table>\n</div></div>\n<p><code>foo</code> is assigned <code>1</code> and <code>bar</code> is assigned <code>2</code>. Patterns can match to\nany depth:</p>\n<div class=\"highlight elixir \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>[foo, bar, [baz]] = [1, 2, [3]]\n</pre></td>\n</tr></table>\n</div></div>\n<p>here <code>foo</code> and <code>bar</code> have the same value from the previous example but\n<code>baz</code> is now assigned the value of <code>3</code>. Alternatively if we had written:</p>\n<div class=\"highlight elixir \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>[foo, bar, baz] = [1, 2, [3]]\n</pre></td>\n</tr></table>\n</div></div>\n<p><code>baz</code> is now assigned the value of <code>[3]</code>. This would be an example of a\nsemi-greedy matcher. You can expand upon this to greedily match the\nentire statement:</p>\n<div class=\"highlight elixir \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>my_list = [1, 2, [3]]\n</pre></td>\n</tr></table>\n</div></div>\n<p>Now <code>my_list</code> greedily matched to the entire right-hand side of the\n<code>=</code>. So why is this cool? Let&#39;s take a look at a Ruby method that\nhas some conditions:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">def</span> <span class=\"function\">foo</span>(a, b, c)\n  <span class=\"keyword\">if</span> a == <span class=\"symbol\">:something</span>\n    ...\n  <span class=\"keyword\">elsif</span> b == <span class=\"symbol\">:other</span>\n    ...\n  <span class=\"keyword\">else</span>\n    ...\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>The above is likely something familar to many Ruby devs. This presents\nsome problems. Any methods with several code paths increases the\ncomplexity of the method. Complex methods can be difficult to test in\nisolation. Let&#39;s take a look at how this would be implemented in Elixir:</p>\n<div class=\"highlight elixir \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n</pre></td>\n  <td class=\"code\"><pre>def foo(:something, b, c) do\n  ...\nend\n\ndef foo(a, :other, c) do\n  ...\nend\n\ndef foo(a, b, c) do\n  ...\nend\n</pre></td>\n</tr></table>\n</div></div>\n<p>The first question Ruby devs have is <em>why are there three functions of the same\nname?</em> In Elixir you can define multiple functions of the same name as\nlong as the function signatures are unique. Functions are matched\nagainst the values passed in. So <code>foo(:something, 2, 3)</code> would match the\nfirst <code>foo</code> defined. <code>foo(1, :other, 3)</code> matches the second. <code>foo(1, 2,\n3)</code> matches the third. Match priority is the order in which the\nfunctions are defined.</p>\n\n<p>Now our functions are concise, and focused on the very specific\nbehavior. The conditional is obfuscated through the pattern matching but\nthis is a common design pattern in Elixir so it should be embraced.</p>\n\n<p>The pattern matching can be more complex:</p>\n<div class=\"highlight elixir \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre>def foo(%{foo: bar}, &quot;baz&quot;) do\n  ...\nend\n</pre></td>\n</tr></table>\n</div></div>\n<p>The above will match: <code>foo(%{foo: &quot;zeb&quot;}, &quot;baz&quot;)</code> but would not match\n<code>foo(%{foo: &quot;zeb&quot;}, &quot;bar&quot;)</code> because the second argument does not match.</p>\n\n<p>Take a look at the <a href=\"http://elixir-lang.org/getting_started/4.html\">Elixir Pattern Matching\nGuide</a> for more\ninformation.</p>\n","summary":null,"illustration":null,"illustration_alt":null,"tags":["elixir","ruby"],"shallow":false,"date":"2014-12-26T00:00:00Z"},{"id":"2014/12/12/importance-of-process","title":"The Importance of Process, and Why It Matters","dockyarder":"paul-webb","body":"<p>I joined DockYard in April of this year, after leaving a small startup. Before that, I was at another\nstartup and doing lots of freelance/agency work. In all of these places, there was never an existing\nprocess in place, aside from what was in my head. For better or worse, this was fine and allowed me to\nget work done. What I have learned since joining DockYard however, is that my old method of working is\ndangerous for a bigger company and just does not work.</p>\n\n<p>Initially, I resisted changing my process, like a fool/jerk. Why should I? My process has worked for\nyears, it was inherently superior! <em>Obviously</em>, this was not true. I got too comfortable with how I\nhad been coding and ignored requests to learn about <a href=\"http://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax\">BEM syntax</a> and organizing my CSS in a different order. Applying most\nof these new techniques to my own personal projects allowed me to see the usefulness to our UX team&#39;s\n(evolving) process. It was then that I realized, process is not about you or I, it is about the team.</p>\n\n<p>If I am working on a project for six months and spin off to another project, another UX developer can\npick up where I left off and understand the code I have written. If everyone wrote code the way they\nfelt like, there would be so much time lost (and wasted) trying to figure out what the original coder\nmeant when they wrote something. Money would be lost as well because time would not be spent on doing\nactual work.</p>\n\n<p>Process improves productivity and productivity allows the team to gain a better understanding of what\nis possible for the company as a whole. Which, in the long run, creates better opportunities and\nprojects for all of us.</p>\n\n<h4>TL;DR</h4>\n\n<p>Be open to new ideas about process. If it does not make sense to you, apply it to your own work before\ncompletely dismissing it.</p>\n","summary":null,"illustration":null,"illustration_alt":null,"tags":["opinion","process"],"shallow":false,"date":"2014-12-12T00:00:00Z"},{"id":"2014/11/30/htmlbars_calling_all_testers","title":"HTMLBars: Calling All Testers","dockyarder":"robert-jackson","body":"<p>HTMLBars support has landed in Ember&#39;s canary channel thanks to the tireless work\nof the HTMLBars team. Make sure to chat them up at <a href=\"http://emberconf.com/\">EmberConf</a> (you\nare going right?!?!) for some war stories.</p>\n\n<p>We are nearing the end of the 1.9 <a href=\"http://emberjs.com/builds/#/beta\">beta cycle</a> (aiming for 2014-12-06)\nwhich means we will be making the go / no-go decision on all pending features in Canary when we branch\nfor the next beta cycle. Clearly, we would all love to have 1.10 use HTMLBars.</p>\n\n<p>In order to enable the HTMLBars feature flag in the 1.10 betas (shipping around 2014-12-09), we need\nhelp confirming that no major issues exist. This is where <em>you</em> come in!</p>\n\n<h3>Using Canary Builds with Ember CLI</h3>\n\n<p>Upgrading to the canary channel with Ember CLI is very straightforward.</p>\n\n<h4>Update Bower</h4>\n\n<p>Run the following:</p>\n<div class=\"highlight bash \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n  <td class=\"code\"><pre>rm -rf bower_components\nbower install --save handlebars#~2.0.0\nbower install --save ember#canary\nbower install\n</pre></td>\n</tr></table>\n</div></div>\n<p>Bower also prompts you to confirm various &quot;resolutions&quot; that it is unsure of. Make sure you\npick <code>ember#canary</code> and Handlebars 2.0 if prompted.</p>\n\n<h4>Update NPM Dependencies</h4>\n\n<p>Run the following:</p>\n<div class=\"highlight bash \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n  <td class=\"code\"><pre>npm uninstall --save-dev broccoli-ember-hbs-template-compiler\nnpm install --save-dev ember-cli-htmlbars\n</pre></td>\n</tr></table>\n</div></div>\n<h4>Summary</h4>\n\n<p>Now we have successfully updated to the latest canary builds of Ember. Next up: HTMLBars.</p>\n\n<h3>Using HTMLBars with Ember CLI</h3>\n\n<p>Enabling HTMLBars is as simple as adding the following to your <code>config/environment.js</code> (under\n<code>EmberENV.FEATURES</code> section):</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n  <td class=\"code\"><pre>EmberENV: {\n  FEATURES: {\n    'ember-htmlbars': true\n  }\n},\n</pre></td>\n</tr></table>\n</div></div>\n<p>Now restart any running <code>ember serve</code> commands you have and you should be running with HTMLBars.</p>\n\n<h3>Report Issues</h3>\n\n<p>This part is critical: Please report any issues <a href=\"https://github.com/emberjs/ember.js/issues\">at GitHub</a>,\nespecially regressions from 1.8 or 1.9-beta. If your business has certain browser requirements (IE8 for example)\ntesting on those edge-case platforms today will help us resolve issues in time for 1.10.</p>\n","summary":null,"illustration":null,"illustration_alt":null,"tags":["ember","ember-cli","htmlbars"],"shallow":false,"date":"2014-11-30T00:00:00Z"},{"id":"2014/11/28/ember-wish-list","title":"Ember Wish List","dockyarder":"brian-cardarella","body":"<p>It&#39;s getting close to Christmas and I&#39;ve got a few things on my list for\nTomster Claus this year. All of my wishes are about making my\napplications smaller. One of the constant complaints I see about Ember\nis that it is &quot;too fat&quot;. You may not know this but this problem is\nsolveable and can actually grow alongside Ember to ensure your assets\nare a slim as they can be. On to the wish list!</p>\n\n<h3>Tree Shaking</h3>\n\n<p>Are you familiar with Tree Shaking? The concept is simple, a dependency\ngraph of your application is built. Let&#39;s say one of your files requires\n<code>A</code>, <code>B</code>, and <code>C</code>. And <code>A</code> requires <code>D</code>, and <code>F</code>. And <code>C</code> required <code>F</code>.\nCurrently with Ember CLI all files for all of your dependencies will get\nincluded in the final build. So if there is an <code>E</code> file it will be in\nthe final build even if you are not using it in any way, this is wasteful.\nWith ES6 the dependency graph can be built between your files, any files\nthat are not in the graph are not included in the final built. They are\n&quot;shaken&quot; out of the build process. This means a smaller footprint for your assets.</p>\n\n<p>There are two major hurdles to implementing this in Ember CLI right now.\nThe first is that doing a static analysis on the dependency graph may\nresult in false positives of what files to ignore for the build. While\nthere are many files that you are depending upon via the <code>import</code>\nstatement:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre><span class=\"reserved\">import</span> { foo, bar } from <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">baz</span><span class=\"delimiter\">'</span></span>;\n</pre></td>\n</tr></table>\n</div></div>\n<p>This is very easy to parse. But your application can also import\nresources via the Ember Resolver:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>container.lookup(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">model:foo</span><span class=\"delimiter\">'</span></span>);\n</pre></td>\n</tr></table>\n</div></div>\n<p>A few levels down a <code>resolveOther</code> function is called and <code>lookup</code> is\nturned into a <code>require</code>:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>require(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">my-app/models/foo</span><span class=\"delimiter\">'</span></span>);\n</pre></td>\n</tr></table>\n</div></div>\n<p>parsing this out is not as simple. We could just assume everything in\nthe app&#39;s namespace should be part of the final build, but when other\nlibraries are doing more complex tricks with importing this presents a\nproblem. For example, in the latest version of Ember Validations the\nvalidators themselves live in the <code>ember-validations</code> namespace. You can\noverride validators by placing them in your namespace. The lookup is\nsomething like this:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">function</span> <span class=\"function\">lookupValidator</span>(name) {\n  <span class=\"keyword\">return</span> container.lookup(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">validator:</span><span class=\"delimiter\">'</span></span>+name) ||\n    container.lookup(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">ember-validations@validator:</span><span class=\"delimiter\">'</span></span>+name);\n}\n</pre></td>\n</tr></table>\n</div></div>\n<p>How do we properly parse this out to include the correct validators in\nthe dependency graph? One solution might be for library authors to\ndeclare which files should always be included in the final build, but\nthis defeats the purpose of only including what is being used. If the\napplication is using the Presence Validator but not the Inclusion\nValidator why would I want those extra LOCs?</p>\n\n<p>The other major hurdle is Ember itself. While Ember&#39;s source is in ES6\nform the final build that you get is in AMD. Which means it is one file.\nEmber will have to be distributed in the original ES6 form. I am also\nnot a fan of the current package names. If this ever happens I would\nmuch prefer:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre><span class=\"reserved\">import</span> Component from <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">ember/component</span><span class=\"delimiter\">'</span></span>;\n</pre></td>\n</tr></table>\n</div></div>\n<p>rather than</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre><span class=\"reserved\">import</span> Component from <span class=\"error\">`</span>ember-views/views/component<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">;\n</span></span></pre></td>\n</tr></table>\n</div></div>\n<h3>Separate builds</h3>\n\n<p>Ember CLI is all or nothing right now. Which means that you have a\nsingle build pipeline for your application assets (<code>app-name.js</code>) and a single build\npipeline for 3rd party assets (<code>vendor.js</code>). It would be nice to define\nadditional assets that can be built into final files. For example, <a href=\"https://github.com/dockyard/ember-admin/issues/32\">this\nrequest for Ember\nAdmin</a>. Technically\nthis could be done right now but it would require some heavy hacking of\nthe vendor asset pipeline in Ember CLI. Personally I would like to see\nan API for this specifically. Perhaps it could be in the form of isolating a namespace to\nbe ignored in the <code>vendor.js</code> final concat but still output in the\n<code>dist/</code> directory.</p>\n\n<h3>Async code loading</h3>\n\n<p>This wish dove-tails off the previous one. Now that we have our separate\nassets how do we safely load them into our Ember apps? If we are\nisolating the assets I would think this implies they aren&#39;t meant for\nconsumption at application launch. Going back to the Ember Admin\nexample, not all users need those LOCs. Only when an authorized user\nhits the admin functionality should it pull down the Ember Admin assets\nand plug into the app. This would be ideal. The major hurdle here is\nwith how the container currently works. Perhaps something like this\ncould put it on the right track:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n</pre></td>\n  <td class=\"code\"><pre><span class=\"function\">resolveOther</span>: <span class=\"keyword\">function</span>(name) {\n  <span class=\"keyword\">if</span> (needAsyncLoad(name)) {\n    asyncLoad(name).then(<span class=\"keyword\">function</span>() {\n      <span class=\"comment\">// after this load completes the name</span>\n      <span class=\"comment\">// would be removed from the list of</span>\n      <span class=\"comment\">// resources requiring async loading</span>\n      resolveOther(name);\n    }\n  } <span class=\"keyword\">else</span> {\n    <span class=\"keyword\">return</span> require(name);\n  }\n}\n</pre></td>\n</tr></table>\n</div></div>\n<p>This would allow even further shrinking of the initial applicaiton\nfootprint. Only include what is necessary, async load other assets. This\ncreates the illusion of speed which is just as good as actual speed. You\nwill have the trade-off of periodic sections of your app with a longer\nthan normal loading state, but that should only happen once per\napplication instance.</p>\n\n<h3>Wishes to reality</h3>\n\n<p>Fulfilling these wishes should go a long way to negating the &quot;too fat&quot; argument for\nEmber. Here&#39;s to hoping that 2015 will see a more lean Tomster.</p>\n","summary":null,"illustration":null,"illustration_alt":null,"tags":["ember","opinion"],"shallow":false,"date":"2014-11-28T00:00:00Z"},{"id":"2014/11/18/we-did-it","title":"UX East Camp 2014","dockyarder":"steven-trevathan","body":"<p><a href=\"http://uxeast.org/\" title=\"UX East Camp\">We did it.</a> This weekend went far better than we ever could have imagined. We\u2019re grateful and maybe a tad bit emotional, so bear with us.</p>\n\n<p>The camp was initially intended as somewhat of a proof of concept, but became something much more real than that. Beyond proving that we are all willing to spend 3 days living with complete strangers, we experienced the unique value of the connections, friendships, and mentoring that this style of event facilitated. It turns out that the people who pay good money for and spend a whole weekend on such a unique social and learning environment are exactly the type of people who make it worthwhile. The need to learn, share, and be challenged by their peers is in their blood. This is who they are, and they\u2019re the people we want to bring together.</p>\n\n<p>It goes without saying: <a href=\"https://twitter.com/michelleyaiser\" title=\"Michelle Yaiser\">Michelle</a>, <a href=\"https://twitter.com/StayingInDroves\" title=\"Ed King\">Ed</a>, <a href=\"https://twitter.com/CalamityJD\" title=\"JD Jordan\">JD</a>, and <a href=\"https://twitter.com/benjordan\" title=\"Ben Jordan\">Ben</a> did much more than they were asked to and were the core of what made the camp so great. They shared their wisdom, challenged us to solve hilariously weird and unique problems, guided us, and befriended us. They poured their hearts into this and we are proud and humbled to have had them for our first UX East Camp.</p>\n\n<p>The event was a risk, but the speakers and attendees overwhelming proved to us that it can and should be done. So we\u2019re going to do it again.</p>\n\n<p>See you next year at UX East Camp, Spring 2015.</p>\n","summary":null,"illustration":null,"illustration_alt":null,"tags":["design","design-process","design-thinking","conferences","uxeast"],"shallow":false,"date":"2014-11-18T00:00:00Z"},{"id":"2014/11/18/rubygems-redesign","title":"Rubygems.org Redesign","dockyarder":"brian-cardarella","body":"<p><img src=\"/images/rubygems-redesign.png\" alt=\"rubygems-redesign.png\"></p>\n\n<p>Today I am very proud to announce that the DockYard-led redesign of\n<a href=\"http://rubygems.org\">rubygems.org</a> has been launched.</p>\n\n<p><a href=\"http://rubycentral.org\">Ruby Central</a> just announced and put into production a redesign of Ruby&#39;s\nmost popular community website during the Lightning Talk session at\n<a href=\"http://rubyconf.org\">RubyConf 2014</a></p>\n\n<p>The redesign effort was led by <a href=\"https://twitter.com/LoganFaerber\">Logan\nFaerber</a> and built out by <a href=\"https://twitter.com/acacheung\">Amanda\nCheung</a>. You can see how happy it has\nmade them.</p>\n\n<p><img src=\"/images/hooray-rubygems.jpg\" alt=\"hooray-rubygems\"></p>\n\n<p>We would have been lost without the guidance from Ruby Central folks <a href=\"https://twitter.com/evanphx\">Evan\nPhoenix</a>,\n<a href=\"https://twitter.com/dwradcliffe\">David Radcliffe</a>, <a href=\"https://twitter.com/indirect\">Andr\u00e9 Arko</a>. As well as some insight from <a href=\"http://twitter.com/qrush\">Nick Quaranto</a>.</p>\n\n<p>We were very fortunate to have been selected. We hope that everyone\nenjoys the new look!</p>\n","summary":null,"illustration":null,"illustration_alt":null,"tags":["design","ruby"],"shallow":false,"date":"2014-11-18T00:00:00Z"},{"id":"2014/11/12/bring-to-ux-east","title":"My project for UX Camp","dockyarder":"maria-matveeva","body":"<p>This weekend, I am heading to <a href=\"http://uxeast.org/\">UX East&#39;s camp</a> in Maine. It is kind of like a conference, except you also get the opportunity to work on your own project and get feedback from others while there. I am helping organize the event, and a large chunk of my time will be spent taking photos and helping with other random tasks, so I wanted to bring a project that\u2019s small and easy to manage.</p>\n\n<p><img src=\"/images/post-assets/maria/ux-east-sketches.jpg\" alt=\"\"></p>\n\n<p>My project is practicing how to quickly sketch ideas by hand.</p>\n\n<p>When I first started as a UX Designer at <a href=\"https://dockyard.com/\">DockYard</a>, I noticed how confident the other designers were at sketching. <a href=\"https://dockyard.com/team#logan-faerber\">Logan</a> just happens to be a <a href=\"https://dribbble.com/shots/1765074-UX-East-Icons?list=users&amp;offset=3\">kickass illustrator</a>, which helps. But still, I felt like I lacked confidence in comparison. I\u2019ve been trying to improve, but had not tried anything focused on sketching specifically yet.</p>\n\n<h2>Why is sketching useful?</h2>\n\n<p>Sketching is a great tool not only to produce work deliverable to the client (hand drawn wireframes are often part of the Discovery phase in our work) but also a way to think more clearly. If I can articulate an idea through a drawing, I have a good understanding of it. In the process of drawing something out, I also find the fuzzy areas that need more definition, and I am able to ask better questions as a result.</p>\n\n<p>Writing on a subject is similar to this exploratory sketching. By trying to write on a subject, I find unexplained pieces, and am forced to form my thoughts clearly. But writing only uses one aspect of an idea. Visuals are something else. I want to rely on both verbal (writing) and visual (drawing) thinking in my work.</p>\n\n<h2>How to practice?</h2>\n\n<p>I decided to focus on practicing only the skill to express a single idea through a very simple drawing. As an art supply enthusiast, it is easy for me to get carried away in selecting just the right pen, paper or color for a project. To counter this, I limited my tools: a clipboard, a single medium-weight black marker, and a sizable stack of half-sheets of printer paper.</p>\n\n<p>I further limited possible distractions by deciding not to focus on high quality, thoughtful drawings, and instead produce many simple drawings. For this reason, I will also not look for great reference material, but try to just get the visual idea down on paper quickly instead.</p>\n\n<p>I will also focus on actually drawing, rather than annotating. In the few practice drawings I made so far I resorted to writing the details I could not get into the drawing. It would be great to get away from this.</p>\n\n<p>When I finish one of these simple drawings, I will slide it to the bottom of the stack so I\u2019m ready to start another one. I will not focus on judging the results too quickly.</p>\n\n<p>At camp, I might share the drawings I make, and ask for feedback on how to make them more clear. Will they make sense? With some practice, I hope that they do.</p>\n\n<p>So, here\u2019s what I am working on. Pretty simple, and should be fun! I also asked a couple of colleagues what they are planning to do\u200a\u2014\u200aand here it is:</p>\n\n<h2>What Steve is working on</h2>\n\n<p>He&#39;s going to work on a video game idea that originally started as a web-comic at DockYard. In addition to that he&#39;s taking a look at some various prototyping tools (as well exploring InVision a little deeper).</p>\n\n<h2>What  Tim is working on</h2>\n\n<p>Tim has been working on a typeface that is targeted to be both practical and highly legible. He&#39;s hoping to gain some feedback from fellow campers and continue chipping away at the lowercase letterforms.</p>\n","summary":null,"illustration":null,"illustration_alt":null,"tags":["uxeast","user-experience","design","conferences","design-process"],"shallow":false,"date":"2014-11-12T00:00:00Z"},{"id":"2014/11/07/pitch-this","title":"Pitch This","dockyarder":"brian-cardarella","body":"<p>Here is something I probably shouldn&#39;t be admitting: I can&#39;t put\ntogether a sales pitch for my own company.</p>\n\n<p>It&#39;s not that I don&#39;t know what we do, I am intimately familiar with\nwhat we do. It&#39;s not that I don&#39;t believe in us, in fact we\nhave big growth plans for the next 3 years and I am certain we&#39;ll meet\nthem. It&#39;s just that I find it incredibly difficult to describe to\nothers in an &quot;elevator pitch&quot; what a software consultancy can offer\nwithout going down the &quot;technology&quot; rabbit hole.</p>\n\n<p>The exercise is: <em>if I were introduced to someone at a party, how do I convince them they should \nhire DockYard</em>? Funny enough, I can&#39;t do it. This is a very large\ndeficiency for me/my company right now. To date <strong>all</strong> of our\ncontracts have been from inbound sales. Which is great, but we need to\nbe able to sell our services to companies that don&#39;t yet know about us.</p>\n\n<p>So what does DockYard do? According to our current landing page <em>We\ncreate web &amp; mobile applications</em>. Which is 100% true, but if I told\nthis to you I doubt you&#39;d hire us. I asked other DockYard&#39;ers to try\ntheir hand at writing the DY pitch. To illustrate how difficult this is\nhere is what they came up with:</p>\n\n<ul>\n<li><em>DockYard designs and develops applications for people who have an idea and don&#39;t know what to do next</em></li>\n<li><em>We build web products, and focus on quality.</em></li>\n<li><em>We create software that helps people. A client can come to us seeking advice regarding software development practices or looking to implement a product he/she has been thinking about. Our main focus is delivering a solution that a client is happy with by using powerful visual design, best software engineering practices and latest technologies.</em></li>\n<li><em>We&#39;re a design and development shop specializing in really intuitive, responsive user interfaces. We work primarily with Ember.js, which is a JavaScript framework similar to Angular and Backbone. On the backend, we prefer a Rails backend and transactional database, which is more reliable than the NoSQL databases out there.</em></li>\n<li><em>DockYard leads projects from ideas to user-friendly products that are built by cutting edge technologies and methodologies. As a team, we put clients&#39; business goals in the forefront through the collaborative expertise of our designers and developers.</em></li>\n<li><em>DockYard helps business owners create web apps with the combined power of Ember and great design.</em></li>\n<li><em>We&#39;re a team of software designers and engineers deeply invested in producing the best solution to a challenge, rather than just the one that works.</em></li>\n<li><em>We do a lot of research before we start designing, so our projects are thought through. Designers have a lot of say in what we actually build, compared to other shops, so it makes the work more meaningful.</em></li>\n</ul>\n\n<p>Some of these go beyond the scope of a &quot;pitch&quot; but I think the message is clear: this is not an easy assignment. \nThe common theme is the focus on our expertise, which is a good angle. Expertise has been what defines DockYard.\nBut do all companies care about <strong>how</strong> we build? </p>\n\n<p>Currently nearly all of our clients get in touch with us because\nof our expertise in Ember.js. At that point the sale is\nactually quite easy. There aren&#39;t a lot of consultancies right now\nclaiming expertise in Ember. Amongst those firms I believe that\nDockYard is considered one of the top. So by the time the client\ncontacts us they have probably already decided to go with us. This is\ngreat but it paints us into a niche. We&#39;re missing out on the other\n99.99% of the opportunities that don&#39;t know about us.</p>\n\n<p>So how do some other software consultancies pitch? I don&#39;t know if it is\nfair to use the marketing tagline from their website as their &quot;pitch&quot;\nbut I think it is close enough for the purposes of this article. Let&#39;s\ntake a look:</p>\n\n<ul>\n<li><strong>Thoughtworks</strong> <em>We provide software delivery, pioneering tools and\nconsulting for organizations with ambitious missions.</em></li>\n<li><strong>Pivotal Labs</strong> <em>We transform how the world builds software.</em></li>\n<li><strong>thoughtbot</strong> <em>Our clients hire us to design and build their\nproducts. We focus on user outcomes and simplicity. We write code for\niOS, Android, and the web.</em></li>\n<li><strong>37signals</strong> <em>an elite team of expert web design and usability\nspecialists dedicated to simple, clear, and useable customer-focused\ndesign.</em></li>\n</ul>\n\n<p>I don&#39;t know if this really helps me or confuses me even more. These are\nall over the place, from general, to technology specific, to downright\nvague. Each of these companies have been very successful. How much of\ntheir success do they owe to their sales pitches? <strong>37signals</strong> (when\nthey were a consultancy) was famous for being a referral based business.\n(or at least advertising themselves as such) I don&#39;t know <strong>thoughtbot</strong>\nas well as I used to but I believe they still don&#39;t have any internal\nsales team. <strong>Thoughtworks</strong> and <strong>Pivotal</strong> both have sales/biz-dev\nteams. Their marketing lines are very vague, very &quot;wide-net&quot;. No help\nhere.</p>\n\n<p>It&#39;s sad to say but I am currently at a loss on how to effectively sell my own company. </p>\n","summary":null,"illustration":null,"illustration_alt":null,"tags":["opinion","business","marketing"],"shallow":false,"date":"2014-11-07T00:00:00Z"},{"id":"2014/10/30/motivation-vs-discipline","title":"Motivation vs Discipline","dockyarder":"brian-cardarella","body":"<p>We&#39;ve all seen the <strong>Motivational Posters</strong>:</p>\n\n<p><img src=\"/images/motivational-1.jpg\" alt=\"Motivate\"></p>\n\n<p>I always hear people talk about\n<strong>motivation</strong>. <em>What motivates you?</em> <em>I&#39;m lacking motivation.</em> Well I&#39;m\nhere to tell you that motivation is bullshit.</p>\n\n<p>Motivation may get you to take on a task or behavior that you don&#39;t\nnormally do but eventually that motivation will either not be there any\nmore or won&#39;t be effective. Then you&#39;ll slip, and you justify it by\nthinking <em>&quot;well I just lacked proper motivation&quot;</em>.</p>\n\n<p><em>Motivation</em> as a concept is a cop-out. If you feel that you need\nmotivation to accomplish your goals you will likely fail over the\nlong-term. Instead you should be looking toward discipline.</p>\n\n<p>There is a saying <em>&quot;it takes 3 weeks for a new behavior to become\nhabit&quot;</em>. If you haven&#39;t heard that before that&#39;s OK because it isn&#39;t\ntrue. According to research it actually takes <a href=\"http://www.huffingtonpost.com/james-clear/forming-new-habits_b_5104807.html\">on average 66 days of\ncontinual behavior to form a\nhabit</a>.\nSo ask yourself this. Can you use the same motivation for 66 days in a\nrow? If not, do you have that many different forms of motivation to form this\nnew habit over this period of time? I don&#39;t think many of us do.</p>\n\n<p>Discipline on the otherhand is you saying to yourself <em>&quot;I will do this\neven if I would prefer to do something else&quot;</em>. It&#39;s not an easy trait to\nestablish but if you can do so you&#39;ll find that making changes happen\nmore easily. I think many of us have a <em>will</em> to overcome existing habits and\nform new ones but we lack the <em>way</em> to do so. Too many distractions, too\nmany opportunities, too many excuses. Take a look at successful people\naround you. Ask yourself are they successful because of some outside\nmotivation or are they successful because they&#39;ve made a conscious\ndecision they&#39;re going to wade through the muck to get what they want.</p>\n\n<p>Focus on being disciplined instead of waiting to be motivated. </p>\n","summary":null,"illustration":null,"illustration_alt":null,"tags":["opinion"],"shallow":false,"date":"2014-10-30T00:00:00Z"},{"id":"2014/10/24/kss-your-styleguide","title":"KSS Your Styleguide Goodbye","dockyarder":"christopher-plummer","body":"<p>Styleguides are a place where developers and designers can find authoritative information about how elements are to be styled throughout a project. Contributors can always refer to a styleguide to help them create new pages and elements. Careful attention to a styleguide can prevent a contributor from designing or developing components that don&#39;t conform to the designers&#39; vision.</p>\n\n<p>Most styleguides are created by designers and developers prior to development to guide the translation of comps into code. In a perfect world, that styleguide is a living document that is updated as changes are made to the design. This often doesn&#39;t happen. As changes are made throughout a project&#39;s development cycle, the styleguide is rarely updated. At some point on almost every project, that styleguide is no longer a reliable, authoritative document.</p>\n\n<p>If only there was a better way...</p>\n\n<h2>Enter KSS</h2>\n\n<p><a href=\"http://warpspire.com/kss/\">KSS</a> is a methodology and set of tools that will help you create automated, living styleguides. Through the KSS menting syntax and the KSS parser, the guide can be updated automatically throughout the development cycle. All those little adjustments and decisions that happen in conversations outside your documented channels will be reflected in your KSS styleguide. In theory, the styleguide will show the most up-to-date styles. KSS styleguides also render element states like <code>:hover</code> as you can see in this <a href=\"https://github.com/styleguide/css/\">example from GitHub</a>:</p>\n\n<p><img src=\"/images/github-styleguide.jpg\" alt=\"GitHub Styleguide\"></p>\n\n<p>A KSS styleguide can be designed to reflect the look and layout of your project using existing styles:</p>\n\n<p><img src=\"/images/kss-styleguide-examples.jpg\" alt=\"Two KSS Styleguides\"></p>\n\n<p><strong>KSS isn&#39;t magic. It&#39;s not going to create the styleguide for you.</strong> You still have to do a lot of custom configuration and coding. Coding the styleguide starts with commenting your CSS. You have been leaving helpful comments for future developers all along, right? KSS <a href=\"http://warpspire.com/kss/syntax/\">defines a syntax</a> for these comments:</p>\n<div class=\"highlight sass \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\"><span class=\"delimiter\">//</span><span class=\"content\"> Short description of the element to be documented</span></span>\n<span class=\"comment\"><span class=\"delimiter\">//</span></span>\n<span class=\"comment\"><span class=\"delimiter\">//</span><span class=\"content\"> :hover             - description of this modifier.</span></span>\n<span class=\"comment\"><span class=\"delimiter\">//</span><span class=\"content\"> .disabled          - description of this state class modifier.</span></span>\n<span class=\"comment\"><span class=\"delimiter\">//</span></span>\n<span class=\"comment\"><span class=\"delimiter\">//</span><span class=\"content\"> Styleguide x.x.x. Section Name and/or Number</span></span>\n<span class=\"class\">.element-to-be-documented</span> {\n  ...\n  <span class=\"local-variable\">&amp;</span>:<span class=\"value\">hover</span>{\n    ...\n  }\n  <span class=\"local-variable\">&amp;</span>.<span class=\"key\">disabled</span>{\n    ...\n  }\n}\n</pre></td>\n</tr></table>\n</div></div>\n<p>A KSS parser like <a href=\"https://github.com/kneath/kss\">this one for ruby</a> parses the elements of those comments \u2013 the description, modifiers, and section \u2013 and applies it to a partial like this:</p>\n<div class=\"highlight erb \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n22\n23\n24\n25\n26\n27\n28\n29\n<strong>30</strong>\n</pre></td>\n  <td class=\"code\"><pre><span class=\"tag\">&lt;div</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">styleguide-example</span><span class=\"delimiter\">&quot;</span></span><span class=\"tag\">&gt;</span>\n\n  <span class=\"tag\">&lt;h3&gt;</span>\n    <span class=\"inline\"><span class=\"inline-delimiter\">&lt;%=</span> <span class=\"instance-variable\">@section</span>.section <span class=\"inline-delimiter\">%&gt;</span></span>\n  <span class=\"tag\">&lt;/h3&gt;</span>\n  <span class=\"tag\">&lt;div</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">styleguide-description markdown-body</span><span class=\"delimiter\">&quot;</span></span><span class=\"tag\">&gt;</span>\n    <span class=\"tag\">&lt;p&gt;</span><span class=\"inline\"><span class=\"inline-delimiter\">&lt;%=</span> markdown h(<span class=\"instance-variable\">@section</span>.description) <span class=\"inline-delimiter\">%&gt;</span></span><span class=\"tag\">&lt;/p&gt;</span>\n    <span class=\"inline\"><span class=\"inline-delimiter\">&lt;%</span> <span class=\"keyword\">if</span> <span class=\"instance-variable\">@section</span>.modifiers.any? <span class=\"inline-delimiter\">%&gt;</span></span>\n      <span class=\"tag\">&lt;ul</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">styleguide-modifier</span><span class=\"delimiter\">&quot;</span></span><span class=\"tag\">&gt;</span>\n        <span class=\"inline\"><span class=\"inline-delimiter\">&lt;%</span> modifiers.each <span class=\"keyword\">do</span> |modifier| <span class=\"inline-delimiter\">%&gt;</span></span>\n          <span class=\"tag\">&lt;li&gt;</span><span class=\"tag\">&lt;strong&gt;</span><span class=\"inline\"><span class=\"inline-delimiter\">&lt;%=</span> modifier.name <span class=\"inline-delimiter\">%&gt;</span></span><span class=\"tag\">&lt;/strong&gt;</span> - <span class=\"inline\"><span class=\"inline-delimiter\">&lt;%=</span> modifier.description <span class=\"inline-delimiter\">%&gt;</span></span><span class=\"tag\">&lt;/li&gt;</span>\n        <span class=\"inline\"><span class=\"inline-delimiter\">&lt;%</span> <span class=\"keyword\">end</span> <span class=\"inline-delimiter\">%&gt;</span></span>\n      <span class=\"tag\">&lt;/ul&gt;</span>\n    <span class=\"inline\"><span class=\"inline-delimiter\">&lt;%</span> <span class=\"keyword\">end</span> <span class=\"inline-delimiter\">%&gt;</span></span>\n  <span class=\"tag\">&lt;/div&gt;</span>\n\n  <span class=\"tag\">&lt;div</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">styleguide-element</span><span class=\"delimiter\">&quot;</span></span><span class=\"tag\">&gt;</span>\n    <span class=\"inline\"><span class=\"inline-delimiter\">&lt;%=</span> <span class=\"instance-variable\">@example_html</span>.gsub(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">$modifier_class</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"delimiter\">'</span></span>).html_safe <span class=\"inline-delimiter\">%&gt;</span></span>\n  <span class=\"tag\">&lt;/div&gt;</span>\n  <span class=\"inline\"><span class=\"inline-delimiter\">&lt;%</span> modifiers.each <span class=\"keyword\">do</span> |modifier| <span class=\"inline-delimiter\">%&gt;</span></span>\n    <span class=\"tag\">&lt;div</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">styleguide-element styleguide-modifier</span><span class=\"delimiter\">&quot;</span></span><span class=\"tag\">&gt;</span>\n      <span class=\"tag\">&lt;span</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">styleguide-modifier-name</span><span class=\"delimiter\">&quot;</span></span><span class=\"tag\">&gt;</span><span class=\"inline\"><span class=\"inline-delimiter\">&lt;%=</span> modifier.name <span class=\"inline-delimiter\">%&gt;</span></span><span class=\"tag\">&lt;/span&gt;</span>\n      <span class=\"inline\"><span class=\"inline-delimiter\">&lt;%=</span> <span class=\"instance-variable\">@example_html</span>.gsub(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">$modifier_class</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\"> </span><span class=\"inline\"><span class=\"inline-delimiter\">#{</span>modifier.class_name<span class=\"inline-delimiter\">}</span></span><span class=\"delimiter\">&quot;</span></span>).html_safe <span class=\"inline-delimiter\">%&gt;</span></span>\n    <span class=\"tag\">&lt;/div&gt;</span>\n  <span class=\"inline\"><span class=\"inline-delimiter\">&lt;%</span> <span class=\"keyword\">end</span> <span class=\"inline-delimiter\">%&gt;</span></span>\n\n  <span class=\"tag\">&lt;div</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">styleguide-html</span><span class=\"delimiter\">&quot;</span></span><span class=\"tag\">&gt;</span>\n    <span class=\"inline\"><span class=\"inline-delimiter\">&lt;%=</span> <span class=\"instance-variable\">@example_html</span> <span class=\"inline-delimiter\">%&gt;</span></span>\n  <span class=\"tag\">&lt;/div&gt;</span>\n<span class=\"tag\">&lt;/div&gt;</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>You&#39;ll also need to create a controller, a template, helpers, and a front-end KSS script to render the styleguide. It&#39;s a lot of up-front work, but there are examples and parsers already written for Node.js, Ruby, PHP, Sinatra, Rails, and so on.</p>\n\n<h2>Why use KSS?</h2>\n\n<p><strong>If standards, methodolgies, and tools are your thing, you&#39;ll like KSS:</strong></p>\n\n<ul>\n<li><p>The kss.js script can render elements with different states (called modifiers by KSS) directly in the styleguide blocks. For example, buttons with <code>:hover</code>, <code>:focus</code>, <code>:active</code>, states or even modifier classes like <code>.red</code>, <code>.is-active</code>, or <code>.disabled</code> will be automatically added to the styleguide allowing readers to see every possible state at once.</p></li>\n<li><p>CSS comments and styleguide documentation are bound together in the stylesheets, not some other styleguide-specific template. UX developers can comment the stylesheets they work in most while they&#39;re working in them.</p></li>\n<li><p>The styleguide templates can also include markup codeblocks, allowing readers to see the markup elements necessary to generate a component.</p></li>\n</ul>\n\n<h2>Why not use KSS?</h2>\n\n<p><strong>If you&#39;re in the &quot;tools are bullshit&quot; crowd, you&#39;re going to hate KSS:</strong></p>\n\n<ul>\n<li><p>Styleguides created with KSS are only as reliable as the CSS and markup used to generate them. If an element is changed in a way that no longer conforms to the design comps, the styleguide will no longer reflect the correct way that element is supposed to be styled. For example, a developer might change the border radius of a particular button for a new page and doesn&#39;t realize that he or she has just changed the base button style in the styleguide. Now the button entry styleguide is no longer a reliable representation of the styles established in the design comps.</p></li>\n<li><p>When elements are taken out of their context it can change how styles are applied. Elements have to be adjusted and changed just to appear correctly in the styleguide. This is work beyond what is strictly required to develop a site.</p></li>\n<li><p>Styleguide-only styles and markup might be confusing to developers joining a project. The rules and markup in the styleguide aren&#39;t necessarily the same rules or markup used in the site. When creating new elements that follow from a styleguide entry, simply copying the elements as they appear styleguide could cause layout and style problems.</p></li>\n<li><p>The KSS documention is spread out over many files. Nothing is centralized. Simply restructuring the styleguide, editing sections, or even adding new items requires sifting through many CSS files and templates. And when styles for elements are duplicated or spread across several pages, where do we put the documentation?</p></li>\n<li><p>Deciding what goes in the styleguide and how it is documented becomes another tangle of challenging questions. How do we describe this element? How to we organize the guide? What do we include?</p></li>\n</ul>\n\n<h2>KSS Is Just Another Thing</h2>\n\n<p>The strength of KSS \u2013 automation \u2013 is also the source of its weakness \u2013 mutable elements. If the styleguide can be updated automatically, it can also be sabotaged accidentally. The styleguide must be QA&#39;ed alongside the site to ensure that it conforms to the design comps and that it accurately illustrates elements as they appear in the actual site pages. Developers must take care to pay attention to styleguide-only rules and markup.</p>\n\n<p>You could generate a static styleguide in your comping tool of choice as a definitive reference against which to check the living styleguide. But then you&#39;re just creating more documents that must be updated. You haven&#39;t solved the original problem.</p>\n\n<p>Implementing KSS requires additional UX Development and Design resources (additional QA, more templates, styleguide-only styles, controllers, etc.), but may save resources spent creating and updating a static styleguide.</p>\n\n<p>KSS is not a perfect solution to the problem of maintaining living styleguides. You&#39;ll simply have to try it in your workflow to evaluate its utility.</p>\n","summary":null,"illustration":null,"illustration_alt":null,"tags":["tools","process","web-development"],"shallow":false,"date":"2014-10-24T00:00:00Z"},{"id":"2014/09/24/announcing-ux-east-camp","title":"Go: UX East's UX Camp","dockyarder":"steven-trevathan","body":"<p>We are pleased to announce <a href=\"http://uxeast.org/\">UX East&#39;s UX Camp</a>, a weekend of creative thinking, collaboration, and design in one big house on Nov 14\u201416th in <a href=\"https://goo.gl/maps/JPqdT\">Bryant Pond, ME</a>.</p>\n\n<p>This isn&#39;t a typical networking event or conference. We&#39;ll escape the busy and distracting city environment to focus on our craft alongside others interested in design. It&#39;s a project weekend, a getaway, and a mini\u2013conference all rolled into one. You&#39;ll work on whatever you like with the option of gaining creative input of others.</p>\n\n<p>The environment is intimate by design. There will only be 30 people at this event who you&#39;ll eat, sleep, and work alongside. On top of all this, there will be a workshop and a few talks available to all who attend.</p>\n\n<p>There are many more details to come, and I&#39;m excited to share them with you! Follow our <a href=\"https://twitter.com/ux_east\">UX East</a> twitter account or check back here for updates. If you&#39;re interested in taking part in the event in any capacity, please reach out to <a href=\"mailTo:steven@dockyard.com\">steven@dockyard.com</a>.</p>\n\n<p>See you all in Maine!</p>\n","summary":"A weekend of creative thinking and collaboration.","illustration":null,"illustration_alt":null,"tags":["design","design-process","design-thinking","conferences","uxeast"],"shallow":false,"date":"2014-09-24T00:00:00Z"},{"id":"2014/09/22/javascript-performance-for-the-win","title":"JavaScript Performance For The Win","dockyarder":"alex-navasardyan","body":"<p>JavaScript performance is a very hot topic nowadays. There&#39;s a lot of information out there on what\nbrowsers do with JavaScript code in order to execute it faster. Let&#39;s go over some of the tips that\nwill help you write faster JavaScript code.</p>\n\n<h2>Tooling</h2>\n\n<p>There&#39;re are couple of tools that you can use to identify and fix peformance problems. One of the\nthem is Chrome Developer Tools (open Chrome Developer Tools, switch to <code>Profiles</code> tab and click <code>Start</code>).\nDeveloper Tools will give you a great overview of what actual happens in your application under the hood\n(what functions are called, how much CPU time they consumed, how much memory). That&#39;s a great starting\npoint. Now you can start fixing performance where it matters.</p>\n\n<h2>Non-optimizable code</h2>\n\n<p><code>try-catch</code> and <code>try-finally</code> blocks will not be optimized by the V8 (to be clear, if the function contains\na <code>try</code> block, the whole function will not be optimized).</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\">// code</span>\n<span class=\"keyword\">try</span> {\n  iMightThrowFunc();\n} <span class=\"keyword\">catch</span>(exception) {\n  iHandleExceptions(exception);\n}\n<span class=\"comment\">// code</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>A better way of writing the code above, would be to isolate the <code>try</code> block into a separate function so <code>code</code>\ncan be optimized and only <code>iMightThrowFunc</code> would not be optimized:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">function</span> <span class=\"function\">iMightThrow</span>() {\n  <span class=\"keyword\">try</span> {\n    <span class=\"comment\">// [code]</span>\n  } <span class=\"keyword\">catch</span>(exception) {\n    iHandleExceptions(exception);\n  }\n}\n\n<span class=\"comment\">// code</span>\niMightThrow();\n<span class=\"comment\">// code</span>\n</pre></td>\n</tr></table>\n</div></div>\n<h2>Using Local Variables</h2>\n\n<p>If you&#39;re using a piece of code many times, it&#39;s better to create a local variable for it for a couple of reasons:</p>\n\n<ol>\n<li>faster scope look ups (once the variable is local scope, it&#39;s faster to retrieve it)</li>\n<li>caching (performing an operation once and storing the result will result in less work for the browser)</li>\n</ol>\n\n<h2>Literals</h2>\n\n<p>It might sound very obvious but you should use object literals whenever you can.</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\">// use</span>\n<span class=\"keyword\">var</span> array = [];\n<span class=\"comment\">// instead of</span>\n<span class=\"keyword\">var</span> array = <span class=\"keyword\">new</span> Array(<span class=\"integer\">16</span>);\n</pre></td>\n</tr></table>\n</div></div>\n<p>You rarely know what the size of the array is going to be in your application. Let V8 manage the growth\nof the array as you add items to it. It will also ensure that the array is in &quot;fast elements&quot; mode and\nitem access is always fast. You can read more about V8 object representation <a href=\"http://jayconrod.com/posts/52/a-tour-of-v8-object-representation\">here</a>.</p>\n\n<h4>&quot;Dictionary Mode&quot;</h4>\n\n<p>An object will go into &quot;dictionary mode&quot; when you add too many properties dynamically\n(outside constructor), <code>delete</code> properties, use properties that cannot be valid identifiers.</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">function</span> <span class=\"function\">forInFunc</span>() {\n  <span class=\"keyword\">var</span> dictionary = {<span class=\"key\"><span class=\"delimiter\">'</span><span class=\"content\">+</span><span class=\"delimiter\">'</span></span>: <span class=\"integer\">5</span>};\n  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> dictionary);\n}\n</pre></td>\n</tr></table>\n</div></div>\n<p>When you use an object as if it was a dictionary, it will be turned into a dictionary (hash table).\nPassing such an object to for-in is a no no.</p>\n\n<h4>Iterating over a regular array</h4>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">function</span> <span class=\"function\">arrayFunc</span>() {\n  <span class=\"keyword\">var</span> arr = [<span class=\"integer\">1</span>, <span class=\"integer\">2</span>, <span class=\"integer\">3</span>];\n  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> index <span class=\"keyword\">in</span> arr) {\n\n  }\n}\n</pre></td>\n</tr></table>\n</div></div>\n<p>Iterating over an array using <code>for-in</code> is slower than a <code>for</code> loop and the entire function containing\na <code>for-in</code> statement will not be optimized.</p>\n\n<p>Using <code>for</code> loop is almost always a safe bet. Do you need to iterate over object&#39;s properties?</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">var</span> objKeys = Object.keys(obj);\n<span class=\"keyword\">var</span> propertyName;\n\n<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"integer\">0</span>, l = objKeys.length; i &lt; l; i++) {\n  propertyName = objKeys[i];\n  <span class=\"comment\">// more code</span>\n}\n\n<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> propertyName <span class=\"keyword\">in</span> obj) {\n  <span class=\"keyword\">if</span> (obj.hasOwnProperty(propertyName)) {\n    <span class=\"comment\">// more code</span>\n  }\n}\n</pre></td>\n</tr></table>\n</div></div>\n<h2>For-In</h2>\n\n<p><code>For-In</code> statements can prevent the entire function from being optimized in a few cases. It will result\nin &quot;Not optimized: ForInStatement is not fast case&quot; bailout.</p>\n\n<h3><code>key</code> has to be a pure local variable</h3>\n\n<p>It cannot be from upper scope or referenced from lower scope.</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">var</span> key;\n\n<span class=\"keyword\">function</span> <span class=\"function\">doesNotSeemToBeLocalKey</span>() {\n  <span class=\"keyword\">var</span> obj = {};\n  <span class=\"keyword\">for</span> (key <span class=\"keyword\">in</span> obj);\n}\n</pre></td>\n</tr></table>\n</div></div>\n<h2>Arguments</h2>\n\n<p>Careless manipulations with <code>arguments</code> might cause the whole function to be non-optimizable. It might result in\none of these &quot;bailouts&quot;: &quot;Not optimized: Bad value context for arguments value&quot; and &quot;Not optimized: assignment\nto parameter in arguments object&quot;.</p>\n\n<h3>Reassigning <code>arguments</code></h3>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\">// do not re-assign arguments</span>\n<span class=\"keyword\">function</span> <span class=\"function\">argumentsReassign</span>(foo, bar) {\n  <span class=\"keyword\">if</span> (foo &amp;&amp; foo === <span class=\"integer\">5</span>) {\n    bar = <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Barracudas</span><span class=\"delimiter\">'</span></span>;\n  }\n  <span class=\"comment\">// code that uses `bar`</span>\n}\n\n<span class=\"comment\">// use local variables instead</span>\n<span class=\"keyword\">function</span> <span class=\"function\">argumentsReassign</span>(foo, bar) {\n  <span class=\"keyword\">var</span> localBar;\n\n  <span class=\"keyword\">if</span> (foo &amp;&amp; foo === <span class=\"integer\">5</span>) {\n    localBar = <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Beantown Pub</span><span class=\"delimiter\">'</span></span>;\n  }\n  <span class=\"comment\">// code that uses `localBar`</span>\n}\n</pre></td>\n</tr></table>\n</div></div>\n<h3>Leaking <code>arguments</code></h3>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\">// `arguments` is a special object and it is costly to materialize.</span>\n<span class=\"keyword\">function</span> <span class=\"function\">leaksArguments</span>() {\n  <span class=\"keyword\">var</span> args = [].slice.call(<span class=\"local-variable\">arguments</span>);\n  <span class=\"comment\">// code that uses `args`</span>\n}\n\n<span class=\"comment\">// does not leak arguments</span>\n<span class=\"comment\">// accessing `arguments.length` is just an integer and doesn't materialize</span>\n<span class=\"comment\">// `arguments` object</span>\n<span class=\"keyword\">function</span> <span class=\"function\">doesNotLeakArguments</span>() {\n  <span class=\"keyword\">var</span> args = <span class=\"keyword\">new</span> Array(<span class=\"local-variable\">arguments</span>.length);\n\n  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"integer\">0</span>; i &lt; args.length; ++i) {\n    <span class=\"comment\">// `i` is always valid index in the arguments object</span>\n    <span class=\"comment\">// so we merely retrieve the value</span>\n    args[i] = <span class=\"local-variable\">arguments</span>[i];\n  }\n  <span class=\"comment\">// code that uses `args`</span>\n}\n</pre></td>\n</tr></table>\n</div></div>\n<p>Note, that in most cases optimizing takes more code. You can probably write a build step for that:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">function</span> <span class=\"function\">doesNotLeakArguments</span>() {\n  arguments_slice(args, <span class=\"local-variable\">arguments</span>);\n  <span class=\"comment\">// code that uses `args`</span>\n}\n</pre></td>\n</tr></table>\n</div></div>\n<p>Happy Coding!</p>\n","summary":null,"illustration":null,"illustration_alt":null,"tags":["javascript","engineering"],"shallow":false,"date":"2014-09-22T00:00:00Z"},{"id":"2014/09/19/building-quality-into-our-projects","title":"Building Quality Into Our Projects","dockyarder":"jon-lacks","body":"<p>This article serves as a continuation of a \u201cClient Targeted\u201d article recently published by our own Michael Dupuis (<a href=\"http://reefpoints.dockyard.com/2014/09/12/features-as-business-objectives.html\">Features As Business Objectives</a>). These posts aim to provide our current and prospective clients insight into how we approach development at DockYard.</p>\n\n<p>Building &quot;Quality&quot; software does not happen by accident. It is actually one of the unspoken sides of the \u201ciron triangle\u201d of project constraints (Scope, Cost, Time) - or should we call it a diamond now? Let\u2019s not go there! </p>\n\n<p><img src=\"http://i.imgur.com/DEWme3R.jpg\" alt=\"image\"></p>\n\n<p>When making an investment in development of an application, the level of desired quality influences project cost and schedule.  Building an appropriate Quality Plan for a project requires time, planning and execution which is the responsibility of DockYard and the clients with whom we engage.  Below I layout the primary types of quality related practices we may consider applying to our (your) projects; always driven by clients\u2019 unique context (See my earlier blog post about context driving practices - <a href=\"http://reefpoints.dockyard.com/2014/06/06/process-paradox.html\">Process Paradox</a>).  This article does not serve to describe these quality practices in depth but will cover the basics in terms of how they could apply to client projects.  Any one of these practices in isolation is not an effective recipe for quality, it is the degree to which these practices are commingled in a logical way that results in positive outcomes. </p>\n\n<h2>Practice #1 - Test-Driven Development / Automated Testing</h2>\n\n<p>Before the Engineer writes a line of code they are investing time in thinking about and writing the appropriate test cases for the code - these tests will serve as a functional quality benchmark which the engineer can code towards. In parallel these efforts build up a library of automated tests that will ensure that the \u201cworking\u201d features built early in the project continue to work when new features (code) are introduced later on.  If we don\u2019t have these tests and we have 1000\u2019s of lines of code, testing/debugging overhead raises exponentially which will result in increased risk to project cost and/or desired schedule.  It\u2019s also important to note that this practice is functionally-centric and not visual which is addressed with other practices described below.</p>\n\n<p><strong><em>What this means to the client</em></strong></p>\n\n<p>The cost and eventual savings related to this practice manifest themselves as time spent thinking vs. coding vs. testing. When we estimate what it will take to develop a given feature, we consider the time spent thinking about these tests, writing the tests, maintaining the tests in addition to writing the feature code.  However, keep in mind that the time spent testing later on in the project, when the code base has grown exponentially, is reduced due to this upfront investment of time (see figure below) because we have a growing set of automated tests that will ensure we continue to maintain high quality throughout the development cycle.</p>\n\n<p><img src=\"http://imgur.com/2HBq9ie.jpg\" alt=\"image\"></p>\n\n<h2>Practice #2 - Pair Programing / Code Reviews</h2>\n\n<p>Sometimes (usually) two heads are better than one.  Pair Programming is exactly as it is described. Two engineers team up to work side by side on a single unit of code (or feature.) In a 2013 article published by the Economist a study conducted by Laurie Williams of the University of Utah showed \u201c<em>...paired programmers are 15% slower than two independent individual programmers, while &quot;error-free&quot; code increased from 70% to 85%. Since testing and debugging are often many times more costly than initial programming, this is an impressive result. Pairs typically consider more design alternatives than programmers working alone, and arrive at simpler, more maintainable designs; they also catch design defects early.</em>\u201d</p>\n\n<p>Additionally, Code Reviews by a peer or more senior engineer serve to ensure that the code being written meets agreed best practices and that mistakes of the past don\u2019t get reintroduced. </p>\n\n<p><strong><em>What this means to the client</em></strong></p>\n\n<p>Pair programing and Code Reviews are practices DockYard believes yield higher quality code while also establishing a continuous learning culture across our engineering team.  The extent to which we apply these practices is less variable in that it is part of our company DNA - however, like any practice, a client\u2019s project context will dictate the extent to which these apply.  The client will incur the benefit of a well rounded and productive engineering team which can translate to reduced project cost.</p>\n\n<h2>Practice #3 - Manual Testing</h2>\n\n<p>In a literal sense this is the type of testing conducted by a human who seeks to ensure the less common use cases which may not have been exercised by an Automated Test or code review are working as expected. Additionally, this type of testing ensures the visual design of the product has been upheld -  Spacing, pixels, colors, fonts, etc.  Browser compatibility is also something manual testing will verify. This type of testing is usually conducted by members of the project team and the client. They work in collaboration across the feature set, report and classify severity of bugs which are eventually assigned to engineers when appropriate.</p>\n\n<p><strong><em>What this means to the client</em></strong></p>\n\n<p>The client should be prepared to be a very active participant in this practice and schedule their time accordingly.  Feature complexity will drive the amount of time required for this type of testing - which might be nil if complexity is low.  A very rich user experience will require more testing and thus manifest itself in terms of increased time/cost.  </p>\n\n<h2>Practice #4 - Client Demos (and Acceptance Testing)</h2>\n\n<p>For most projects we work in 1-2 week iterations (sprints) and at the conclusion of this time period we typically demonstrate the progress we have made by sharing working software. These demonstrations serve a dual purpose:</p>\n\n<ol>\n<li>gives the client opportunity to verify development is proceeding in the desired direction, and if not, attempt to course correct early on vs. late in the project when course correction can be very costly</li>\n<li>allows the team to reflect and continuously improve how they are executing the project.</li>\n</ol>\n\n<p>When a feature is ready for prime time, we will usually ask the client to formally accept the feature as complete.  This ensures the team can shift their full focus and attention to building the next features on the backlog. Context switching can be very costly in terms of productivity, therefore we try to call things \u201cDone Done\u201d before moving on. </p>\n\n<p><strong><em>What this means to the client</em></strong></p>\n\n<p>Similar to manual testing, client should be prepared to be a very active participant in both demos and conducting acceptance testing within agreed timeframes.  Deviation from established timeframes will result in increased project cost/time.  Therefore, whenever we engage with a client, we request upfront a high level of collaboration and availability to keep things moving along.  </p>\n\n<p>Hopefully after reading this article, you have gained an appreciation for some of the considerations we make in terms building quality into our projects.  The level of quality a client desires and the pride DockYard has in its deliverables drives the extent to which these practices are utilized.  Therefore, if you are interested in engaging with us, think about the level of quality you expect and we will work together to derive an appropriate quality plan that balances your cost and time constraints.</p>\n","summary":null,"illustration":null,"illustration_alt":null,"tags":["quality","engineering","planning","process","client","project-management"],"shallow":false,"date":"2014-09-19T00:00:00Z"},{"id":"2014/09/12/features-as-business-objectives","title":"Reducing Project Costs: Features As Business Objectives","dockyarder":"michael-dupuis","body":"<p>There is a lot of insight a developer can offer when it comes to reducing costs associated with building web applications. While few developers have MBA degrees, we are \u201cin the trenches\u201d when it comes to bringing a project from <a href=\"http://www.wikiwand.com/en/Ideation_(idea_generation)\">ideation</a> to completion. We see where projects go astray and where in the process complexity gets introduced, timelines get pushed out, and costs rise.</p>\n\n<p>Failed features are a significant cost to any project. I\u2019m defining a failed feature as a feature which gets implemented by the developer correctly, but which was ill-conceived in the planning stages. There\u2019s no 404 error pages, just poor user experiences that don\u2019t serve the application\u2019s aim.</p>\n\n<p>To mitigate failed features, there is a first principle that I think clients should apply at the outset of any software project: </p>\n\n<p><strong>Align the application\u2019s features with business goals.</strong></p>\n\n<p>\u201cHave attainable goals,\u201d is something you hear in a range of industries \u2013 from fitness to financial planning. For example, it is common when designing an investment portfolio to come up with a baseline for what you\u2019d like to have saved by the time you retire. Goals help quantify short-term success (meeting monthly savings goals) and bring context to immediate financial decisions (going on an extravagant vacation vs contributing to the 401k).</p>\n\n<p>In many regards, defining business goals is far harder than designing a feature for an application. Developers can implement an idea, but if the idea is not well grounded or refined enough, the implementation does not matter. Application consumers will not be able to use the feature in a way that translates to success for the business. For all intents and purposes, the feature is \u201cbroken\u201d and costs are about to go up because it will need to be fixed.</p>\n\n<p>This is why coming to a consultancy with a list of features is problematic. Features are not grounded in any sort of reasoning; business objectives are. Enter the planning process with a set of business objectives for the application.</p>\n\n<p>Let\u2019s take a simple case. A client is overhauling their marketing site. They sit down in their first planning meeting with the designers and developers and say \u201cwe want a blog.\u201d A blog is a feature \u2013 it is not a business objective. What would be more helpful from the designer and developers\u2019 perspectives is to hear: \u201cwe want a way to show prospective clients that our firm is transparent.\u201d This a business objective. It informs the designer that there is a target audience to design for (prospective clients). It tells the designer a little bit about the client\u2019s values (transparency). Yes, it may lead to a blog, but what\u2019s important is that it grounds the feature with a purpose.</p>\n\n<p>Features must align with business goals, because they create the theoretical framework in which the application operates; the alternative is an aimless application with a lot of code, a lot of options, and a lot of usability problems. Designing a user experience which gets the consumer from point A to point B becomes difficult because there is not a logical consistency to the elements in the application. Features do not have a unique roles, and so the designer cannot delegate responsibility in a predictable manner.</p>\n\n<p>Features that are not aligned with business objectives are expensive.</p>\n\n<p>It goes without saying, but clear design thinking translates into cleaner implementations for the developers building the application. Features can be added, removed, and enhanced without hurting other elements of the application. Code becomes less coupled, is more maintainable, and can be better tested.</p>\n\n<p>Features without well-defined roles don\u2019t have a place in the application\u2019s ecosystem, and so they often fail. This is a worst case scenario. It means that users can\u2019t interact with the application in a way that\u2019s meaningful for the business. And since these failed features need to be fixed and re-worked to meet the business objective (which should have been known and communicated at the outset of the project \u201cdiscovery\u201d process), the client has expended the following resources:</p>\n\n<ol>\n<li>the time that went into designing and implementing the failed feature</li>\n<li>the cost that went into designing and implementing the failed feature</li>\n<li>the time that will go into designing and implementing the correct feature</li>\n<li>the cost that will go into designing and implementing the correct feature</li>\n</ol>\n\n<p>This is to say nothing of the opportunity costs. While one client is figuring all of this out, a competitor who aligned their features with their business objectives and \u201cgot it right\u201d on the first attempt is gaining happy, new users. </p>\n\n<p>When a businesses hires a software consultancy to develop an application, they\u2019re bringing in skills and expertise from the outside. It\u2019s unlikely that a developer is going to advise a client on how to gain market share, and it\u2019s just as unlikely that a client is going to open a designer/developer\u2019s eyes to a new application feature. Rather than planning an application around a set of features, clients can make the most of a consultancy&#39;s resources by coming to the planning stages of a project with well-defined business objectives.</p>\n","summary":null,"illustration":null,"illustration_alt":null,"tags":["design-process","business","design-thinking","engineering","planning","process"],"shallow":false,"date":"2014-09-12T00:00:00Z"},{"id":"2014/09/11/fear-of-failure","title":"The Fear of Failure","dockyarder":"logan-faerber","body":"<p>When confronted with a new task it&#39;s natural for someone to feel a sense of anxious hesitation. Sure, it varies between individuals depending on the activity or setting, but entering an unfamiliar scenario can make anyone feel uncomfortable. Often this anxiety leads someone to succumb to their fears of failure, which ultimately results in them not even taking a chance at learning something new.</p>\n\n<p>No one wants to be a failure - there&#39;s a connotation that you should just give up or else be publicly humiliated. Thanks to the recent development of social networks, anyone can declare someone as a failure simply by leaving a comment on a video online or posting blanketed statements on various articles - all the while never having to say it to their face directly or give useful constructive feedback. This mentality comes from a very judgmental and one sided declaration that spurs from people&#39;s fear of being a failure themselves. </p>\n\n<p>Alone, the term failure is a simple solution to a more complex problem. It&#39;s quick to label the scenario as everything having gone wrong rather than taking the time necessary to provide constructive feedback or to consider steps leading up to the &quot;failure&quot;. By neglecting to reflect on the the particulars of the situation we are not learning from our mis-steps. </p>\n\n<p>Rather than refer to these results as failures, I like to think of them as mistakes, granting more leniency to a lifetime of self-educating. While a failure feels conclusive, a mistake feels like a small part of a whole, which is more representative of how learning a new skill or concept should be. We should always be approaching the chance to learn something new with an optimistic and open mind, and the only way to do that successfully is to embrace the fact that you&#39;re bound to make mistakes along the way. Think about it; if a kid messes up, we don&#39;t instantly jump to calling them a failure. We let them know that it&#39;s okay, they&#39;ve made a mistake, but then we follow up with an instruction or demonstration on how they could improve next time. This ability to showcase compassion when sharing ideas is how we&#39;ve come so far as a human race. We tend to be most curious as children because we&#39;re unaware of the cultural judgment that comes from not being right all the time. We&#39;re still willing to experiment without that fear of failure. The curiosity to learn something new is an exciting one, where we focus on ourselves improving and not the jealousy of what others have accomplished, so why not treat our entire lifetime of learning with a similar level of patience and understanding? </p>\n\n<p>Fear can be incredibly influential when learning something new as long as it&#39;s used to fuel the fire and not extinguish it - prove it wrong. Instead of focusing on what you have to accomplish and getting overwhelmed, take time to learn at your own pace; as they say, patience is a virtue. The best way to learn is to dive right in without thinking too heavily. By getting directly involved you will be learning through a hands on experience, which helps to reconfirm what works and what doesn&#39;t. As with most things, repetition is key to retaining information.  If you&#39;re willing to make mistakes along the way, jump right in and get your hands dirty. Not only will you avoid wasting time hesitating, but you&#39;re forced to find a solution now that you&#39;ve already begun. The less you think in these scenarios, the better. </p>\n\n<p>In order to learn we must be willing to make mistakes. Hundreds if not thousands of them. You&#39;ll probably even make some incredible, irreversible messes along the way. But rather than wasting time to criticize yourself or worry about what others think of you, focus on the task at hand. Take time to acknowledge what wasn&#39;t working, why it wasn&#39;t working, and move on. It&#39;s as simple as that. Ultimately our biggest failures lead to our greatest successes. So in order for us to improve and grow as individuals as well as a society we must try to overcome this fear or else we&#39;ll never progress, and that&#39;s the real failure.</p>\n","summary":null,"illustration":null,"illustration_alt":null,"tags":["art","design","design-thinking","inspiration","design-process"],"shallow":false,"date":"2014-09-11T00:00:00Z"},{"id":"2014/08/25/design-and-big-data","title":"Comics and Big Data","dockyarder":"ashley-treni","body":"<p>I\u2019ve never been into comics or graphic novels. They\u2019ve always remained in my periphery, but I never took the time to be interested in them. I appreciated good illustration, but rarely watched animations (except for Disney and Pixar of course) and pretty much ruled out that I would never \u201cget\u201d the appeal of a comic book.</p>\n\n<p>I took a data mining class last semester, and we discussed the importance of <strong>visual storytelling</strong>. I jotted down notes and took away a comprehensive understanding of design implications - keep colors relative and consistent, scale, got it, check.</p>\n\n<p><a href=\"http://www.northeastern.edu/camd/artdesign/people/dietmar-offenhuber/\">Dietmar</a>, my professor, had mentioned a book by Scott McCloud, <a href=\"http://scottmccloud.com/2-print/1-uc/\">Understanding Comics</a>, and suggested looking to comics and film as an important metaphor for data visualization. Though I didn\u2019t pay much attention at the time, this notion stuck with me, and a few weeks ago I invested in that very book.</p>\n\n<p>Comics are a brilliant demonstration of visualizations that show multivariate information. Interactions, emotions, time, and space are all present, concurrent, and in flux - using frames and transitions to move the reader from one thought to the next. Comics pay attention to the readability of a story, by piecing together &quot;juxtaposed images in deliberate sequence.&quot; (McCloud, <em>Understanding Comics</em>) Unlike film, however, the static nature of comics leaves room for creative challenges balancing those variables simultaneously, especially the evolution of time. </p>\n\n<p>A series of information graphics is subject to the same dimensional considerations. Data Visualization is a balance of data analytics, visual representations, and a narration which provides a context for each investigation. Designing complex data to be comprehensive, interactive, and inviting is quite a challenge. While there are tools we can use to inspire visualization methods and techniques, there is much more to consider. There is an entire science behind visual cognition; why humans respond to certain characteristics faster than others (to be elaborated on at another point in time).</p>\n\n<p>To incorporate storytelling into data visualization is to consider who we design for. Like comics, we must create an environment for the audience to become immersed, and the presentation of ideas shapes the interaction. The visual language we use, the way we sequence through visualizations, directly influences the legibility of the information. When we embrace the humanism of comprehension and perception, we design the experience to promote the success of the reader&#39;s ability to understand.</p>\n\n<p>Let&#39;s design to agitate curiosity and engagement. How can we utilize visual storytelling to inspire research, critical analysis, and conversation? Harnessing the power of design, we can draw inspiration from comics, and present information in a way that considers how the mind observes and acquires ideas.</p>\n\n<p>As it were, I\u2019m now devouring comics - making up for lost time. I\u2019ve put my summer reading list on hold - to make time for books shared with me from fellow designers at DockYard, who maybe not so surprisingly, already have a deep appreciation and love for the brilliant medium that is comics.</p>\n","summary":null,"illustration":null,"illustration_alt":null,"tags":["design","storytelling","information-graphics"],"shallow":false,"date":"2014-08-25T00:00:00Z"},{"id":"2014/08/22/design-an-experience","title":"Designing an Experience","dockyarder":"tim-walsh","body":"<p>Over the years I have attended a lot of concerts, probably too many to count. Perhaps enough to make me deaf in the near future. One thing I&#39;ve realized - I keep going back for the experience.</p>\n\n<p>A good concert is one where I\u2019ve stood witness to the construction of a musical composition, built piece by piece from each member of the band, materializing into a single living, breathing entity; emblematic of those who devoted the time and energy into building something bigger than themselves. </p>\n\n<p>Good design should mirror this experience. It should be collaborative. It should be defiant and intelligent, original but cognisant of the past. It should set expectations for any and all future interactions. It should make the person say, \u201cnow that was the best show I\u2019ve ever been to.\u201d </p>\n\n<p>Because when it comes down to it, who would want the alternative? A bad performance is like something designed in Microsoft Word. It is obvious and unbalanced. It is \u201ctoo loud\u201d and often \u201chas way too many drunk people.\u201d  </p>\n\n<p>So control the stage while designing. Give people an experience that not only captures their attention, but gives them a reason to listen.</p>\n","summary":"A parallel between live performance and experience design.","illustration":null,"illustration_alt":null,"tags":["design","design-thinking","observations"],"shallow":false,"date":"2014-08-22T00:00:00Z"},{"id":"2014/08/06/the-most-difficult-position-to-hire-for-in-tech-right-now","title":"The most difficult position to hire for in tech right now","dockyarder":"brian-cardarella","body":"<p>The most difficult position to hire for in tech right now is not\nengineering. It isn&#39;t design. It is the hybrid position: the UX\ndeveloper. Or the UX designer. Or the implementation developer. Or the\nCSS engineer.</p>\n\n<p>This is how difficult it is, I have no idea what the &quot;official&quot; title of\nthis position is. We seem to go back and forth every few weeks on what\nto call it. But, this role has become incredibly crucial to how we and\nmost web companies operate.</p>\n\n<p>Historically the responsibility for this position has fallen to\nengineering, or maybe design, depending upon how your team ran things.\nAnd it was the worst work. Cutting HTML, building terrible CSS. But\ntoday process and standards have fallen into place to make this role a\nlegitimate one that people should build a career in.</p>\n\n<p>Understanding how to optimize pages rendering, reduce CSS selector\nlookups, organizing stylesheets and markup files. This is just the\nstart. Finding someone that can communicate between design and\nengineering is a challenge and the people I&#39;ve found to naturally fit\ninto this role excel at this. All of this before we ever start to talk\nabout accessibility, browser compatibility, standards compliance, and\nresponsive design.</p>\n\n<p>However, there is barely anyone out there making a career in this role.\nPerhaps because it has been traditionally looked down upon. Or perhaps\nbecause engineering and design get the glory. The UX developer might\nthink of one&#39;s self as the red-headed-stepchild.</p>\n\n<p>We&#39;ve taken a lot of efforts to bring the same quality we have in\nengineering and design here to our HTML &amp; CSS. We&#39;ve adopted\n<a href=\"http://bem.info/\">BEM</a>,\n<a href=\"https://smacss.com/\">SMACSS</a>, and we&#39;re constantly looking to improve\nour process and the tools we use. Have other companies found similar issues with this\ngrowing field? I&#39;d like to hear from some people.</p>\n\n<p>(btw <a href=\"mailto:jobs@dockyard.com\">we&#39;re hiring</a>)</p>\n","summary":null,"illustration":null,"illustration_alt":null,"tags":["opinion","design","engineering","html","css"],"shallow":false,"date":"2014-08-06T00:00:00Z"},{"id":"2014/07/29/project-carpe-diem","title":"Project Carpe Diem - \"Game Plan\"","dockyarder":"jon-lacks","body":"<p>I have been exposed to many different work tracking/planning tools during my time as Project Manager. Early on it was tools like Excel, MS Project, IBM Rational. Later it was Jira, Kanban Boards, GitHub Issue Visualization Tools and physical PostIt Note boards. I would classify the former tools being more aligned with senior management&#39;s desire to be \u201cWell Informed\u201d and the latter being more team centric and aligned with Iterative software development. </p>\n\n<p>Working with both distributed and co-located teams has challenged me to devise appropriate work tracking strategies for these very different team contexts.  However, one thing has remained the same to this day: I have never worked with a team that has determined they do not want to do any level of work tracking either in a high or low fidelity way regardless of the software development methodology being applied.</p>\n\n<p>For purposes of this article I will be discussing some of the benefits we have seen in using a physical board with a couple of our co-located DockYard project teams. While I do maintain an appreciation of the big picture plan (aka High-Level Plan),  I have come to embrace a concept that is advocated in the field of Exercise Science - something I have been reading up on lately. I am sure this is not the only field of study citing this approach but wanted to mention this one as top of mind. It is the notion of setting smaller objectives to take one (us) closer to a larger goal. In terms of software development a goal would be synonymous with a product feature. By no means is this a new frontier in development planning, it is simply an application of some already acknowledged concepts.  What I believe is the slight twist is the setting of \u201cDaily\u201d objectives  in addition to full Iteration objectives. Consider this Project Carpe Diem!</p>\n\n<p>At DockYard we are calling this approach \u201cGame-Plan.\u201d It covers the following four dimensions -</p>\n\n<ol>\n<li>Features</li>\n<li>Time (Days)</li>\n<li>Tasks (Hrs)</li>\n<li>Role on Team<br></li>\n</ol>\n\n<p>At DockYard we harnesses the power of the daily standup meeting with low tech multi-colored Post-It Notes on a physical board in the office.  During Iteration planning we discuss the next prioritized feature(s), lay out the relevant sub-features in agreeable sequence, define tasks for those sub-features across all the practice areas on our team. We set an estimation guardrail to have tasks be no smaller than half day\u2019s work and no larger than 2 - 3 days.  We discuss dependencies, hand offs, opportunities to parallelize (Optimize) work across different team members.  We start our iteration and reference the following board where we set/track daily team objectives - </p>\n\n<p><img src=\"http://i.imgur.com/hwZuLsa.jpg\" alt=\"image\"></p>\n\n<p>At the conclusion of Iteration planning we take these tasks and convert them into GitHub issues aligned with a Milestone (Feature). However, we don\u2019t typically reference GH in our standup meetings but do see this as a very effective means to trace our code to the agreed tasks and enable a logical platform for code review.</p>\n\n<p>Other fringe benefits we are afforded by our \u201cGame-Plan\u201d on a daily basis include the following- </p>\n\n<ul>\n<li>Clearly show dependencies across the team</li>\n<li>Helps us focus WIP (Work in Progress)</li>\n<li>Allows team to understand implications if a task is taking longer than expected - adjust our plan</li>\n<li>Allows us to suss out blockages that a team member might not reveal on their own </li>\n<li>If a team member has capacity and someone is over capacity they can see where they can help out </li>\n</ul>\n\n<p>You will also note we do maintain visibility into the \u201cHigh-Level Plan\u201d at all times to ensure we continue to be thoughtful of implications to the overall project objectives.</p>\n\n<p>So Carpe Diem fellow Project Teams - I\u2019d love to hear if any teams out there are up to something similar or has learnings to share!</p>\n","summary":null,"illustration":null,"illustration_alt":null,"tags":["project-management","planning"],"shallow":false,"date":"2014-07-29T00:00:00Z"},{"id":"2014/07/25/on-selling-ux","title":"On Selling UX","dockyarder":"steven-trevathan","body":"<h2>The Talk</h2>\n\n<p>People are talking about the difficulties of selling UX process to their boss, their clients, or their prospective clients. They&#39;re upset that they don&#39;t have the tools to create the caliber of experience others are building and it&#39;s all because a few people aren&#39;t buying into their process. You might have heard it or said it yourself that those in the way &quot;just don&#39;t get UX&quot;. I know I&#39;ve said it.</p>\n\n<p>From this point of view, we appear to be looking at the problem as a matter of conversion; turning someone who isn&#39;t interested in change of process into someone who&#39;ll embrace it. It&#39;s a hard sell and, if you&#39;ve ever experienced being hung up on while cold calling someone, you&#39;ll know that your chances of failure are much greater than your chance of conversion. But don&#39;t let that scare you.</p>\n\n<p>Just like the design process itself, there are many ways to approach this problem. Success in your approach is a matter of understanding perspective and - dare I say - empathy for those in the critical path.</p>\n\n<h2>Definitions</h2>\n\n<p>We all have a habit of creating definitions in our minds of what other people do from what we hear around the office (or internet) and they&#39;re often pretty far off base. Those definitions become our foundation for what it means to be those other things: a designer, a developer, a product manager, a CEO. Those definitions, baseless or not, are used to judge the value of the things we do.</p>\n\n<p>An example might be that most people realize they need a software developer to build an application but they may not understand the angles to be considered, the processes for discovering those angles, or the costs involved. It&#39;s easily misunderstood and can be a surprise for those outside of your industry.</p>\n\n<h2>Shared Values</h2>\n\n<p>We intend to create a great product and we understand there are many variations in process that could bring it to life. As creators, that process can often be poorly preconceived and unnecessarily limited before we get a hand in it. We have a few options from here to deliver our full value, and selling isn&#39;t one of them.</p>\n\n<p>Aaron Scott from <a href=\"http://leap.agency/\">Leap</a> gave a talk at <a href=\"http://www.meetup.com/uxboston/events/136304392/\">UX Boston Conf</a> about doing your best in getting to know those you&#39;re working with to help deliver a winning concept to the client. This approach holds true in more ways than just reaching a final design; it will help you gain the buy-in you need to perform at your full potential.</p>\n\n<p>The stakeholder may understand what you do, need some experience of your process before understanding, or maybe they&#39;re not ready for it all. You need to know that they&#39;re acting off of their definitions, and it&#39;s not always their fault for having an incomplete picture. Just the same, it is equally important for us to understand them and their needs.</p>\n\n<p>If they&#39;re not ready, convincing them otherwise will cause anxiety during the project and potentially cause issues of trust with you or future designers if things don&#39;t go well. Use your best judgment and tread lightly.</p>\n\n<h2>Collaboration</h2>\n\n<p>When your work is primarily visual it can be especially difficult to get the buy in you need. Most of the stakeholders will have had vision for their entire lives and trust themselves to judge what they feel is good and bad. They have their own tastes, their own definitions of what you do, and their own expectations of the process.</p>\n\n<p>Our value as designers is best understood when demonstrated and this is your most powerful tool to gain buy in. Make room for them to be part of your design conversation. Problem solve and communicate with them like you might your design team. Let them breath the same air you are and replace your salesmanship with collaboration. Use this method instead of presentations and cold hard salesmanship or politics.</p>\n\n<p>If you don&#39;t believe they&#39;re a good fit to collaborate with your design team, you may wish to pass on their project. Consider them a &quot;client in training&quot;, give them your best advice, and set them free. Of course this isn&#39;t as easy when working in-house, where I would hope that if you&#39;ve come to this conclusion you&#39;d start looking for a more collaborative environment.</p>\n\n<p>So stop <em>selling</em> UX. Look around, listen, ask questions, and help the client in training see further before you put a contract in front of them. Your process of gaining an understanding of the product, users, and their context will sell your expertise all on its own. If they&#39;re not ready, which is up to you to decide, set them free.</p>\n\n<p>They may not always be a returning client, but they will respect you for being honest with them every step of the way - and that&#39;s a lifelong trust.</p>\n","summary":"Getting what you want out of your design process.","illustration":null,"illustration_alt":null,"tags":["design","design-process","design-thinking"],"shallow":false,"date":"2014-07-25T00:00:00Z"},{"id":"2014/07/23/repeat-patterns","title":"Making better repeat patterns","dockyarder":"maria-matveeva","body":"<p>I enjoy the look of hand-drawn things. And I use patterns a lot. But when the two are combined, the results are often disappointing. My least favorite thing is to see a pattern where identical copies of a hand drawn object were repeated without variation. The automatic repetition here is not appropriate to the shaky handmade look of the art.</p>\n\n<p>The effect reminds me of Office circa 1995 (remember the classic marble and granite patterns?) or the obviously tiled walls in video game environments. In a 3D environment, a small size of the tile that causes this obvious tiled look is a necessity to conserve processing power.</p>\n\n<p>Remember these?\n<img src=\"/images/post-assets/maria/001-bad-textures.jpg\" alt=\"\"></p>\n\n<p>Because I want to use hand drawn repeat patterns in my work, and it would be impractical to draw a thousand individual pieces to create the pattern, I experimented to determine exactly how many pieces I need to preserve the varied look, while being able to tile.</p>\n\n<p>When I intentionally draw similar objects, I found that 15-30 copies will make a decent repeat pattern. I draw more than I need, then squint and get rid of a few that are too dissimilar. Once pieces are arranged on the pattern, there will always be a few that stick out and attract attention to the \u201cseams\u201d between your pattern tiles. To solve this, I leave only a small amount of variation in both shape and placement, and I repeat a few of the shapes several times in a single tile. This distracts from the \u201cedges\u201d of the tiles because repetition happens on two different rhythms.</p>\n\n<p>Pattern element 2 is repeated several times within one unit.\n<img src=\"/images/post-assets/maria/002-repeat-pieces.png\" alt=\"\"></p>\n\n<p>Trying to get as far away as I can from the obvious square tiled look, I also experimented with other manners of tiling. Adobe Illustrator offers brick (offset), hexagonal and other options, but I eventually need to go back to a rectangular repeating unit because I want to use my pattern in browsers.</p>\n\n<p>A rectangular repeat unit is used to make hexagonal tiles.\n<img src=\"/images/post-assets/maria/003-repeat-hex.png\" alt=\"\"></p>\n\n<p>Here is one of the patterns I ended up making in this non-repeated style.</p>\n\n<p>One unit of the repeat pattern.\n<img src=\"/images/post-assets/maria/004-trees.png\" alt=\"\"></p>\n\n<p>I used this tree, circled, several times inside one repeating unit.\n<img src=\"/images/post-assets/maria/005-trees.png\" alt=\"\"></p>\n\n<p>The pieces are aligned to the grid, of course, but they are hand drawn so sizes are slightly off. I intentionally spaced them slightly off the grid as well, but preserved the overall balanced appearance (just squint and fix whatever looks off  - very scientific!)\n<img src=\"/images/post-assets/maria/006-trees.png\" alt=\"\"></p>\n\n<h2>And finally - here are the patterns!</h2>\n\n<p><img src=\"/images/post-assets/maria/099-swatches-of-all-patterns.png\" alt=\"\"></p>\n\n<p><a href=\"/images/downloadables/patterns/pattern-swatches-CS5-and-later.ai\">Download the Illustrator file</a> and use these patterns in any project. We only ask that you do not resell them. Enjoy!</p>\n","summary":"My favorite technique to avoid the obvious tiled look.","illustration":"maria_patterns.jpg","illustration_alt":"A most zen-like practice","tags":["experiments","design"],"shallow":false,"date":"2014-07-23T00:00:00Z"},{"id":"2014/07/18/facebook-experimentation","title":"Facebook Experiment","dockyarder":"maria-matveeva","body":"<p>I just read this <a href=\"https://medium.com/@scottrob/facebooks-going-to-be-ok-but-science-is-taking-a-hit-fd512b250f3e\">thoughtful and refreshing article</a> about Facebook&#39;s now infamous experiment on a large group of users. It outlines the ethical problems in running an experiment on unwilling participants, and how the scandal that followed damages the reputation of scientific research, which has ethical (not just legal) restrictions. It also reminds us that testing different versions of a product on users is nothing new, and we all seem OK with it as long as it stays in the realm of marketing.</p>\n\n<p>The outrage over users&#39; emotions being manipulated without consent reminds me of my own feeling of insecurity a few years ago, when personalized ads just started appearing on Facebook (somewhere around 2009?). Suddenly this free service, which I use for talking to friends, is listening in and pushing ads on me. Weird. I wanted to push them back.</p>\n\n<p>Can I do anything to these algorithms that determine what ads I see? I wanted to experiment with them - to manipulate the ads by intentionally changing my information and posting fake content from my profile. I didn&#39;t keep any screenshots for evidence, so you&#39;ll just have to believe that some of it worked well.</p>\n\n<p>At the time, I had to use Facebook at work quite a lot. As &quot;the web design person&quot; for a nonprofit organization, I posted to Facebook regularly and kept track of potentially abusive comments on the official page, so I had to be logged in and therefore exposed to the ads at the same time.</p>\n\n<p>If you are a female - especially a female of an important purchasing age like me - you&#39;ll have many companies fighting for your attention. In your early 20s it&#39;s mostly personal purchases like shoes, clothes and makeup. A few years later, you qualify into the coveted &quot;homemaker&quot; target market. You supposedly start making decisions for a growing family about which groceries, appliances and brand of house paint to get - and companies really want your attention.</p>\n\n<p>I was getting tired of the keywords and browsing history from my personal life following me around at work with supposedly relevant shopping ads, so I tried to confuse Facebook. </p>\n\n<p>First I tried posting fake announcements of a tropical vacation and labeling some of my photos with far-away locations, but the ads didn&#39;t change much. I would see the occasional 50% off ad for brand name luggage, but nothing drastic. Many of my Facebook friends were confused, including a few coworkers. (&quot;A three week vacation? What about my report?&quot;)</p>\n\n<p>Next, I changed my gender to male. I loved the ads that I got in return. Suddenly there were no glitter shoes, no 75% off designer dresses, no engagement rings. Instead I saw &quot;finish your computer science degree&quot;, high quality leather goods, and website hosting ads. I had not changed anything else about my behavior. The same keywords and likes give a girl and a boy version of me a completely different market persona. I enjoyed the boy version a lot more.</p>\n\n<p>The third thing I changed was location. Facebook seemed to save different location privacy settings on desktop and in the browser, and defaulted back to showing my location once in a while. I was not happy to reveal my exact location with each post. It just seemed too invasive. On top of that, Facebook started mining my friends&#39; location settings to determine mine whether I wanted to reveal it or not. It seemed easier to claim a false location than to keep fighting for it to remain blank. I set my hometown and current location to North Pole, Alaska.</p>\n\n<p>The ads felt a bit more brawny on top of my previous change to &quot;male&quot;. Some offers of rugged hiking boots (I actually buy hiking boots!) and tactical something or other. On the downside, one real life friend later said she was confused by the  North Pole location.</p>\n\n<p>Since I tried those interventions, Facebook algorithms have of course advanced, and the simple gender setting change today might not produce a significant change in ads. But it felt rewarding to kick back at the marketing machine, and to sometimes get results. I am a web designer, so I have to be a user of web things as well as a maker. I do not think I will be quitting Facebook this week, or next. But I enjoy running experiments back on it.</p>\n\n<p>As a user, I was able to influence my ads. As a designer, I remain skeptical of user declared content. For example, if I had access to the kind of data Facebook has on most users, and wanted to target a person of a specific age and gender, I would consider their behavior instead of relying on one setting. I would look to confirm their gender, relationship status and age settings with specific keywords or themes in their posts and things they reacted to. </p>\n\n<p>We should make sure our products do not break in &quot;weird&quot; cases (for example, when user settings and behavior seemingly contradict each other), and remain aware of the assumptions we make in the design process.</p>\n","summary":"How I tried to experiment back on Facebook.","illustration":null,"illustration_alt":null,"tags":["experiments","advertising"],"shallow":false,"date":"2014-07-18T00:00:00Z"},{"id":"2014/07/18/design-as-conversation","title":"Design as Conversation","dockyarder":"ashley-treni","body":"<p>Our understanding of design is perpetually in flux. Over the years design has transitioned from print and typography to web design, communication design to interaction design, user experience design to information design and design thinking. The space of design expands to encapsulate all these areas, while simultaneously formalizing specialized methodologies.</p>\n\n<p>Design is a process; it no longer refers only to static artifacts or visualizations. Design is a craft as much as it is a way of thinking and interacting.</p>\n\n<p>At DockYard, the design and development teams work closely together in an open dialogue, problem solving and giving real time feedback. Functionality and usability are built to work with one another, and it is this exchange of ideas, the conversation, that allows for the success of this interdisciplinary collaboration. There is no hierarchy of thought; each person brings personal experience and skill that contributes to a richer shared understanding. Many in the design world have begun to formalize this process - identifying these as environments for \u201cinnovation\u201d.</p>\n\n<p>The success of design, however, doesn\u2019t lie in the adherence of these systems. As much as we may reflect on the process of design - it remains a real time activity. Visual design, UI/UX considerations, and software engineering are all skills that come second to the ability for a team to work together. Through conversation, articulation, and modeling, we design the way in which we confront social complexities and wicked problems that exist as a result of differing perspectives. DockYard\u2019s internal process is sensitive to these considerations, but doesn\u2019t attempt to formalize its methodology, as problem solving is unique to each individual circumstance.</p>\n\n<p>The static, active, and meta states of design exist simultaneously layered within one another. When we invest in understanding one another, we truly embody what it means to design for experience, interaction, perception, emotion, and cognition. To \u201cdesign the process of design\u201d is simply to be curious, present and engaged in all that we do.</p>\n\n<p><a href=\"http://www.northeastern.edu/camd/artdesign/people/richard-saul-wurman/\">Richard Wurman\u2019s</a> explicit philosophy resonates with me a great deal. His approach to life is a demand to embrace a lack of understanding; a mentality that allows you to ask questions, to start at the beginning. It liberates you to say &quot;I don&#39;t know what you mean&quot; or &quot;I don&#39;t know much about that&quot; - something we are unfortunately as a society not encouraged to do - much to the detriment of learning and individual understanding. These fears exist in work environments, classrooms, within relationships - we so often are made to feel inadequate if our understanding doesn&#39;t match another&#39;s (or our own) expectations.</p>\n\n<p>The collaborative nature of design reacts against these pressures. We each bring unique understanding, but it is our humility, interest in others and in experience, and the value we place in the exchange of ideas that makes design a powerful thing.</p>\n","summary":"Invisible systems of the design process.","illustration":"ashley_conversation.jpg","illustration_alt":"Forest creatures of the Round Table","tags":["design","design-process","design-thinking"],"shallow":false,"date":"2014-07-18T00:00:00Z"},{"id":"2014/06/27/ember-macros-for-DRY-and-testable-code","title":"Ember Macros for DRY and Testable Code","dockyarder":"lin-reid","body":"<h3>Intro</h3>\n\n<p>This post in going to explore the idea of writing your own Ember macros\nas a strategy for DRYing up and creating more modular Ember code. \nAs you&#39;ll see, besides the maintainability and flexibility benefits gained by DRYing\nup and decoupling code, isolated code is significantly easier to test.\nWe&#39;ll be using a sample application to illustrate refactoring some code\ninto a macro.</p>\n\n<h3>What is a Computed Property Macro?</h3>\n\n<p>A computed property macro can really be thought of as a function that returns the\ndefinition of a computed property. Essentially, we are creating a function that will\ndefine computed properties for us. They look something like this:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\">// Defining a computed property macro</span>\n<span class=\"keyword\">function</span> <span class=\"function\">greeting</span>(dependentKey, greeting) {\n  <span class=\"keyword\">return</span> Ember.computed(dependentKey, <span class=\"keyword\">function</span>() {\n    <span class=\"keyword\">return</span> greeting + <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">, </span><span class=\"delimiter\">'</span></span> + dependentKey;\n  });\n}\n\n<span class=\"comment\">// Consuming a computed property macro</span>\n<span class=\"keyword\">var</span> Greeter = Ember.Object.extend({\n  <span class=\"key\">user</span>: <span class=\"predefined-constant\">null</span>,\n  <span class=\"key\">englishGreeting</span>: greeting(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">user</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Hello</span><span class=\"delimiter\">'</span></span>),\n  <span class=\"key\">spanishGreeting</span>: greeting(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">user</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Hola</span><span class=\"delimiter\">'</span></span>)\n});\n\n<span class=\"keyword\">var</span> concierge = Greeter.create({ <span class=\"key\">user</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Narwin</span><span class=\"delimiter\">'</span></span> });\nconcierge.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">englishGreeting</span><span class=\"delimiter\">'</span></span>) <span class=\"comment\">// =&gt; 'Hello, Narwin'</span>\nconcierge.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">spanishGreeting</span><span class=\"delimiter\">'</span></span>) <span class=\"comment\">// =&gt; 'Hola, Narwin'</span>\n\nconcierge.set(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">user</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Boomer</span><span class=\"delimiter\">'</span></span>);\nconcierge.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">englishGreeting</span><span class=\"delimiter\">'</span></span>) <span class=\"comment\">// =&gt; 'Hello, Boomer'</span>\nconcierge.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">spanishGreeting</span><span class=\"delimiter\">'</span></span>) <span class=\"comment\">// =&gt; 'Hola, Boomer'</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>So, why not just use a standard computed property? Macros give us the\nability to take common chunks of functionality and share them throughout\nour code, allowing us to avoid re-writing the logic every time we need\nit. </p>\n\n<p>Ember provides us with a bunch of useful computed macros\nright out of the box. If you&#39;re not familiar with them, you should\ndefinitely <a href=\"http://emberjs.com/api/#method_computed\">check them out</a>.</p>\n\n<p>Now that we&#39;ve covered our bases, lets move on to the sample app.</p>\n\n<h3>Sample App</h3>\n\n<p>The goal of our sample application is to track financial transactions\nand to provide an overview of income and expenses for a given time frame.\nOur app has a <code>Month</code> model which has many <code>transactions</code>. A <code>Month</code> also\nhas <code>incomeTransactions</code> (transactions with positive amounts) and\n<code>expenseTransactions</code> (transactions with negative amounts). Below are\ntests and code for our <code>Month</code> and <code>Transaction</code> models.</p>\n\n<p><code>app/models/month.js</code></p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">var</span> hasMany = DS.hasMany;\n<span class=\"keyword\">var</span> filter = Ember.computed.filter;\n\n<span class=\"reserved\">export</span> <span class=\"keyword\">default</span> DS.Model.extend({\n  <span class=\"key\">transactions</span>: hasMany(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">transaction</span><span class=\"delimiter\">'</span></span>),\n\n  <span class=\"key\">incomeTransactions</span>: filter(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">transactions</span><span class=\"delimiter\">'</span></span>, <span class=\"keyword\">function</span>(transaction) {\n      <span class=\"comment\">// Grab all transactions with a positive amount.</span>\n      <span class=\"keyword\">return</span> transaction.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">amount</span><span class=\"delimiter\">'</span></span>) &gt; <span class=\"integer\">0</span>;\n    }\n  ),\n\n  <span class=\"key\">expenseTransactions</span>: filter(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">transactions</span><span class=\"delimiter\">'</span></span>, <span class=\"keyword\">function</span>(transaction) {\n      <span class=\"comment\">// Grab all transactions with a negative amount.</span>\n      <span class=\"keyword\">return</span> transaction.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">amount</span><span class=\"delimiter\">'</span></span>) &lt; <span class=\"integer\">0</span>;\n    }\n  )\n});\n</pre></td>\n</tr></table>\n</div></div>\n<p><code>tests/unit/models/month-test.js</code></p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n22\n23\n24\n25\n26\n27\n28\n29\n<strong>30</strong>\n31\n32\n33\n34\n35\n36\n37\n38\n39\n<strong>40</strong>\n41\n42\n</pre></td>\n  <td class=\"code\"><pre><span class=\"reserved\">import</span> { test, moduleForModel } from <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">ember-qunit</span><span class=\"delimiter\">'</span></span>;\n\n<span class=\"keyword\">var</span> store, month, transactions, tran1, tran2, tran3, tran4;\n\nmoduleForModel(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">month</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Unit - Month Model</span><span class=\"delimiter\">'</span></span>, {\n  <span class=\"key\">needs</span>: [<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">model:transaction</span><span class=\"delimiter\">'</span></span>],\n\n  <span class=\"function\">setup</span>: <span class=\"keyword\">function</span>(container) {\n    store = container.lookup(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">store:main</span><span class=\"delimiter\">'</span></span>);\n\n    month = <span class=\"local-variable\">this</span>.subject({\n      <span class=\"key\">name</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">June</span><span class=\"delimiter\">'</span></span>\n    });\n\n    Ember.run(<span class=\"keyword\">function</span>() {\n      tran1 = store.createRecord(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">transaction</span><span class=\"delimiter\">'</span></span>, { <span class=\"key\">amount</span>: <span class=\"integer\">100</span> });\n      tran2 = store.createRecord(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">transaction</span><span class=\"delimiter\">'</span></span>, { <span class=\"key\">amount</span>: <span class=\"integer\">200</span> });\n      tran3 = store.createRecord(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">transaction</span><span class=\"delimiter\">'</span></span>, { <span class=\"key\">amount</span>: -<span class=\"integer\">300</span> });\n      tran4 = store.createRecord(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">transaction</span><span class=\"delimiter\">'</span></span>, { <span class=\"key\">amount</span>: -<span class=\"integer\">400</span> });\n\n      transactions = [tran1, tran2, tran3, tran4];\n\n      month.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">transactions</span><span class=\"delimiter\">'</span></span>).addObjects(transactions);\n    });\n  }\n});\n\ntest(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">incomeTransactions returns positive transactions</span><span class=\"delimiter\">'</span></span>, <span class=\"keyword\">function</span>() {\n  expect(<span class=\"integer\">1</span>);\n\n  <span class=\"keyword\">var</span> results = month.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">incomeTransactions</span><span class=\"delimiter\">'</span></span>);\n\n  deepEqual(results, [tran1, tran2]);\n});\n\ntest(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">expenseTransactions returns negative transactions</span><span class=\"delimiter\">'</span></span>, <span class=\"keyword\">function</span>() {\n  expect(<span class=\"integer\">1</span>);\n\n  <span class=\"keyword\">var</span> results = month.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">expenseTransactions</span><span class=\"delimiter\">'</span></span>);\n\n  deepEqual(results, [tran3, tran4]);\n});\n</pre></td>\n</tr></table>\n</div></div>\n<p><code>app/models/transaction.js</code></p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">var</span> attr = DS.attr;\n\n<span class=\"reserved\">export</span> <span class=\"keyword\">default</span> DS.Model.extend({\n  <span class=\"key\">amount</span>: attr(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">number</span><span class=\"delimiter\">'</span></span>)\n});\n</pre></td>\n</tr></table>\n</div></div>\n<p>The month controller will handle computing the <code>incomeTotal</code> and\n<code>expenseTotal</code> for the month.</p>\n\n<p><code>app/controllers/month.js</code></p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n22\n23\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">var</span> computed = Ember.computed;\n\n<span class=\"reserved\">export</span> <span class=\"keyword\">default</span> Ember.ObjectController.extend({\n  <span class=\"key\">incomeTotal</span>: computed(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">incomeTransactions.[]</span><span class=\"delimiter\">'</span></span>, <span class=\"keyword\">function</span>() {\n    <span class=\"comment\">// Get the amount for each transaction in incomeTransactions.</span>\n    <span class=\"keyword\">var</span> amounts = <span class=\"local-variable\">this</span>.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">incomeTransactions</span><span class=\"delimiter\">'</span></span>).mapBy(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">amount</span><span class=\"delimiter\">'</span></span>);\n\n    <span class=\"comment\">// Sum the amounts</span>\n    <span class=\"keyword\">return</span> amounts.reduce(<span class=\"keyword\">function</span>(previousValue, currentValue) {\n      <span class=\"keyword\">return</span> previousValue += currentValue;\n    }, <span class=\"integer\">0</span>);\n  }),\n\n  <span class=\"key\">expenseTotal</span>: computed(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">expenseTransactions.[]</span><span class=\"delimiter\">'</span></span>, <span class=\"keyword\">function</span>() {\n    <span class=\"comment\">// Get the amount for each transaction in expenseTransactions.</span>\n    <span class=\"keyword\">var</span> amounts = <span class=\"local-variable\">this</span>.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">expenseTransactions</span><span class=\"delimiter\">'</span></span>).mapBy(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">amount</span><span class=\"delimiter\">'</span></span>);\n\n    <span class=\"comment\">// Sum the amounts</span>\n    <span class=\"keyword\">return</span> amounts.reduce(<span class=\"keyword\">function</span>(previousValue, currentValue) {\n      <span class=\"keyword\">return</span> previousValue += currentValue;\n    }, <span class=\"integer\">0</span>);\n  })\n});\n</pre></td>\n</tr></table>\n</div></div>\n<p><code>tests/unit/controllers/month-test.js</code></p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n22\n23\n24\n25\n26\n27\n28\n29\n<strong>30</strong>\n31\n32\n33\n34\n35\n36\n37\n38\n39\n<strong>40</strong>\n41\n42\n43\n44\n45\n46\n47\n48\n49\n<strong>50</strong>\n51\n52\n53\n54\n55\n56\n57\n58\n59\n<strong>60</strong>\n61\n62\n63\n64\n</pre></td>\n  <td class=\"code\"><pre><span class=\"reserved\">import</span> { test, moduleFor } from <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">ember-qunit</span><span class=\"delimiter\">'</span></span>;\n\n<span class=\"keyword\">var</span> set = Ember.set;\n\n<span class=\"keyword\">var</span> monthController, incomeTransactions, expenseTransactions;\n\nmoduleFor(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">controller:month</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Unit - Month Controller</span><span class=\"delimiter\">'</span></span>, {\n  <span class=\"function\">setup</span>: <span class=\"keyword\">function</span>() {\n    incomeTransactions = [\n      { <span class=\"key\">amount</span>: <span class=\"integer\">100</span> },\n      { <span class=\"key\">amount</span>: <span class=\"integer\">200</span> }\n    ];\n\n    expenseTransactions = [\n      { <span class=\"key\">amount</span>: -<span class=\"integer\">300</span> },\n      { <span class=\"key\">amount</span>: -<span class=\"integer\">400</span> }\n    ];\n\n    monthController = <span class=\"local-variable\">this</span>.subject({\n      <span class=\"key\">incomeTransactions</span>: incomeTransactions,\n      <span class=\"key\">expenseTransactions</span>: expenseTransactions\n    });\n  }\n});\n\ntest(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">incomeTotal returns the total of all incomeTransactions</span><span class=\"delimiter\">'</span></span>, <span class=\"keyword\">function</span>() {\n  expect(<span class=\"integer\">1</span>);\n\n  <span class=\"keyword\">var</span> result = monthController.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">incomeTotal</span><span class=\"delimiter\">'</span></span>);\n\n  equal(result, <span class=\"integer\">300</span>);\n});\n\ntest(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">incomeTotal recomputes when an incomeTransaction is added</span><span class=\"delimiter\">'</span></span>, <span class=\"keyword\">function</span>() {\n  expect(<span class=\"integer\">1</span>);\n\n  <span class=\"keyword\">var</span> newTransaction = { <span class=\"key\">amount</span>: <span class=\"integer\">500</span> };\n\n  monthController.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">incomeTransactions</span><span class=\"delimiter\">'</span></span>).addObject(newTransaction);\n\n  <span class=\"keyword\">var</span> result = monthController.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">incomeTotal</span><span class=\"delimiter\">'</span></span>);\n\n  equal(result, <span class=\"integer\">800</span>);\n});\n\ntest(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">expenseTotal returns the total of all expenseTransactions</span><span class=\"delimiter\">'</span></span>, <span class=\"keyword\">function</span>() {\n  expect(<span class=\"integer\">1</span>);\n\n  <span class=\"keyword\">var</span> result = monthController.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">expenseTotal</span><span class=\"delimiter\">'</span></span>);\n\n  equal(result, -<span class=\"integer\">700</span>);\n});\n\ntest(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">expenseTotal recomputes when an expenseTransaction is added</span><span class=\"delimiter\">'</span></span>, <span class=\"keyword\">function</span>() {\n  expect(<span class=\"integer\">1</span>);\n\n  <span class=\"keyword\">var</span> newTransaction = { <span class=\"key\">amount</span>: -<span class=\"integer\">600</span> };\n\n  monthController.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">expenseTransactions</span><span class=\"delimiter\">'</span></span>).addObject(newTransaction);\n\n  <span class=\"keyword\">var</span> result = monthController.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">expenseTotal</span><span class=\"delimiter\">'</span></span>);\n\n  equal(result, -<span class=\"integer\">1300</span>);\n});\n</pre></td>\n</tr></table>\n</div></div>\n<p>If your spidey senses are tingling, they should be. There is a lot of\nduplication going on in above code. In fact, the only difference between <code>incomeTotal</code> and\n<code>expenseTotal</code> is which set of transactions they are working with (incomeTransactions\nor expenseTransactions). Similarly, the only difference between <code>incomeTransactions</code> and <code>expenseTransactions</code>\nis whether the amount is a positive or negative number. Let&#39;s write a couple of macros to DRY up this code.</p>\n\n<h3>Creating custom Ember Macros</h3>\n\n<p>Both <code>incomeTotal</code> and <code>expenseTotal</code> have almost exactly the same\nlogic. The goal of each is to take an array of objects and return the\nsum of a specific property on each object. Let&#39;s create a <code>sumBy</code> macro\nwith the goal of being able to write something like: <code>sumBy(&#39;array&#39;, &#39;property&#39;)</code>.</p>\n\n<p><code>app/utils/sum-by.js</code></p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n</pre></td>\n  <td class=\"code\"><pre><span class=\"reserved\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span>(collection, property) {\n  <span class=\"keyword\">return</span> Ember.reduceComputed(collection, {\n    <span class=\"key\">initialValue</span>: <span class=\"float\">0.0</span>,\n\n    <span class=\"function\">addedItem</span>: <span class=\"keyword\">function</span>(accumulatedValue, item){\n      <span class=\"keyword\">return</span> accumulatedValue + Ember.get(item, property);\n    },\n\n    <span class=\"function\">removedItem</span>: <span class=\"keyword\">function</span>(accumulatedValue, item){\n      <span class=\"keyword\">return</span> accumulatedValue - Ember.get(item, property);\n    }\n  });\n}\n</pre></td>\n</tr></table>\n</div></div>\n<p><code>tests/utils/sum-by.js</code></p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n22\n23\n24\n25\n26\n27\n28\n29\n<strong>30</strong>\n31\n32\n33\n34\n35\n36\n37\n38\n39\n<strong>40</strong>\n41\n42\n</pre></td>\n  <td class=\"code\"><pre><span class=\"reserved\">import</span> { test } from <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">ember-qunit</span><span class=\"delimiter\">'</span></span>;\n<span class=\"reserved\">import</span> sumBy from <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">../../../utils/sum-by</span><span class=\"delimiter\">'</span></span>;\n\n<span class=\"keyword\">var</span> set = Ember.set;\n\n<span class=\"keyword\">var</span> bankAccount, transactions, tran1, tran2, tran3, tran4;\n\nmodule(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Unit - SumBy</span><span class=\"delimiter\">'</span></span>, {\n  <span class=\"function\">setup</span>: <span class=\"keyword\">function</span>() {\n    tran1 = { <span class=\"key\">amount</span>: <span class=\"integer\">1</span> };\n    tran2 = { <span class=\"key\">amount</span>: <span class=\"integer\">2</span> };\n    tran3 = { <span class=\"key\">amount</span>: <span class=\"integer\">3</span> };\n    tran4 = { <span class=\"key\">amount</span>: -<span class=\"integer\">4</span> };\n\n    transactions = [tran1, tran2, tran3, tran4];\n\n    bankAccount = Ember.Object.extend({\n      <span class=\"key\">transactions</span>: transactions,\n      <span class=\"key\">totalAmount</span>: sumBy(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">transactions</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">amount</span><span class=\"delimiter\">'</span></span>)\n    }).create();\n  }\n});\n\ntest(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">returns the sum of property for all objects in collection</span><span class=\"delimiter\">'</span></span>, <span class=\"keyword\">function</span>() {\n  expect(<span class=\"integer\">1</span>);\n  <span class=\"keyword\">var</span> actual = bankAccount.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">totalAmount</span><span class=\"delimiter\">'</span></span>);\n\n  deepEqual(actual, <span class=\"integer\">2</span>);\n});\n\ntest(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">recomputes when a new object is added to the collection</span><span class=\"delimiter\">'</span></span>, <span class=\"keyword\">function</span>() {\n  expect(<span class=\"integer\">2</span>);\n  deepEqual(bankAccount.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">totalAmount</span><span class=\"delimiter\">'</span></span>), <span class=\"integer\">2</span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">precondition</span><span class=\"delimiter\">'</span></span>);\n\n  <span class=\"keyword\">var</span> newTrans = { <span class=\"key\">amount</span>: <span class=\"integer\">10</span> };\n\n  bankAccount.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">transactions</span><span class=\"delimiter\">'</span></span>).addObject(newTrans);\n\n  <span class=\"keyword\">var</span> actual = bankAccount.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">totalAmount</span><span class=\"delimiter\">'</span></span>);\n\n  deepEqual(actual, <span class=\"integer\">12</span>);\n});\n</pre></td>\n</tr></table>\n</div></div>\n<p><code>incomeTransactions</code> and <code>expenseTransactions</code> could also use some\nDRYing up. The only difference between the two is whether they are\nfiltering by positive of negative numbers. Let&#39;s write a <code>filterBySign</code>\nmacro with the goal of being able to write something like: \n<code>filterBySign(&#39;array&#39;, &#39;property&#39;, &#39;+&#39;)</code>.</p>\n\n<p><code>app/utils/filter-by-sign.js</code></p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">var</span> get = Ember.get;\n<span class=\"keyword\">var</span> filter = Ember.computed.filter;\n\n<span class=\"reserved\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span>(collection, property, sign) {\n  <span class=\"keyword\">return</span> filter(collection, <span class=\"keyword\">function</span>(object) {\n    <span class=\"keyword\">return</span> (sign + <span class=\"integer\">1</span>) * get(object, property) &gt; <span class=\"integer\">0</span>;\n  });\n}\n</pre></td>\n</tr></table>\n</div></div>\n<p><code>tests/unit/utils/filter-by-sign-test.js</code></p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n22\n23\n24\n25\n26\n27\n28\n29\n<strong>30</strong>\n31\n32\n33\n34\n35\n36\n37\n38\n39\n<strong>40</strong>\n41\n42\n43\n44\n45\n46\n47\n48\n49\n<strong>50</strong>\n51\n</pre></td>\n  <td class=\"code\"><pre><span class=\"reserved\">import</span> { test } from <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">ember-qunit</span><span class=\"delimiter\">'</span></span>;\n<span class=\"reserved\">import</span> filterBySign from <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">../../../utils/filter-by-sign</span><span class=\"delimiter\">'</span></span>;\n\n<span class=\"keyword\">var</span> bankAccount, transactions, tran1, tran2, tran3, tran4;\n\nmodule(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Unit - filterBySign</span><span class=\"delimiter\">'</span></span>, {\n  <span class=\"function\">setup</span>: <span class=\"keyword\">function</span>() {\n    tran1 = { <span class=\"key\">amount</span>: <span class=\"integer\">1</span> };\n    tran2 = { <span class=\"key\">amount</span>: <span class=\"integer\">2</span> };\n    tran3 = { <span class=\"key\">amount</span>: -<span class=\"integer\">3</span> };\n    tran4 = { <span class=\"key\">amount</span>: -<span class=\"integer\">4</span> };\n\n    transactions = [tran1, tran2, tran3, tran4];\n\n    bankAccount = Ember.Object.extend({\n      <span class=\"key\">transactions</span>: transactions,\n      <span class=\"key\">positiveTransactions</span>: filterBySign(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">transactions</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">amount</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">+</span><span class=\"delimiter\">'</span></span>),\n      <span class=\"key\">negativeTransactions</span>: filterBySign(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">transactions</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">amount</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">-</span><span class=\"delimiter\">'</span></span>)\n    }).create();\n  }\n});\n\ntest(<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">'+' returns all objects with positive property values</span><span class=\"delimiter\">&quot;</span></span>, <span class=\"keyword\">function</span>() {\n  expect(<span class=\"integer\">1</span>);\n  <span class=\"keyword\">var</span> actual = bankAccount.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">positiveTransactions</span><span class=\"delimiter\">'</span></span>);\n  <span class=\"keyword\">var</span> expected = [tran1, tran2];\n\n  deepEqual(actual, expected);\n});\n\ntest(<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">'-' returns all objects with negative property values</span><span class=\"delimiter\">&quot;</span></span>, <span class=\"keyword\">function</span>() {\n  expect(<span class=\"integer\">1</span>);\n  <span class=\"keyword\">var</span> actual = bankAccount.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">negativeTransactions</span><span class=\"delimiter\">'</span></span>);\n  <span class=\"keyword\">var</span> expected = [tran3, tran4];\n\n  deepEqual(actual, expected);\n});\n\ntest(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">recomputes when a new object is added to the dependent array</span><span class=\"delimiter\">'</span></span>,\n<span class=\"keyword\">function</span>() {\n  expect(<span class=\"integer\">2</span>);\n  deepEqual(bankAccount.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">positiveTransactions</span><span class=\"delimiter\">'</span></span>), [tran1, tran2]);\n\n  <span class=\"keyword\">var</span> newTrans = { <span class=\"key\">amount</span>: <span class=\"integer\">1000</span> };\n  bankAccount.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">transactions</span><span class=\"delimiter\">'</span></span>).addObject(newTrans);\n\n  <span class=\"keyword\">var</span> actual = bankAccount.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">positiveTransactions</span><span class=\"delimiter\">'</span></span>);\n  <span class=\"keyword\">var</span> expected = [tran1, tran2, newTrans];\n\n  deepEqual(actual, expected);\n});\n</pre></td>\n</tr></table>\n</div></div>\n<p>When reading through the tests for <code>filterBySign</code>, note how much easier the setup is compared\nto our original tests for the same functionality on the <code>Month</code> model. Because\nwe&#39;re testing the code in isolation, we&#39;re able to use POJOs\nand arrays to test our code. This allows us to avoid having to work\naround the <code>Month</code> model&#39;s relationships, creating records with the\nstore and wrapping our setup code in an <code>Ember.run</code> to handle async\nbehavior. Much nicer!</p>\n\n<h3>Refactoring the Month Model and Controller</h3>\n\n<p>We can now refactor our month model and controller to use our new\nmacros.</p>\n\n<p><code>app/model/month.js</code></p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n</pre></td>\n  <td class=\"code\"><pre><span class=\"reserved\">import</span> filterBySign from <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">../utils/filter-by-sign</span><span class=\"delimiter\">'</span></span>;\n\n<span class=\"keyword\">var</span> hasMany = DS.hasMany;\n\n<span class=\"reserved\">export</span> <span class=\"keyword\">default</span> DS.Model.extend({\n  <span class=\"key\">transactions</span>: hasMany(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">transaction</span><span class=\"delimiter\">'</span></span>),\n\n  <span class=\"key\">incomeTransactions</span>: filterBySign(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">transactions</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">amount</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">+</span><span class=\"delimiter\">'</span></span>),\n  <span class=\"key\">expenseTransactions</span>: filterBySign(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">transactions</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">amount</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">-</span><span class=\"delimiter\">'</span></span>)\n});\n</pre></td>\n</tr></table>\n</div></div>\n<p><code>app/controllers/month.js</code></p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n  <td class=\"code\"><pre><span class=\"reserved\">import</span> sumBy from <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">../utils/sum-by</span><span class=\"delimiter\">'</span></span>;\n\n<span class=\"reserved\">export</span> <span class=\"keyword\">default</span> Ember.ObjectController.extend({\n  <span class=\"key\">incomeTotal</span>: sumBy(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">incomeTransactions</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">amount</span><span class=\"delimiter\">'</span></span>),\n  <span class=\"key\">expenseTotal</span>: sumBy(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">expenseTransactions</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">amount</span><span class=\"delimiter\">'</span></span>)\n});\n</pre></td>\n</tr></table>\n</div></div>\n<p>The refactored model and controller are nice and concise while still\nmaintaining their readability. We can now delete our old unit tests on\nour <code>Month</code> model and controller as they now overlap with our macro tests.\nThe net result is trimming down the code we have to maintain by about\nhalf.</p>\n\n<p>If you&#39;re thinking about writing a macro or just want to see what other macros\nare out there, check out <a href=\"https://github.com/jamesarosen/ember-cpm\">ember-cpm</a>. \nIt&#39;s a library of non-core macros that you can plug in to you Ember app.\nIf you can&#39;t find what you&#39;re looking for there, take a shot at writing\nyour own macro and send in a pull request to share it with the\ncommunity!</p>\n","summary":null,"illustration":null,"illustration_alt":null,"tags":["ember","testing","best-practices"],"shallow":false,"date":"2014-06-27T00:00:00Z"},{"id":"2014/06/24/introducing_ember_cli_addons","title":"Introducing Ember CLI Addons","dockyarder":"robert-jackson","body":"<p>Distribution of reusable Ember.js libraries has been a pain point for quite a while. During application development we have frequently wished for a silver bullet for the sharing of concepts/code from one project to another.</p>\n\n<p><a href=\"https://github.com/stefanpenner/ember-cli\">Ember CLI</a> has given us the opportunity to set the conventions for sharing that we have been searching for.</p>\n\n<p>Over the last few weeks we have been focusing our efforts on the Ember CLI Addon story, and current support the following scenarios out of the box:</p>\n\n<ul>\n<li><p>Performing operations on the <code>EmberApp</code> created in the consuming applications <code>Brocfile.js</code>. The most common things this would be used to call <code>app.import</code> (see <a href=\"http://iamstef.net/ember-cli/#managing-dependencies\">Ember CLI - Managing Dependencies</a> for more details) or process the various options provided by the consuming application. Examples: <a href=\"https://github.com/rwjblue/ember-cli-pretender\">ember-cli-pretender</a>, <a href=\"https://github.com/firebase/emberFire\">emberFire</a>, and <a href=\"https://github.com/rwjblue/ember-cli-ic-ajax\">ember-cli-ic-ajax</a></p></li>\n<li><p>Adding preprocessors to the default registry. This allows us to use a custom preprocessor to handle our templates, JavaScript, and/or styles. Example: <a href=\"https://github.com/rwjblue/ember-cli-esnext\">ember-cli-esnext</a></p></li>\n<li><p>Providing a custom application tree to be merged with the consuming application. This allows you to distribute anything that might need to be imported in the consuming application; including components, templates, routes, mixins, helpers, etc. Example: <a href=\"https://github.com/rondale-sc/ember-cli-super-number\">ember-cli-super-number</a></p></li>\n<li><p>Providing custom express middlewares. This allows for an addon to completely customize the development servers behaviors, making things like automated mock Ember Data API&#39;s actually possible. This is currently only available on master (will be available in  0.0.37 and higher).</p></li>\n</ul>\n\n<p>One of the design goals that the current crop of example addons follow is that they can all be installed and used simply via:</p>\n<div class=\"highlight bash \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>npm install --save-dev &lt;package name&gt;\n</pre></td>\n</tr></table>\n</div></div>\n<h2>Details</h2>\n\n<h3>Discovery</h3>\n\n<p>Ember CLI detects the presence of an addon by inspecting each of your applications dependencies and searching their <code>package.json</code> files for the presence of <code>ember-addon</code> in the keywords section. </p>\n\n<h3>Creation</h3>\n\n<p>Once the available addons are detected, Ember CLI will require the addon.  By default it will use standard Node.js require rules (see <a href=\"http://nodejs.org/api/modules.html#modules_all_together\">here</a> for a breakdown), but you can provide a custom entry point by specifying a <code>ember-addon-main</code> property in your <code>package.json</code>.</p>\n\n<p>Either way you go, during the various commands that cause a new build to be done (<code>ember server</code>, <code>ember test</code>, <code>ember build</code>, etc) Ember CLI will create a new instance of the class that your addon returns passing it the <code>Project</code> instance for the current project. The <code>Project</code> model has a few functions that might be useful to your addon. You can see a full list by inspecting the <a href=\"https://github.com/stefanpenner/ember-cli/blob/master/lib/models/project.js\">source</a>, but to name a few:</p>\n\n<ul>\n<li><code>require</code> -- Lets you require files or packages from the consuming application.</li>\n<li><code>config</code> -- Returns the configuration for the provided environment.</li>\n<li><code>resolve</code> -- Looks up a file from the root of the project using standard Node require semantics, but with the projects root as the base directory.</li>\n</ul>\n\n<h3>Build Process Inclusion</h3>\n\n<p>When the consuming application&#39;s <code>Brocfile.js</code> is processed by Ember CLI to build/serve/etc the addon&#39;s <code>included</code> function is called passing the <code>EmberApp</code> instance. You can use this to access the options provided (for configuration of your addon for example).</p>\n\n<h3>Intra Build Hooks</h3>\n\n<p>There are a few other points in the build process that your addon can hook into via the <code>treeFor</code> function. <code>treeFor</code> is called to setup the final build output for a few specific points in the build process. The addons <code>treeFor</code> function will be called with an argument that signifies which tree is being asked for.</p>\n\n<p>Currently, the following trees can be customized by the addon:</p>\n\n<ul>\n<li><code>app</code> -- The tree returned by your addon for the <code>app</code> tree will be merged with that of the application. This is an excellent place to add custom initializers for your addon, add routes/controllers/views/components/templates/etc (anything that goes in <code>app/</code> really). For additional information read through the <a href=\"http://hashrocket.com/blog/posts/building-ember-addons\">blog post</a> describing how <code>ember-cli-super-number</code> was turned into an addon.</li>\n<li><code>styles</code> -- The tree returned by your addon for the <code>styles</code> tree will be merged with your applications styles (generally <code>app/styles/</code>).</li>\n<li><code>vendor</code> -- The tree returned by your addon for the <code>vendor</code> tree will be merged with your applications vendor tree (generally <code>vendor/</code>). </li>\n</ul>\n\n<p>All of the trees returned by addons are merged into the corresponding tree in the application. The application&#39;s direct trees are always last so they will always override any files from an addon. This actually makes a wonderful place for application specific customization: your addon could provide a good default template, and the application can override by simply placing their own template in the same path.</p>\n\n<h2>Future</h2>\n\n<p>Many things are still planned for the &quot;Addon Story&quot; in Ember CLI. A few of them below:</p>\n\n<ul>\n<li>Allow addons to specify preferred ordering (before or after another addon). Similar in concept (and stolen from) the Ember initializer ordering. This is implemented on master and will be included in 0.0.37.</li>\n<li>Allow addons to provide a <code>blueprintPaths</code> function that will return addition paths for blueprints to be looked up. This will allow an addon to override internal blueprints or add their own.</li>\n<li>Allow more than one preprocessor to be used at once. Currently, it is only possible to have a single preprocessor, but this is a limitation if you want both SCSS and plain CSS (for example).</li>\n<li>Expose post-processed stages. This will allow for better customization of the final output which things like <a href=\"https://github.com/ai/autoprefixer\">autoprefixer</a> would be able to take advantage of.</li>\n</ul>\n\n<h2>Call To Arms</h2>\n\n<p>This API is still very fluid and not set in stone. We need as much feedback as possible to truly solidify things.</p>\n","summary":null,"illustration":null,"illustration_alt":null,"tags":["ember","ember-cli"],"shallow":false,"date":"2014-06-24T00:00:00Z"},{"id":"2014/06/23/kapow-using-framer","title":"KAPOW! Writing prototypes with Framer","dockyarder":"steven-trevathan","body":"<p>I&#39;ve finally used <a href=\"http://framerjs.com/\">Framer</a> on a client project and couldn&#39;t be happier with the result. I normally use <a href=\"http://www.invisionapp.com/\">InVision</a> and highly recommend it, but Framer is the obvious choice when we need the experience to feel significantly more real.</p>\n\n<p><a href=\"http://www.cooper.com/journal/2013/07/designers-toolkit-proto-testing-for-prototypes\">Every tool has its pros and cons</a>, however, so it won&#39;t <em>always</em> be the best choice for you.</p>\n\n<p>Let me start with Framer&#39;s big con: you must write JavaScript to knit a prototype together. The code itself is very easy to learn, but understanding how the Framer script interacts with your PSD&#39;s groups and layer organization is like flying blind. With practice you can get past this and work gets much, much faster.</p>\n\n<p>The one other con is that their documentation is made more for developers than designers. So if you&#39;re not used to digging into developer docs you will likely be overwhelmed and unsure what you&#39;re looking for. Looking elsewhere won&#39;t help you either, there doesn&#39;t seem to be much community around this (yet).</p>\n\n<p>Someone with less coding experience will find Framer difficult and more intimidating than it has to be. I&#39;d recommend dealing with the learning curve by practicing on a few side projects before you put anything important on the line (not that side projects aren&#39;t important).</p>\n\n<p>Where Framer really shines bright: you won&#39;t have to verbalize (or make embarrassing gestures) for how your app should feel, because you define that with enormous control. Oddly enough, the biggest con is your ally here, as writing custom JavaScript is what makes this control possible.</p>\n\n<p>Framer supports clicks and taps just the same, supports many animation options, is highly configurable, and runs very, very smoothly on all (of my) devices. I&#39;ve tested it on iPhone, iPad, and a Mac. Because of this control and variability of use, your prototypes will feel much more real to the user in a testing scenario. This is especially good when your interactions help communicate state and position.</p>\n\n<p>If you&#39;ve used Framer before, let me know how you like it. There&#39;s only so much time in the world to play with prototyping tools, but my next experiment will be with <a href=\"http://facebook.github.io/origami/\">Origami</a>.</p>\n\n<h2>Bonus!</h2>\n\n<p>While doing user testing sessions, you may want the testee to work on the actual device. To do so you can use <a href=\"http://anvilformac.com/\">Anvil</a> to create a local web address using <a href=\"http://pow.cx/\">Pow</a>. This will give you an address (something like <code>http://yourappname.youripaddress.xip.io/</code>) that you may access on your device.</p>\n","summary":"A look at Framer.js, a powerful prototyping tool.","illustration":null,"illustration_alt":null,"tags":["design","design-process","prototyping"],"shallow":false,"date":"2014-06-23T00:00:00Z"},{"id":"2014/06/23/goodbye-heroku","title":"Goodbye Heroku","dockyarder":"brian-cardarella","body":"<p>I&#39;ve been a Heroku user since the beginning. And I understand they have\nhad their ups and downs but over the past 2 years the service has been\ndegrading and today was the last straw for me. Allow me to elaborate.</p>\n\n<h2>Downtime</h2>\n\n<p>Today Heroku had a &quot;Scheduled Maintenance at 2pm EST&quot;. First of all,\nthis is just stupid. Don&#39;t schedule a maintenance period at 2pm EST for\n<strong>anything</strong>. That period of time has to be one of the most heavily\ntrafficked timeslots on the web. Its an hour after everyone on the East\nCoast has come back from lunch. It is an hour before lunch on the West\nCoast. This, to me, demonstrates a lack of judgement on Heroku&#39;s part. I\nknow the counter-argument is going to be &quot;we&#39;ve done plenty of other\nscheduled maintenances at 2pm EST without incident&quot;. My reply is that\nthis counter-argument is <em>bullshit</em>. Just because you got away without\nproblems previously doesn&#39;t mean they won&#39;t happen in the future. Things\ngo wrong, people screw up. When Heroku has control over when those\nscrewups occur and they choose to push that risk at 2pm EST that is a\nproblem.</p>\n\n<h2>Reporting of Downtime</h2>\n\n<p>I am convinced their Status team just sits on Twitter all day and waits\nfor enough people to bitch and complain that Heroku is down before they\nupdate the status page. I don&#39;t care what data they provide to the\ncontrary. Why is the updated status page important? When our customers\nemail us during our vacation pissed off that we are not around and we\nhave <em>nothing</em> to show to them to prove that this is Heroku&#39;s fault and\nnot ours, to me that status page being updated immediately <strong>before</strong>\nour customers discover on their own is very important.</p>\n\n<h2>Price</h2>\n\n<p>It has been heavily reported that AWS has cut their pricing quite a bit\nover the past few years. Yet, how many times has Heroku reduced its\nprice? (Heroku resells AWS) To my knowledge <strong>zero</strong>. So everytime Amazon\nreduces EC2 pricing Heroku just pockets the difference and gives a &quot;fuck\nyou very much!&quot; to all of its customers.</p>\n\n<h2>Fixes for All</h2>\n\n<p>The major downside to hosted devops is that when something goes wrong\nthat affects everyone you usually have to wait until they make the fix\nfor <strong>everyone</strong> before your app comes back up. What should probably be\na 5 minute downtime <em>at most</em> turns into a 30 minute downtime <strong>at least</strong>.</p>\n\n<h2>Buildpacks</h2>\n\n<p>Buildpacks are just terrible.</p>\n\n<h2>Conclusion</h2>\n\n<p>I get that I&#39;m ranting and I&#39;m pretty pissed off. But mistakes like\ntoday&#39;s are completely avoidable yet Heroku chose to expose everyone to\nthis increased risk for no good reason that I can see.</p>\n\n<p>We will no longer be starting any new customers on Heroku. And we will\nrecommend to our current customers to move off of Heroku. We&#39;re big fans\nof Digital Ocean so we&#39;re likely to land there as our preferred hosting\nservice.</p>\n","summary":"Done with them","illustration":null,"illustration_alt":null,"tags":["opinion"],"shallow":false,"date":"2014-06-23T00:00:00Z"},{"id":"2014/06/21/making-the-diy-badges","title":"Making the DIY conference badges","dockyarder":"maria-matveeva","body":"<p>What are badges for, anyway? At any professional event with more than fifteen people, we wear some sort of name tag.</p>\n\n<h2>The current situation with badges:</h2>\n\n<p>If it&#39;s a smaller or low budget event, you get a shipping label and write your name with a sharpie, then stick to your shirt and hope it holds. (I always stick mine to a pant leg just because.) </p>\n\n<p>A step up would be vinyl stickers or shipping labels with something like the conference name printed on them, but again attendees must write their name. </p>\n\n<p>At the highest level of badge, you arrive an event and receive a fully branded badge on a colorful lanyard with your name and photo printed on both sides, to prevent you from lending your $800 conference pass to a friend.</p>\n\n<h2>Three things badges do best:</h2>\n\n<ol>\n<li>Prove that you&#39;ve paid for your ticket</li>\n<li>Help brand the event</li>\n<li>Help you meet people</li>\n</ol>\n\n<p>Our focus for the badges was mostly to help people meet and talk, and if we get to show off the Wicked Good Conferences brand - that&#39;s cool too. We did not rely on the badges for ticketing because the event is relatively small, and held in a single location. There were no repeated check-ins at the door or strangers walking in off the relatively low traffic street.</p>\n\n<p>This allowed me the freedom to experiment with the badges. The only restriction was the budget; we wanted to make about 200 customizable name badges with a budget range of $20\u2013$50. This is not a realistic budget for high quality &quot;professionally&quot; printed badges (decent custom lanyards alone are at least $1 each).</p>\n\n<h2>No printed names</h2>\n\n<p>We decided to skip printing people&#39;s names altogether, and ask them to write names instead. This also allowed people to put a twitter handle and other useful information on the badges, and be funny with them. I am an introvert, so I appreciate any excuse to start a conversation. Stickers, twitter handles and stick figures on badges helped make interaction easier.</p>\n\n<p><img src=\"/images/post-assets/maria/DIY-badges-01.jpg\" alt=\"\"></p>\n\n<h2>No printed lanyards</h2>\n\n<p>Custom printed lanyards, in the quality we wanted, were way above our budget. Instead, we tried a few DIY ideas: string, ribbon, rope and strips of jersey fabric. The fabric turned out to be the most comfortable to wear. Knit jersey (&quot;tee-shirt&quot;) fabric will roll into a soft string if you cut 1&quot; wide strips and stretch them out. We used about 2.5 yards of 52&quot; wide fabric to make the 200 strips. We could make the strips a half to a third of the width of the fabric, depending on how long we wanted the strips to be.</p>\n\n<p><img src=\"/images/post-assets/maria/DIY-badges-02.jpg\" alt=\"\"></p>\n\n<p>An added benefit of using fabric is a much better selection of colors compared to lanyards. We managed to get a near-perfect match to our attendee shirts!</p>\n\n<p><img src=\"/images/post-assets/maria/DIY-badges-03.jpg\" alt=\"\"></p>\n\n<h2>Actually, no printed anything</h2>\n\n<p>To make a color impression at a low cost we used a rubber stamp with a purple ink pad. We did not commit to placing any sponsor logos on the badges, so I had complete freedom with this design. We ordered a rubber stamp of the Wicked Good Conferences logo by itself so we can reuse it for the next conferences. To make the badge itself, we stamped and punched a hole in standard 3\u00d75&quot; index cards.</p>\n\n<p><img src=\"/images/post-assets/maria/DIY-badges-04.jpg\" alt=\"\">\n<img src=\"/images/post-assets/maria/DIY-badges-05.jpg\" alt=\"\"></p>\n\n<h2>Budget breakdown</h2>\n\n<ul>\n<li>1\u00d72&quot; Custom rubber stamp&quot;: $12 + shipping</li>\n<li>Purple ink pad: $3.50</li>\n<li>Index cards, 2 packs of 100: ~$7</li>\n<li>Single hole punch: ~$5</li>\n<li>Jersey fabric (we already had it, but if you need to buy it cost about $5/yard): free or $15</li>\n</ul>\n\n<h2>Lessons learned</h2>\n\n<p>The badges felt about right for the event, not too formal, not too shabby. Some lanyards turned out a bit short, but people were creative with placement, wearing them not only around the neck but on a sleeve, on the hat, tying them to the belt loop or a shirt button, and even wearing as a soft choker.\nNext time around we can also experiment with other paper types and have the paper cut to size, to allow for a sturdier badge in a wider range of colors.</p>\n\n<p>Were you at WGE? Let us know what you thought of the DIY badges!</p>\n","summary":"What are badges for, anyway?","illustration":null,"illustration_alt":null,"tags":["design","diy","events"],"shallow":false,"date":"2014-06-21T00:00:00Z"},{"id":"2014/06/15/swift-and-javascript","title":"Swift and JavaScript","dockyarder":"alex-navasardyan","body":"<p>You might have already heard about a new language from Apple, <a href=\"https://developer.apple.com/swift/\">Swift</a>.\nIf you haven&#39;t, make sure to check it out. This is the language that is going to replace <a href=\"https://en.wikipedia.org/wiki/Objective-C\">Objective-C</a> in the future.</p>\n\n<p>So why should a JavaScript developer be excited about a language like Swift?\nBecause semicolons are optional in Swift, too.</p>\n\n<h3>Variables</h3>\n\n<p>Let&#39;s declare a variable in <code>JavaScript</code>:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">var</span> country = <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Argentina</span><span class=\"delimiter\">'</span></span>;\n</pre></td>\n</tr></table>\n</div></div>\n<p>Here&#39;s how the same declaration looks like in Swift:</p>\n<div class=\"highlight swift \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>var country: String = &quot;Argentina&quot;;\n</pre></td>\n</tr></table>\n</div></div>\n<p>However, the same statement can be rewritten as such:</p>\n<div class=\"highlight swift \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>var country = &quot;Argentina&quot;; // inferred as String\n</pre></td>\n</tr></table>\n</div></div>\n<p>Swift uses type inference. It looks on the right hand side of the assignment\nto figure out the type of the variable.</p>\n\n<p>Swift is type safe language. It performs type checks during compilation time\nand informs you if there are any type mismatch errors. Unlike in JavaScript,\nthat means that after you defined <code>country</code> variable and its type was\ninferred to be <code>String</code>, you can&#39;t re-assign with another type:</p>\n<div class=\"highlight swift \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>country = 2; // Cannot convert the expression's type to type 'String'\n</pre></td>\n</tr></table>\n</div></div>\n<h3>Constants</h3>\n\n<p>JavaScript doesn&#39;t have a concept of a <code>constant</code>. All &quot;constants&quot; are just\nvariables (typically in the outer scope). You can &quot;freeze&quot; the object using\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\">Object.freeze()</a>\nto prevent new properties to be added and existing properties to be removed.</p>\n\n<p>The next version of JavaScript is going to introduce <a href=\"https://people.mozilla.org/%7Ejorendorff/es6-draft.html#sec-13.2.1\">const</a>\nkeyword and will support constants:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n  <td class=\"code\"><pre>const y = <span class=\"integer\">10</span>; <span class=\"comment\">// Note that you need to specift the value of the constant</span>\ny = <span class=\"integer\">20</span>;       <span class=\"comment\">// SyntaxError: Assignment to constant variable</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>If you want to define a constant in Swift, you will use <code>let</code> keyword:</p>\n<div class=\"highlight swift \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n  <td class=\"code\"><pre>let bestCity = &quot;Boston&quot;;\nbestCity = &quot;Cape Town&quot;; // Cannot assign to 'let' value 'bestCity'\n\n// Swift allows you to use underscore as a delimiter\n// to improve readability of your code\nlet oneMillion = 1_000_000;\n</pre></td>\n</tr></table>\n</div></div>\n<h3>Tuples</h3>\n\n<p>So what is a <a href=\"http://en.wikipedia.org/wiki/Tuple\">tuple</a>? TL;DR it&#39;s an ordered list of things.</p>\n\n<p>You can think of a tuple as if it&#39;s an object:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">var</span> villain = {\n  <span class=\"key\">name</span>:     <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Magneto</span><span class=\"delimiter\">'</span></span>,\n  <span class=\"key\">realName</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Max Eisenhardt</span><span class=\"delimiter\">'</span></span>,\n  <span class=\"key\">powers</span>:   [<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Magnetic flight</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Magnetic force fields</span><span class=\"delimiter\">'</span></span>]\n};\n\nvillain.name; <span class=\"comment\">// =&gt; 'Magneto'</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>In Swift, the declaration of a tuple will look like this:</p>\n<div class=\"highlight swift \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n  <td class=\"code\"><pre>let villain = (\n  name:     &quot;Magneto&quot;,\n  realName: &quot;Max Eisenhardt&quot;,\n  powers:   [&quot;Magnetic flight&quot;, &quot;Magnetic force fields&quot;]\n);\n\nvillain.name; // =&gt; &quot;Magneto&quot;\nvillain.1;    // =&gt; &quot;Max Eisenhardt&quot;\nvillain.2;    // =&gt; [...]\n</pre></td>\n</tr></table>\n</div></div>\n<p>Tuples are useful when you want to return multiple values from a function as a single compound value (that is\nexactly what we do so often in JavaScript).</p>\n\n<h3>Arrays and Dictionaries</h3>\n\n<p>Definining an array or a dictionary looks very similar.</p>\n\n<p>In JavaScript:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">var</span> names = [<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Alex</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Rob</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Dan</span><span class=\"delimiter\">'</span></span>];\n<span class=\"keyword\">var</span> ages  = { <span class=\"key\"><span class=\"delimiter\">'</span><span class=\"content\">Alex</span><span class=\"delimiter\">'</span></span>: <span class=\"integer\">13</span>, <span class=\"key\"><span class=\"delimiter\">'</span><span class=\"content\">Rob</span><span class=\"delimiter\">'</span></span>: <span class=\"integer\">5</span>, <span class=\"key\"><span class=\"delimiter\">'</span><span class=\"content\">Dan</span><span class=\"delimiter\">'</span></span>: <span class=\"integer\">4</span> };\n\nnames[<span class=\"integer\">0</span>];     <span class=\"comment\">// =&gt; 'Alex'</span>\nages[<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Alex</span><span class=\"delimiter\">'</span></span>]; <span class=\"comment\">// =&gt; 13</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>In Swift:</p>\n<div class=\"highlight swift \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n  <td class=\"code\"><pre>var names = [&quot;Alex&quot;, &quot;Rob&quot;, &quot;Dan&quot;];\nvar ages  = [&quot;Alex&quot;: 13, &quot;Rob&quot;: 5, &quot;Dan&quot;: 4];\n\nnames[0];     // =&gt; &quot;Alex&quot;\nages[&quot;Alex&quot;]; // 13\n</pre></td>\n</tr></table>\n</div></div>\n<h3>Generics</h3>\n\n<p>In a very generic, hand wavy terms <code>Generics</code> introduce type safety and reusability of the code. They&#39;re frequently used\nin classes and methods that operate on them.</p>\n\n<p>To illustrate what <code>Generics</code> are, let&#39;s implement a <a href=\"https://en.wikipedia.org/wiki/Queue_(abstract_data_type)\"><code>Queue</code></a>.</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">function</span> <span class=\"function\">Queue</span>() {\n  <span class=\"local-variable\">this</span>._queue = [];\n}\n\nQueue.prototype.<span class=\"function\">enqueue</span> = <span class=\"keyword\">function</span>(item) {\n  <span class=\"local-variable\">this</span>._queue.push(item);\n}\n\nQueue.prototype.<span class=\"function\">dequeue</span> = <span class=\"keyword\">function</span>() {\n <span class=\"keyword\">return</span> <span class=\"local-variable\">this</span>._queue.shift();\n}\n\n<span class=\"keyword\">var</span> queue = <span class=\"keyword\">new</span> Queue();\n\nqueue.enqueue(<span class=\"integer\">2</span>);\nqueue.enqueue(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">3</span><span class=\"delimiter\">'</span></span>);\nqueue.enqueue(<span class=\"float\">0.5</span>);\n</pre></td>\n</tr></table>\n</div></div>\n<p>Now wasn&#39;t that easy, eh?</p>\n\n<p>Note, that you don&#39;t have to care about types in JavaScript that much. You just <code>enqueue</code> a value of any type\nand you&#39;re all set.</p>\n\n<p>Swift is different. You can&#39;t push objects of different types onto the array.</p>\n\n<p>Here&#39;s a <code>Queue</code> class for <code>Integer</code> values:</p>\n<div class=\"highlight swift \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n</pre></td>\n  <td class=\"code\"><pre>class Queue {\n  var _queue = Int[]();\n\n  func enqueue(item: Int) {\n    _queue.append(item);\n  }\n\n  func dequeue() -&gt; Int {\n    return _queue.removeAtIndex(0);\n  }\n}\n\nvar queue = Queue();\n\nqueue.enqueue(2);\nqueue.enqueue(3);\nqueue.enqueue(4);\nqueue.enqueue(&quot;4&quot;); // Cannot convert the expression's type to type 'Int'\n</pre></td>\n</tr></table>\n</div></div>\n<p>What if you want to create a <code>Queue</code> class for <code>String</code> values? You&#39;re going to have copy implementation of <code>Queue&lt;Int&gt;</code> class\nand replace <code>Int</code> with <code>String</code>. A lot of code duplication. Here&#39;s where <code>Generics</code> shine.</p>\n<div class=\"highlight swift \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n22\n</pre></td>\n  <td class=\"code\"><pre>class Queue&lt;T&gt; {\n  var _queue = T[]();\n\n  func enqueue(item: T) {\n    _queue.append(item);\n  }\n\n  func dequeue() -&gt; T {\n    return _queue.removeAtIndex(0);\n  }\n}\n\nvar intQueue    = Queue&lt;Int&gt;();\nvar stringQueue = Queue&lt;String&gt;();\n\nintQueue.enqueue(2);\nintQueue.enqueue(3);\nintQueue.enqueue(4);\n\nstringQueue.enqueue(&quot;2&quot;);\nstringQueue.enqueue(&quot;3&quot;);\nstringQueue.enqueue(&quot;4&quot;);\n</pre></td>\n</tr></table>\n</div></div>\n<p>Now you can create <code>Queue</code> of the different types with just one <code>Queue</code> implementation.</p>\n\n<h3>Conclusion</h3>\n\n<p>Swift is a step in the right direction in my opinion. They lowered the &quot;language ramp up&quot; time by simplifying Objective-C syntax\nquite a bit without damaging the power of the language. I feel like it looks really compelling to JavaScript developers.</p>\n","summary":"Swift explained for JavaScript developers","illustration":null,"illustration_alt":null,"tags":["javascript","swift"],"shallow":false,"date":"2014-06-15T00:00:00Z"},{"id":"2014/06/06/process-paradox","title":"The Process Paradox","dockyarder":"jon-lacks","body":"<p>If it feels like process, it is not working\u2026 It should feel like a logical means to achieve an end.</p>\n\n<p>For much of my career as a Project Manager I have been inundated with software development process, theories, techniques, methodologies and related tools - which by association has trickled into the teams I have worked with.  Over time I have observed team members feeling the frustration that \u201cProcess\u201d can bring to a project when it is applied in a theoretical way vs. a practical way.  Have you ever facilitated a planning meeting while team members glaze over and bury their heads into their laptops? To all my Project Management brethren - if this is something you are observing in your teams, don\u2019t accept this reality; realize that your process &quot;is not working&quot;.</p>\n\n<p>The art of project management is not dictating process but finding practices that align with the team\u2019s needs and context.   For purposes of this blog post these are the \u201clogical means\u201d I refer to in my opening statement above.  A little Scrum here, a little Waterfall there, and a sprinkle of Kanban might be the right recipe for a particular project - whereas it could be totally wrong for another.   </p>\n\n<p>In many ways this context is driven by the pyramid of constraints - cost/scope/time, which is project management 101.  However, other contexts might be size of team, remote/co-located, green-field development, team member experience, criticality of deliverables to human life, number of stakeholders, thick/thin management hierarchy, complexity of business rules/logic, and many others which are industry specific.  </p>\n\n<p>One of my biggest gripes with the \u201cAgile\u201d movement is that companies/teams are adopting variations of the methodology as a prescription to execute projects. I am pretty damn sure the pioneering thinkers who wrote the Agile Manifesto wanted teams to become more principled in thinking about the practices they chose to use vs. following the playbook blindly and not making sure it aligns with the project context.</p>\n\n<p>It has been very affirming to know that engineers and designers in large and small companies loath process \u2013 I\u2019d say this is pretty universal. However, I have found that these same people are incredibly logical people who are willing to do something non-engineering/design related if  they feel deep down it is a \u201clogical means to achieve an end.\u201d I believe it is the project manager\u2019s responsibility as a servant leader to make sure teams don\u2019t feel like process is holding them back but that it is helping them move forward.</p>\n\n<p>What I love about being a Project Manager at DockYard is the diversity of the project contexts that come through our door. For me it is and has been a great way to experiment, mix, and match processes to find the right practices for a team/project context.  I believe that DockYard\u2019s acknowledgment of this reality allows us to better serve our clients\u2019 unique contexts.  Not by accident - it is a very deliberate way to approach projects and one size never fits all.   </p>\n","summary":null,"illustration":null,"illustration_alt":null,"tags":["process","agile"],"shallow":false,"date":"2014-06-06T00:00:00Z"},{"id":"2014/05/31/building-an-ember-app-with-rails-part-4","title":"Building an Ember App with Rails Part 4","dockyarder":"brian-cardarella","body":"<p><em>This is a four-part series:\n<a href=\"http://reefpoints.dockyard.com/2014/05/07/building-an-ember-app-with-rails-part-1.html\">Part 1</a>,\n<a href=\"http://reefpoints.dockyard.com/2014/05/08/building-an-ember-app-with-rails-part-2.html\">Part 2</a>,\n<a href=\"http://reefpoints.dockyard.com/2014/05/09/building-an-ember-app-with-rails-part-3.html\">Part 3</a>,\n<a href=\"http://reefpoints.dockyard.com/2014/05/31/building-an-ember-app-with-rails-part-4.html\">Part 4</a></em></p>\n\n<p>Before we get underway we need to update ember-data in our project to at\nleast <code>1.0.0-beta.8</code>. Open <code>ember/bower.json</code> and if you have any version\nless than 8 you&#39;ll need to update to at least 8. If you are already on 8\nor higher you won&#39;t need to do anything.</p>\n\n<p>Once you&#39;ve made the change save the file and run <code>bower install</code> from\nthe <code>ember/</code> directory. If you are asked to choose between different\nversions of ember-data make sure you choose the correct one.</p>\n\n<p>In this part we&#39;ll add Presentations to each of the Speaker pages. This\nmeans we&#39;ll have to add a relationship between two models.</p>\n\n<p>In <code>ember/tests/integration/speakers-page-test.js</code> modify the test\n&quot;Should list all speakers and number of presentations&quot;</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\">// ember/tests/integration/speaker-page-test.js</span>\n\ntest(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Should list all speakers and number of presentations</span><span class=\"delimiter\">'</span></span>, <span class=\"keyword\">function</span>() {\n  visit(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">/speakers</span><span class=\"delimiter\">'</span></span>).then(<span class=\"keyword\">function</span>(assert) {\n    assert.equal(find(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">a:contains(&quot;Bugs Bunny (2)&quot;)</span><span class=\"delimiter\">'</span></span>).length, <span class=\"integer\">1</span>);\n    assert.equal(find(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">a:contains(&quot;Wile E. Coyote (1)&quot;)</span><span class=\"delimiter\">'</span></span>).length, <span class=\"integer\">1</span>);\n    assert.equal(find(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">a:contains(&quot;Yosemite Sam (3)&quot;)</span><span class=\"delimiter\">'</span></span>).length, <span class=\"integer\">1</span>);\n  });\n});\n</pre></td>\n</tr></table>\n</div></div>\n<p>The number in the parentheses will represent the number of presentations that this speaker \nhas given.</p>\n\n<p>Next we need to modify our <code>beforeEach</code> function</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n22\n23\n24\n25\n26\n27\n28\n29\n<strong>30</strong>\n31\n32\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\">// ember/tests/integration/speaker-page-test.js</span>\n\n<span class=\"keyword\">var</span> speakers = [\n  { <span class=\"key\">id</span>: <span class=\"integer\">1</span>, <span class=\"key\">name</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Bugs Bunny</span><span class=\"delimiter\">'</span></span>, <span class=\"key\">presentation_ids</span>: [<span class=\"integer\">1</span>,<span class=\"integer\">2</span>] },\n  { <span class=\"key\">id</span>: <span class=\"integer\">2</span>, <span class=\"key\">name</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Wile E. Coyote</span><span class=\"delimiter\">'</span></span>, <span class=\"key\">presentation_ids</span>: [<span class=\"integer\">3</span>] },\n  { <span class=\"key\">id</span>: <span class=\"integer\">3</span>, <span class=\"key\">name</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Yosemite Sam</span><span class=\"delimiter\">'</span></span>, <span class=\"key\">presentation_ids</span>: [<span class=\"integer\">4</span>,<span class=\"integer\">5</span>,<span class=\"integer\">6</span>] }\n];\n\n<span class=\"keyword\">var</span> presentations = [\n  { <span class=\"key\">id</span>: <span class=\"integer\">1</span>, <span class=\"key\">title</span>: <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">What's up with Docs?</span><span class=\"delimiter\">&quot;</span></span>, <span class=\"key\">speaker_id</span>: <span class=\"integer\">1</span> },\n  { <span class=\"key\">id</span>: <span class=\"integer\">2</span>, <span class=\"key\">title</span>: <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">Of course, you know, this means war.</span><span class=\"delimiter\">&quot;</span></span>, <span class=\"key\">speaker_id</span>: <span class=\"integer\">1</span> },\n  { <span class=\"key\">id</span>: <span class=\"integer\">3</span>, <span class=\"key\">title</span>: <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">Getting the most from the Acme categlog.</span><span class=\"delimiter\">&quot;</span></span>, <span class=\"key\">speaker_id</span>: <span class=\"integer\">2</span> },\n  { <span class=\"key\">id</span>: <span class=\"integer\">4</span>, <span class=\"key\">title</span>: <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">Shaaaad up!</span><span class=\"delimiter\">&quot;</span></span>, <span class=\"key\">speaker_id</span>: <span class=\"integer\">3</span> },\n  { <span class=\"key\">id</span>: <span class=\"integer\">5</span>, <span class=\"key\">title</span>: <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">Ah hates rabbits.</span><span class=\"delimiter\">&quot;</span></span>, <span class=\"key\">speaker_id</span>: <span class=\"integer\">3</span> },\n  { <span class=\"key\">id</span>: <span class=\"integer\">6</span>, <span class=\"key\">title</span>: <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">The Great horni-todes</span><span class=\"delimiter\">&quot;</span></span>, <span class=\"key\">speaker_id</span>: <span class=\"integer\">3</span> }\n];\n\nserver = <span class=\"keyword\">new</span> Pretender(<span class=\"keyword\">function</span>() {\n  <span class=\"local-variable\">this</span>.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">/api/speakers</span><span class=\"delimiter\">'</span></span>, <span class=\"keyword\">function</span>(request) {\n    <span class=\"keyword\">return</span> [<span class=\"integer\">200</span>, {<span class=\"key\"><span class=\"delimiter\">&quot;</span><span class=\"content\">Content-Type</span><span class=\"delimiter\">&quot;</span></span>: <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">application/json</span><span class=\"delimiter\">&quot;</span></span>}, JSON.stringify({<span class=\"key\">speakers</span>: speakers, <span class=\"key\">presentations</span>: presentations})];\n  });\n\n  <span class=\"local-variable\">this</span>.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">/api/speakers/:id</span><span class=\"delimiter\">'</span></span>, <span class=\"keyword\">function</span>(request) {\n    <span class=\"keyword\">var</span> speaker = speakers.find(<span class=\"keyword\">function</span>(speaker) {\n      <span class=\"keyword\">if</span> (speaker.id === parseInt(request.params.id, <span class=\"integer\">10</span>)) {\n        <span class=\"keyword\">return</span> speaker;\n      }\n    });\n\n    <span class=\"keyword\">return</span> [<span class=\"integer\">200</span>, {<span class=\"key\"><span class=\"delimiter\">&quot;</span><span class=\"content\">Content-Type</span><span class=\"delimiter\">&quot;</span></span>: <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">application/json</span><span class=\"delimiter\">&quot;</span></span>}, JSON.stringify({<span class=\"key\">speaker</span>: speaker, <span class=\"key\">presentations</span>: presentations})];\n  });\n});\n</pre></td>\n</tr></table>\n</div></div>\n<p>Completely replace the <code>speakers</code> variable that was previously there. The only change to the API stub is that\n<code>presentations</code> is being added to the payload. The JSON here is the\nstyle of JSON that ember-data expects to be emitted. We are returning a\npayload that includes all speakers and presentations. The speaker\nrecords include ids referencing the presentations associated.</p>\n\n<p>We can now add the Presentation model to our Ember app:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\">// ember/app/models/presentation.js</span>\n<span class=\"reserved\">import</span> DS from <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">ember-data</span><span class=\"delimiter\">'</span></span>;\n\n<span class=\"reserved\">export</span> <span class=\"keyword\">default</span> DS.Model.extend({\n  <span class=\"key\">title</span>: DS.attr(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">string</span><span class=\"delimiter\">'</span></span>),\n  <span class=\"key\">speaker</span>: DS.belongsTo(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">speaker</span><span class=\"delimiter\">'</span></span>)\n}); \n</pre></td>\n</tr></table>\n</div></div>\n<p>We&#39;ve told ember-data to expect the Presentation model to belong to the\nSpeaker model. Let&#39;s set the inverse relationship</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\">// ember/app/models/speaker.js</span>\n<span class=\"reserved\">import</span> DS from <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">ember-data</span><span class=\"delimiter\">'</span></span>;\n\n<span class=\"reserved\">export</span> <span class=\"keyword\">default</span> DS.Model.extend({\n  <span class=\"key\">name</span>: DS.attr(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">string</span><span class=\"delimiter\">'</span></span>),\n  <span class=\"key\">presentations</span>: DS.hasMany(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">presentation</span><span class=\"delimiter\">'</span></span>)\n});\n</pre></td>\n</tr></table>\n</div></div>\n<p>Modifying our existing Speaker model to add to relationship to its many\nPresentation models.</p>\n\n<p>Finally to make this tests green we need to change our template:</p>\n<div class=\"highlight handlebars \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n  <td class=\"code\"><pre>// ember/app/templates/speakers/index.hbs\n\n<span class=\"inline\"><span class=\"inline-delimiter\">{{#</span><span class=\"attribute-name\">each</span><span class=\"inline-delimiter\">}}</span></span>\n <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"error\">~</span><span class=\"error\">#</span><span class=\"attribute-name\">link-to</span> <span class=\"error\">'</span><span class=\"attribute-name\">speakers.show</span><span class=\"error\">'</span> <span class=\"attribute-name\">this</span><span class=\"inline-delimiter\">}}</span></span>\n   <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">name</span><span class=\"inline-delimiter\">}}</span></span> (<span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">presentations.length</span><span class=\"inline-delimiter\">}}</span></span>)\n <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"error\">~</span><span class=\"error\">/</span><span class=\"attribute-name\">link-to</span><span class=\"inline-delimiter\">}}</span></span>\n<span class=\"inline\"><span class=\"inline-delimiter\">{{/</span><span class=\"attribute-name\">each</span><span class=\"inline-delimiter\">}}</span></span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Notice that we we can call regular JavaScript properties like <code>length</code> on the association.\nThere is also a slight change that I&#39;ve made to the <code>link-to</code>. Adding\n<code>~</code> will <a href=\"http://handlebarsjs.com/block_helpers.html#whitespace-control\">tell Handlebars how to control\nwhitespace</a>.</p>\n\n<p>At this point our new test should be green. Lets add another.</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\">// ember/tests/integration/speaker-page-test.js</span>\n\ntest(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Should list all presentations for a speaker</span><span class=\"delimiter\">'</span></span>, <span class=\"keyword\">function</span>(assert) {\n  visit(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">/speakers/1</span><span class=\"delimiter\">'</span></span>).then(<span class=\"keyword\">function</span>(assert) {\n    assert.equal(find(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">li:contains(&quot;What</span><span class=\"char\">\\'</span><span class=\"content\">s up with Docs?&quot;)</span><span class=\"delimiter\">'</span></span>).length, <span class=\"integer\">1</span>);\n    assert.equal(find(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">li:contains(&quot;Of course, you know, this means war.&quot;)</span><span class=\"delimiter\">'</span></span>).length, <span class=\"integer\">1</span>);\n  });\n});\n</pre></td>\n</tr></table>\n</div></div>\n<p>This new test is asserting that when we visit a given speaker&#39;s page all\nof those speaker&#39;s presentations will be listed. We first need to add\npresentation data to the API stub (within our <code>beforeEach</code> function) for visiting a speaker page.</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\">// ember/tests/integration/speaker-page-test.js</span>\n\n<span class=\"local-variable\">this</span>.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">/api/speakers/:id</span><span class=\"delimiter\">'</span></span>, <span class=\"keyword\">function</span>(request) {\n  <span class=\"keyword\">var</span> speaker = speakers.find(<span class=\"keyword\">function</span>(speaker) {\n    <span class=\"keyword\">if</span> (speaker.id === parseInt(request.params.id, <span class=\"integer\">10</span>)) {\n      <span class=\"keyword\">return</span> speaker;\n    }\n  });\n\n  <span class=\"keyword\">var</span> speakerPresentations = presentations.filter(<span class=\"keyword\">function</span>(presentation) {\n    <span class=\"keyword\">if</span> (presentation.speaker_id === speaker.id) {\n      <span class=\"keyword\">return</span> <span class=\"predefined-constant\">true</span>;\n    }\n  });\n\n  <span class=\"keyword\">return</span> [<span class=\"integer\">200</span>, {<span class=\"key\"><span class=\"delimiter\">&quot;</span><span class=\"content\">Content-Type</span><span class=\"delimiter\">&quot;</span></span>: <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">application/json</span><span class=\"delimiter\">&quot;</span></span>}, JSON.stringify({<span class=\"key\">speaker</span>: speaker, <span class=\"key\">presentations</span>: speakerPresentations})];\n});\n</pre></td>\n</tr></table>\n</div></div>\n<p>This modification of the previously existing stub will build a new payload object that\nincludes the speaker matching the id requested and all of the\npresentations specific to that speaker.</p>\n\n<p>Tying up this test is easy now, we just modify the Speaker&#39;s <code>show</code>\ntemplate:</p>\n<div class=\"highlight handlebars \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n  <td class=\"code\"><pre><span class=\"tag\">&lt;h4&gt;</span><span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">name</span><span class=\"inline-delimiter\">}}</span></span><span class=\"tag\">&lt;/h4&gt;</span>\n\n<span class=\"tag\">&lt;h5&gt;</span>Presentations<span class=\"tag\">&lt;/h5&gt;</span>\n<span class=\"tag\">&lt;ul&gt;</span>\n  <span class=\"inline\"><span class=\"inline-delimiter\">{{#</span><span class=\"attribute-name\">each</span> <span class=\"attribute-name\">presentations</span><span class=\"inline-delimiter\">}}</span></span>\n    <span class=\"tag\">&lt;li&gt;</span><span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">title</span><span class=\"inline-delimiter\">}}</span></span><span class=\"tag\">&lt;/li&gt;</span>\n  <span class=\"inline\"><span class=\"inline-delimiter\">{{/</span><span class=\"attribute-name\">each</span><span class=\"inline-delimiter\">}}</span></span>\n<span class=\"tag\">&lt;/ul&gt;</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Now that we have a green test suite with our mocked out API let&#39;s add the\nreal Rails endpoint. We&#39;ll start by generating a new Presentation model.\nChange to the <code>rails/</code> directory in your project and run <code>rails generate\nmodel presentation title:string speaker_id:integer</code>.</p>\n\n<p>Next we&#39;ll generate the serializer: <code>rails generate serializer\npresentation</code>.</p>\n\n<p>Let&#39;s expand upon the <code>rails/db/seeds.rb</code> file:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\"># rails/db/seeds.rb</span>\n\nbugs = <span class=\"constant\">Speaker</span>.create(<span class=\"key\">name</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Bug Bunny</span><span class=\"delimiter\">'</span></span>)\nwile = <span class=\"constant\">Speaker</span>.create(<span class=\"key\">name</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Wile E. Coyote</span><span class=\"delimiter\">'</span></span>)\nsam  = <span class=\"constant\">Speaker</span>.create(<span class=\"key\">name</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Yosemite Sam</span><span class=\"delimiter\">'</span></span>)\n\nbugs.presentations.create(<span class=\"key\">title</span>: <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">What's up with Docs?</span><span class=\"delimiter\">&quot;</span></span>)\nbugs.presentations.create(<span class=\"key\">title</span>: <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">Of course, you know, this means war.</span><span class=\"delimiter\">&quot;</span></span>)\n\nwile.presentations.create(<span class=\"key\">title</span>: <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">Getting the most from the Acme categlog.</span><span class=\"delimiter\">&quot;</span></span>)\n\nsam.presentations.create(<span class=\"key\">title</span>: <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">Shaaaad up!</span><span class=\"delimiter\">&quot;</span></span>)\nsam.presentations.create(<span class=\"key\">title</span>: <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">Ah hates rabbits.</span><span class=\"delimiter\">&quot;</span></span>)\nsam.presentations.create(<span class=\"key\">title</span>: <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">The Great horni-todes</span><span class=\"delimiter\">&quot;</span></span>)\n</pre></td>\n</tr></table>\n</div></div>\n<p>Tell our <code>Speaker</code> model that there is a relationship to <code>Presentation</code>\nmodels:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\"># rails/app/models/speaker.rb</span>\n\n<span class=\"keyword\">class</span> <span class=\"class\">Speaker</span> &lt; <span class=\"constant\">ActiveRecord</span>::<span class=\"constant\">Base</span>\n  has_many <span class=\"symbol\">:presentations</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Finally we need to modify the serializers.</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\"># rails/app/serializers/presentation_serializer.rb</span>\n\n<span class=\"keyword\">class</span> <span class=\"class\">PresentationSerializer</span> &lt; <span class=\"constant\">ActiveModel</span>::<span class=\"constant\">Serializer</span>\n  attributes <span class=\"symbol\">:id</span>, <span class=\"symbol\">:title</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div><div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\"># rails/app/serializers/speaker_serializer.rb</span>\n\n<span class=\"keyword\">class</span> <span class=\"class\">SpeakerSerializer</span> &lt; <span class=\"constant\">ActiveModel</span>::<span class=\"constant\">Serializer</span>\n  embed <span class=\"symbol\">:ids</span>, <span class=\"key\">include</span>: <span class=\"predefined-constant\">true</span>\n\n  attributes <span class=\"symbol\">:id</span>, <span class=\"symbol\">:name</span>\n  has_many <span class=\"symbol\">:presentations</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>In the <code>SpeakerSerializer</code> we have instructed the serializer to include\nthe associated <code>Presentation</code>s.</p>\n\n<p>Let&#39;s reset the database and re-seed <code>rake db:drop db:create db:migrate db:seed</code></p>\n\n<p>Make sure you are running your Ember server with the proxy enabled:\n<code>ember server --proxy http://localhost:3000</code></p>\n\n<p>Now you can hit your application and you should have a all of the\nnecessary data. </p>\n\n<p><img src=\"http://i.imgur.com/jmHGxgS.png\" alt=\"image1\">\n<img src=\"http://i.imgur.com/plrKLvg.png\" alt=\"image2\"></p>\n\n<p><a href=\"https://github.com/bostonember/website/commit/10f838ff1bfb0aa1307d4de6587889489697c8da\">Check out the actual code for this\npart</a></p>\n","summary":null,"illustration":null,"illustration_alt":null,"tags":["ember","ruby","ruby-on-rails"],"shallow":false,"date":"2014-05-31T00:00:00Z"},{"id":"2014/05/27/avoid-rails-when-generating-json-responses-with-postgresql","title":"Avoid Rails When Generating JSON responses with PostgreSQL","dockyarder":"dan-mcclain","body":"<p>What if I told you that you could generate the following JSON response\nin PostgreSQL?</p>\n<div class=\"highlight json \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n22\n</pre></td>\n  <td class=\"code\"><pre>{\n  <span class=\"key\"><span class=\"delimiter\">&quot;</span><span class=\"content\">tags</span><span class=\"delimiter\">&quot;</span></span>:[\n    {<span class=\"key\"><span class=\"delimiter\">&quot;</span><span class=\"content\">id</span><span class=\"delimiter\">&quot;</span></span>:<span class=\"integer\">1</span>,<span class=\"key\"><span class=\"delimiter\">&quot;</span><span class=\"content\">name</span><span class=\"delimiter\">&quot;</span></span>:<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">Tag #0</span><span class=\"delimiter\">&quot;</span></span>,<span class=\"key\"><span class=\"delimiter\">&quot;</span><span class=\"content\">note_id</span><span class=\"delimiter\">&quot;</span></span>:<span class=\"integer\">1</span>},\n    {<span class=\"key\"><span class=\"delimiter\">&quot;</span><span class=\"content\">id</span><span class=\"delimiter\">&quot;</span></span>:<span class=\"integer\">1001</span>,<span class=\"key\"><span class=\"delimiter\">&quot;</span><span class=\"content\">name</span><span class=\"delimiter\">&quot;</span></span>:<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">Tag #1000</span><span class=\"delimiter\">&quot;</span></span>,<span class=\"key\"><span class=\"delimiter\">&quot;</span><span class=\"content\">note_id</span><span class=\"delimiter\">&quot;</span></span>:<span class=\"integer\">1</span>},\n    {<span class=\"key\"><span class=\"delimiter\">&quot;</span><span class=\"content\">id</span><span class=\"delimiter\">&quot;</span></span>:<span class=\"integer\">2001</span>,<span class=\"key\"><span class=\"delimiter\">&quot;</span><span class=\"content\">name</span><span class=\"delimiter\">&quot;</span></span>:<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">Tag #2000</span><span class=\"delimiter\">&quot;</span></span>,<span class=\"key\"><span class=\"delimiter\">&quot;</span><span class=\"content\">note_id</span><span class=\"delimiter\">&quot;</span></span>:<span class=\"integer\">1</span>},\n    <span class=\"error\">.</span><span class=\"error\">.</span><span class=\"error\">.</span>\n  ],\n  <span class=\"key\"><span class=\"delimiter\">&quot;</span><span class=\"content\">notes</span><span class=\"delimiter\">&quot;</span></span>:[\n    {\n      <span class=\"key\"><span class=\"delimiter\">&quot;</span><span class=\"content\">id</span><span class=\"delimiter\">&quot;</span></span>:<span class=\"integer\">1</span>,\n      <span class=\"key\"><span class=\"delimiter\">&quot;</span><span class=\"content\">title</span><span class=\"delimiter\">&quot;</span></span>:<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">Note #0</span><span class=\"delimiter\">&quot;</span></span>,\n      <span class=\"key\"><span class=\"delimiter\">&quot;</span><span class=\"content\">content</span><span class=\"delimiter\">&quot;</span></span>:<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">Lorem ipsum...</span><span class=\"delimiter\">&quot;</span></span>,\n      <span class=\"key\"><span class=\"delimiter\">&quot;</span><span class=\"content\">tag_ids</span><span class=\"delimiter\">&quot;</span></span>:[<span class=\"integer\">9001</span>,<span class=\"integer\">8001</span>,<span class=\"integer\">7001</span>,<span class=\"integer\">6001</span>,<span class=\"integer\">5001</span>,<span class=\"integer\">4001</span>,<span class=\"integer\">3001</span>,<span class=\"integer\">2001</span>,<span class=\"integer\">1001</span>,<span class=\"integer\">1</span>]\n    },\n    {\n      <span class=\"key\"><span class=\"delimiter\">&quot;</span><span class=\"content\">id</span><span class=\"delimiter\">&quot;</span></span>:<span class=\"integer\">2</span>,\n      <span class=\"key\"><span class=\"delimiter\">&quot;</span><span class=\"content\">title</span><span class=\"delimiter\">&quot;</span></span>:<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">Note #1</span><span class=\"delimiter\">&quot;</span></span>,\n      <span class=\"key\"><span class=\"delimiter\">&quot;</span><span class=\"content\">content</span><span class=\"delimiter\">&quot;</span></span>:<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">Lorem ipsum...</span><span class=\"delimiter\">&quot;</span></span>,\n      <span class=\"key\"><span class=\"delimiter\">&quot;</span><span class=\"content\">tag_ids</span><span class=\"delimiter\">&quot;</span></span>:[<span class=\"integer\">9002</span>,<span class=\"integer\">8002</span>,<span class=\"integer\">7002</span>,<span class=\"integer\">6002</span>,<span class=\"integer\">5002</span>,<span class=\"integer\">4002</span>,<span class=\"integer\">3002</span>,<span class=\"integer\">2002</span>,<span class=\"integer\">1002</span>,<span class=\"integer\">2</span>]\n    }\n  ]\n}\n</pre></td>\n</tr></table>\n</div></div>\n<p>What if I told you that it is over 10X faster than plain <a href=\"https://github.com/rails-api/active_model_serializers/\">ActiveModel::Serializers</a>\nfor small data sets, and 160X faster for larger data sets?</p>\n\n<p>Typically when you have an API serving up JSON responses, your web\nframework serializes your data after retrieving it with its ORM. We&#39;ll\ntalk about Rails specifically in this article, but this will generally\napply to most frameworks. So the typical Rails request will roughly\nfollow this flow (I am purposely brushing over some parts of the request\nresponse cycle):</p>\n\n<ol>\n<li>Rails receives the JSON request from the browser/client</li>\n<li>Rails will apply some business logic and craft a query via\n ActiveRecord</li>\n<li>ActiveRecord serializes its query and sends the query to PostgreSQL</li>\n<li>PostgreSQL will compile the result set and serializes the records\n in its protocol format</li>\n<li>ActiveRecord deserializes the records into a set of rows object</li>\n<li>ActiveRecord will convert the set of rows into a set of model\n object instances</li>\n<li>Rails will convert the set of models objects into a JSON string</li>\n<li>Rails will send the JSON string down to the browser</li>\n</ol>\n\n<p>Most of the time in this response cycle is spent in steps 6 and 7. Rails\nhas to deserialize one format, then store that deserialized content in\nmemory just to serialize it in a different format. Since <a href=\"http://www.postgresql.org/docs/current/static/datatype-json.html\">PostgreSQL\nsupports JSON responses</a>,\nwe can use its <a href=\"http://www.postgresql.org/docs/current/static/functions-json.html\">JSON functions</a> to\nserialized our result set. That JSON response will still be serialized\nin PostgreSQL&#39;s protocol format, but ActiveRecord can deserialize it as\na single string object, instead of a set of objects which it then\nconverts and reserializes. We end up having this response cycle instead:</p>\n\n<ol>\n<li>Rails receives the JSON request from the browser/client</li>\n<li>Rails will apply some business logic and craft a query via\n ActiveRecord</li>\n<li>ActiveRecord serializes its query and sends the query to PostgreSQL</li>\n<li>PostgreSQL will compile the result set, serializes it as JSON then \n serializes the JSON in its protocol format</li>\n<li>ActiveRecord deserializes the protocal format into a single JSON\n string</li>\n<li>Rails will send the JSON string down to the browser</li>\n</ol>\n\n<p>We are only removing 2 steps, but it is the bulk of the time spent\ngenerating the response. We are also limiting the number of ruby objects\ncreated, so this reduces memory usage and time spent garbage collecting\nshort lived Ruby objects used only for JSONification.</p>\n\n<h1>What Do We Gain by Generating Massive Queries for PostgreSQL</h1>\n\n<p>It takes a lot of work to tell PostgreSQL to generate a specific\nJSON object; what exactly does that buy us?\nBy doing all this in PostgreSQL, we avoid using CPU cycles\nand memory on our web server. I&#39;ve done some very naive and basic\ntesting with a new, unoptimized Rails project, and a database of 1000\nnotes, each have 10 unique tags, totalling 10000 tags. When retrieving\nall 11000 records with Rails and <a href=\"https://github.com/rails-api/active_model_serializers\">ActiveModel::Serializers</a>, it took\nroughly 9 seconds to generate the request. Most of the time was spent\nin the View generating the JSON object in memory, with 657 milliseconds\nin ActiveRecord, which (I think until someone tells me otherwise)\nincludes creating all the model instances.</p>\n\n<p>When we apply the PostgreSQL technique outlined later in this article to the\nsame result set, the response only takes 72 milliseconds for the first\nrequest. If we rerun this same request, PostgreSQL caching kicks in and\nthe response time is 54 milliseconds. That is a <strong>~160X</strong> throughput\nincrease when we use PostgreSQL to generate JSON payloads.</p>\n\n<p>The above numbers are a bit skewed by the size of this test payload.\n11000 objects would be completely crazy to present to an end user. If we\npare back our result set 10 notes and 100 tags, the first and second\nresponse times for Ruby side JSONification  are 187 and 118 milliseconds.\nWhen using PostgreSQL to generate our JSON payload, the response times\nare 92 and 12 milliseconds. That is a <strong>2X/10X</strong> increase. By utilizing\nPostgreSQL, we can increase our applications&#39; response times and\nthroughput.</p>\n\n<h1>Announce PostgresExt-Serializers</h1>\n\n<p>To utilize PostgreSQL, we have to generate a fairly complex query\nmanually. That is, until you include the <a href=\"https://github.com/dockyard/postgres_ext-serializers\">PostgresExt-Serializers</a>\ngem into the project. PostgresExt-Serializers (PES) monkey\npatches ActiveModel::Serializers (AMS),\nand anywhere an ActiveRecord::Relation is serialized by AMS, PES will\ntake over and push the work to PostgreSQL. I wanted to use the awesome\nwork of AMS&#39;s DSL for generating JSON schemas without having to duplicate\nthat work. I am finding some pain points in terms of extracting the\ninformation I need to generate the SQL query from AMS, but right now the\ncode for PES is very immature, hence the 0.0.1 release.</p>\n\n<h1>Nitty-Gritty Details About How it All Works: Massive PostgreSQL Queries</h1>\n\n<p>Let&#39;s say we have an Ember application that we are generating the JSON\nrequest for. The Ember app wants the list of notes, along with the tags\nassociated with the notes, and we will side load the tags. Side loading\nallows you to specify the ids of the tags on the note, and then include\na list of tags, which will be used to instantiate the tags on the note.\nThe benefit of side loading is that it allows you to save bandwidth by\nuse tag ids and an array of de-duplicated tags, instead of embedding the\nduplicate tags objects under the notes, where you would have to duplicate\nthe tag objects. We only want notes with <code>id &lt; 40</code>, which is arbitrary\nin this example, but, as we will see, has implications on the query we\nneed to execute.</p>\n\n<p>Here is the whole query we need to generate the JSON required, which is\nalso the example JSON at the beginning of this article:</p>\n<div class=\"highlight sql \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n22\n23\n24\n25\n26\n27\n28\n29\n<strong>30</strong>\n31\n32\n33\n34\n35\n36\n37\n38\n39\n<strong>40</strong>\n41\n42\n43\n44\n45\n46\n47\n48\n49\n<strong>50</strong>\n51\n52\n53\n54\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\">-- Note Ids</span>\nWITH notes_ids <span class=\"keyword\">AS</span> (\n  <span class=\"class\">SELECT</span> id\n  <span class=\"keyword\">FROM</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">notes</span><span class=\"delimiter\">&quot;</span></span>\n  <span class=\"keyword\">WHERE</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">notes</span><span class=\"delimiter\">&quot;</span></span>.<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">id</span><span class=\"delimiter\">&quot;</span></span> &lt; <span class=\"integer\">40</span>\n),\n<span class=\"comment\">-- Tag Ids grouped by note id</span>\ntag_ids_by_notes <span class=\"keyword\">AS</span> (\n  <span class=\"class\">SELECT</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">tags</span><span class=\"delimiter\">&quot;</span></span>.<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">note_id</span><span class=\"delimiter\">&quot;</span></span>, array_agg(<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">tags</span><span class=\"delimiter\">&quot;</span></span>.<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">id</span><span class=\"delimiter\">&quot;</span></span>) <span class=\"keyword\">AS</span> tag_ids\n  <span class=\"keyword\">FROM</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">tags</span><span class=\"delimiter\">&quot;</span></span>\n  <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">tags</span><span class=\"delimiter\">&quot;</span></span>.<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">note_id</span><span class=\"delimiter\">&quot;</span></span>\n  <span class=\"keyword\">HAVING</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">tags</span><span class=\"delimiter\">&quot;</span></span>.<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">note_id</span><span class=\"delimiter\">&quot;</span></span> <span class=\"keyword\">IN</span> (\n    <span class=\"class\">SELECT</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">notes_ids</span><span class=\"delimiter\">&quot;</span></span>.<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">id</span><span class=\"delimiter\">&quot;</span></span>\n    <span class=\"keyword\">FROM</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">notes_ids</span><span class=\"delimiter\">&quot;</span></span>\n  )\n),\n<span class=\"comment\">-- Tag records</span>\ntags_attributes_filter <span class=\"keyword\">AS</span> (\n  <span class=\"class\">SELECT</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">tags</span><span class=\"delimiter\">&quot;</span></span>.<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">id</span><span class=\"delimiter\">&quot;</span></span>, <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">tags</span><span class=\"delimiter\">&quot;</span></span>.<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">name</span><span class=\"delimiter\">&quot;</span></span>, <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">tags</span><span class=\"delimiter\">&quot;</span></span>.<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">note_id</span><span class=\"delimiter\">&quot;</span></span>\n  <span class=\"keyword\">FROM</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">tags</span><span class=\"delimiter\">&quot;</span></span>\n  <span class=\"keyword\">WHERE</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">tags</span><span class=\"delimiter\">&quot;</span></span>.<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">note_id</span><span class=\"delimiter\">&quot;</span></span> <span class=\"keyword\">IN</span> (\n    <span class=\"class\">SELECT</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">notes_ids</span><span class=\"delimiter\">&quot;</span></span>.<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">id</span><span class=\"delimiter\">&quot;</span></span>\n    <span class=\"keyword\">FROM</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">notes_ids</span><span class=\"delimiter\">&quot;</span></span>\n  )\n),\n<span class=\"comment\">-- Tag records as a JSON array</span>\ntags_as_json_array <span class=\"keyword\">AS</span> (\n  <span class=\"class\">SELECT</span> array_to_json(array_agg(row_to_json(tags_attributes_filter)))\n<span class=\"keyword\">AS</span> tags, <span class=\"integer\">1</span> <span class=\"keyword\">AS</span> match\n  <span class=\"keyword\">FROM</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">tags_attributes_filter</span><span class=\"delimiter\">&quot;</span></span>\n),\n<span class=\"comment\">-- Note records</span>\nnotes_attributes_filter <span class=\"keyword\">AS</span> (\n  <span class=\"class\">SELECT</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">notes</span><span class=\"delimiter\">&quot;</span></span>.<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">id</span><span class=\"delimiter\">&quot;</span></span>, <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">notes</span><span class=\"delimiter\">&quot;</span></span>.<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">content</span><span class=\"delimiter\">&quot;</span></span>, <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">notes</span><span class=\"delimiter\">&quot;</span></span>.<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">name</span><span class=\"delimiter\">&quot;</span></span>,\ncoalesce(<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">tag_ids_by_notes</span><span class=\"delimiter\">&quot;</span></span>.<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">tag_ids</span><span class=\"delimiter\">&quot;</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">{}</span><span class=\"delimiter\">'</span></span>::<span class=\"predefined-type\">int</span>[]) <span class=\"keyword\">AS</span> tag_ids\n  <span class=\"keyword\">FROM</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">notes</span><span class=\"delimiter\">&quot;</span></span>\n  <span class=\"keyword\">LEFT</span> <span class=\"keyword\">OUTER</span> <span class=\"keyword\">JOIN</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">tag_ids_by_notes</span><span class=\"delimiter\">&quot;</span></span>\n  <span class=\"keyword\">ON</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">notes</span><span class=\"delimiter\">&quot;</span></span>.<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">id</span><span class=\"delimiter\">&quot;</span></span> = <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">tag_ids_by_notes</span><span class=\"delimiter\">&quot;</span></span>.<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">note_id</span><span class=\"delimiter\">&quot;</span></span>\n  <span class=\"keyword\">WHERE</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">notes</span><span class=\"delimiter\">&quot;</span></span>.<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">id</span><span class=\"delimiter\">&quot;</span></span> &lt; <span class=\"integer\">40</span>\n),\n<span class=\"comment\">-- Note records as a JSON array</span>\nnotes_as_json_array <span class=\"keyword\">AS</span> (\n  <span class=\"class\">SELECT</span> array_to_json(array_agg(row_to_json(notes_attributes_filter)))\n<span class=\"keyword\">AS</span> notes, <span class=\"integer\">1</span> <span class=\"keyword\">AS</span> match\n  <span class=\"keyword\">FROM</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">notes_attributes_filter</span><span class=\"delimiter\">&quot;</span></span>\n),\n<span class=\"comment\">-- Notes and tags together as one JSON object</span>\njsons <span class=\"keyword\">AS</span> (\n  <span class=\"class\">SELECT</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">tags_as_json_array</span><span class=\"delimiter\">&quot;</span></span>.<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">tags</span><span class=\"delimiter\">&quot;</span></span>, <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">notes_as_json_array</span><span class=\"delimiter\">&quot;</span></span>.<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">notes</span><span class=\"delimiter\">&quot;</span></span>\n  <span class=\"keyword\">FROM</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">tags_as_json_array</span><span class=\"delimiter\">&quot;</span></span>\n  <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">notes_as_json_array</span><span class=\"delimiter\">&quot;</span></span>\n  <span class=\"keyword\">ON</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">tags_as_json_array</span><span class=\"delimiter\">&quot;</span></span>.<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">match</span><span class=\"delimiter\">&quot;</span></span> = <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">notes_as_json_array</span><span class=\"delimiter\">&quot;</span></span>.<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">match</span><span class=\"delimiter\">&quot;</span></span>\n)\n<span class=\"class\">SELECT</span> row_to_json(jsons) <span class=\"keyword\">FROM</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">jsons</span><span class=\"delimiter\">&quot;</span></span>;\n</pre></td>\n</tr></table>\n</div></div>\n<p>Let&#39;s break it down. You&#39;ll notice that I am making use of <a href=\"http://www.postgresql.org/docs/9.3/static/queries-with.html\">Common Table\nExpressions (CTEs)</a>. CTEs allow you to use temporary table definitions\nin queries instead of embedding the subqueries directly in your query.</p>\n\n<h2>Gathering our Note Ids</h2>\n\n<p>The first important step is getting the note ids of our final result\nset, which we do with:</p>\n<div class=\"highlight sql \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n  <td class=\"code\"><pre>WITH notes_ids <span class=\"keyword\">AS</span> (\n  <span class=\"class\">SELECT</span> id\n  <span class=\"keyword\">FROM</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">notes</span><span class=\"delimiter\">&quot;</span></span>\n  <span class=\"keyword\">WHERE</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">notes</span><span class=\"delimiter\">&quot;</span></span>.<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">id</span><span class=\"delimiter\">&quot;</span></span> &lt; <span class=\"integer\">40</span>\n),\n</pre></td>\n</tr></table>\n</div></div>\n<p>We are creating a CTE that represents the ids for our notes, we&#39;ll be\nusing this extensively to generate our tag related records.</p>\n\n<h2>Getting Tag Ids Grouped by Note Ids</h2>\n\n<p>From our <code>note_ids</code>, we can assemble a list of tag ids grouped by notes.\nThis will be used to create the <code>tag_ids</code> attribute on the notes later\non.</p>\n<div class=\"highlight sql \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n  <td class=\"code\"><pre>tag_ids_by_notes <span class=\"keyword\">AS</span> (\n  <span class=\"class\">SELECT</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">tags</span><span class=\"delimiter\">&quot;</span></span>.<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">note_id</span><span class=\"delimiter\">&quot;</span></span>, array_agg(<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">tags</span><span class=\"delimiter\">&quot;</span></span>.<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">id</span><span class=\"delimiter\">&quot;</span></span>) <span class=\"keyword\">AS</span> tag_ids\n  <span class=\"keyword\">FROM</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">tags</span><span class=\"delimiter\">&quot;</span></span>\n  <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">tags</span><span class=\"delimiter\">&quot;</span></span>.<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">note_id</span><span class=\"delimiter\">&quot;</span></span>\n  <span class=\"keyword\">HAVING</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">tags</span><span class=\"delimiter\">&quot;</span></span>.<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">note_id</span><span class=\"delimiter\">&quot;</span></span> <span class=\"keyword\">IN</span> (\n    <span class=\"class\">SELECT</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">notes_ids</span><span class=\"delimiter\">&quot;</span></span>.<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">id</span><span class=\"delimiter\">&quot;</span></span>\n    <span class=\"keyword\">FROM</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">notes_ids</span><span class=\"delimiter\">&quot;</span></span>\n  )\n),\n</pre></td>\n</tr></table>\n</div></div>\n<p>Our projection is the <code>note_id</code>, plus an <a href=\"http://www.postgresql.org/docs/9.3/static/functions-aggregate.html\"><code>array_agg</code></a> of the id of the\ntags in our grouping. <code>array_agg</code> aggregates the group into an array.\nThis projection will return the following:</p>\n<div class=\"highlight text \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n  <td class=\"code\"><pre>note_id | tag_ids\n=================\n      1 | [1,2]\n      2 | [1,3]\n</pre></td>\n</tr></table>\n</div></div>\n<p>In this example, the tags <code>belong_to</code> a note, so we are retrieving this\ndata from the <code>tags</code> table. If this was a many-to-many relation, this\nquery would execute against the join table (i.e. <code>notes_tags</code>).</p>\n\n<p>We group our tags by the <code>note_id</code>, and we use the <code>HAVING</code> clause to\nonly group tags which have a <code>note_id</code> contained in the <code>note_ids</code> CTE\nthat we created at the beginning.</p>\n\n<h2>Generating Our Note Records</h2>\n\n<p>Most of the time, we don&#39;t want to expose all of our record data to\nEmber, since whatever we send to the client will be accessible by the\nuser, whether we intend it to be or not. We filter down the attributes\nsent to Ember by limiting the columns in our projection.</p>\n<div class=\"highlight sql \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n  <td class=\"code\"><pre>notes_attributes_filter <span class=\"keyword\">AS</span> (\n  <span class=\"class\">SELECT</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">notes</span><span class=\"delimiter\">&quot;</span></span>.<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">id</span><span class=\"delimiter\">&quot;</span></span>, <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">notes</span><span class=\"delimiter\">&quot;</span></span>.<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">content</span><span class=\"delimiter\">&quot;</span></span>, <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">notes</span><span class=\"delimiter\">&quot;</span></span>.<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">name</span><span class=\"delimiter\">&quot;</span></span>,\ncoalesce(<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">tag_ids_by_notes</span><span class=\"delimiter\">&quot;</span></span>.<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">tag_ids</span><span class=\"delimiter\">&quot;</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">{}</span><span class=\"delimiter\">'</span></span>::<span class=\"predefined-type\">int</span>[]) <span class=\"keyword\">AS</span> tag_ids\n  <span class=\"keyword\">FROM</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">notes</span><span class=\"delimiter\">&quot;</span></span>\n  <span class=\"keyword\">LEFT</span> <span class=\"keyword\">OUTER</span> <span class=\"keyword\">JOIN</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">tag_ids_by_notes</span><span class=\"delimiter\">&quot;</span></span>\n  <span class=\"keyword\">ON</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">notes</span><span class=\"delimiter\">&quot;</span></span>.<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">id</span><span class=\"delimiter\">&quot;</span></span> = <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">tag_ids_by_notes</span><span class=\"delimiter\">&quot;</span></span>.<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">note_id</span><span class=\"delimiter\">&quot;</span></span>\n  <span class=\"keyword\">WHERE</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">notes</span><span class=\"delimiter\">&quot;</span></span>.<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">id</span><span class=\"delimiter\">&quot;</span></span> &lt; <span class=\"integer\">40</span>\n),\n</pre></td>\n</tr></table>\n</div></div>\n<p>Also note that in the projection, we are using <a href=\"http://www.postgresql.org/docs/9.3/static/functions-conditional.html#FUNCTIONS-COALESCE-NVL-IFNULL\"><code>coalesce</code></a>\nto ensure that we return an empty array if a specific note has no <code>tag_ids</code>.\nWe are using a <a href=\"http://www.postgresql.org/docs/9.3/static/queries-table-expressions.html#QUERIES-JOIN\"><code>LEFT OUTER JOIN</code></a> to combine our previously generated\ntag id groupings with our notes. We use an <code>OUTER JOIN</code> instead of an\n<a href=\"http://www.postgresql.org/docs/9.3/static/queries-table-expressions.html#QUERIES-JOIN\"><code>INNER JOIN</code></a> so that all our notes are returned, even if no tags are\nassociated with it. An <code>INNER JOIN</code> would only return notes that have\ntags associated with it. We also use the same <code>WHERE</code> predicate in this\nquery as we did in the <code>note_ids</code> CTE, to ensure our query only returns\nthe desired records.</p>\n\n<h2>Turning Our Note Records into a Single JSON Array</h2>\n\n<p>So now that we have our notes records filtered down, we need to create a\nJSON array of these records to use in our final query. At this point, we\nwill use two of PostgreSQL&#39;s <a href=\"http://www.postgresql.org/docs/current/static/functions-json.html\">JSON functions</a> and the <code>array_agg</code>\nfunction that we used earlier. <code>row_to_json</code> takes a PostgreSQL row and\nconverts it to a JSON object, where the columns of the row converted\ninto JSON properties.</p>\n<div class=\"highlight text \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre>foo | bar\n=========\n  1 |   2\n</pre></td>\n</tr></table>\n</div></div>\n<p>Will be converted to</p>\n<div class=\"highlight text \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre>     json\n================\n{ foo: 1, bar: 2 }\n</pre></td>\n</tr></table>\n</div></div>\n<p>So at this point, our result set is a series of rows with a single\ncolumn of JSON representing the original PostgreSQL row from our\n<code>notes_attribute_filter</code> CTE. We then use <code>array_agg</code> to turn the\nrows of JSON objects into a single row with a single PostgreSQL\nArray of JSON objects.</p>\n<div class=\"highlight text \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n  <td class=\"code\"><pre>     json\n================\n{ foo: 1, bar: 2 }\n{ foo: 1, bar: 2 }\n{ foo: 1, bar: 2 }\n</pre></td>\n</tr></table>\n</div></div>\n<p>will be converted to</p>\n<div class=\"highlight text \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre>                    Array\n=======================================================\n{{ foo: 1, bar: 2 },{ foo: 1, bar: 2 },{ foo: 1, bar: 2 }}\n</pre></td>\n</tr></table>\n</div></div>\n<p>Lastly, we use <code>array_to_json</code> to convert the PostgreSQL array of JSON to a JSON array.</p>\n\n<p>After  combining these pieces, we get the following query:</p>\n<div class=\"highlight sql \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n  <td class=\"code\"><pre>notes_as_json_array <span class=\"keyword\">AS</span> (\n  <span class=\"class\">SELECT</span> array_to_json(array_agg(row_to_json(notes_attributes_filter)))\n<span class=\"keyword\">AS</span> notes, <span class=\"integer\">1</span> <span class=\"keyword\">AS</span> match\n  <span class=\"keyword\">FROM</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">notes_attributes_filter</span><span class=\"delimiter\">&quot;</span></span>\n),\n</pre></td>\n</tr></table>\n</div></div>\n<p>which yields</p>\n<div class=\"highlight text \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre>    notes    | match\n====================\n[{},{},{},{}]|     1\n</pre></td>\n</tr></table>\n</div></div>\n<p>We are using the <code>notes_attributes_filter</code> as our source for all the\nJSON functions, and adding a column <code>match</code> with a value of <code>1</code>, which\nwe will need later.</p>\n\n<h2>Aggregating Our Tag Records</h2>\n\n<p>We apply the attribute filtering and the aggregation techniques to our\n<code>tags</code> table to generate our JSON array of tags. Note that when we\nfilter the tags attributes, we only include tags that have a <code>note_id</code>\nof a note we are returning.</p>\n<div class=\"highlight sql \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n</pre></td>\n  <td class=\"code\"><pre>tags_attributes_filter <span class=\"keyword\">AS</span> (\n  <span class=\"class\">SELECT</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">tags</span><span class=\"delimiter\">&quot;</span></span>.<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">id</span><span class=\"delimiter\">&quot;</span></span>, <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">tags</span><span class=\"delimiter\">&quot;</span></span>.<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">name</span><span class=\"delimiter\">&quot;</span></span>, <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">tags</span><span class=\"delimiter\">&quot;</span></span>.<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">note_id</span><span class=\"delimiter\">&quot;</span></span>\n  <span class=\"keyword\">FROM</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">tags</span><span class=\"delimiter\">&quot;</span></span>\n  <span class=\"keyword\">WHERE</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">tags</span><span class=\"delimiter\">&quot;</span></span>.<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">note_id</span><span class=\"delimiter\">&quot;</span></span> <span class=\"keyword\">IN</span> (\n    <span class=\"class\">SELECT</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">notes_ids</span><span class=\"delimiter\">&quot;</span></span>.<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">id</span><span class=\"delimiter\">&quot;</span></span>\n    <span class=\"keyword\">FROM</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">notes_ids</span><span class=\"delimiter\">&quot;</span></span>\n  )\n),\n\ntags_as_json_array <span class=\"keyword\">AS</span> (\n  <span class=\"class\">SELECT</span> array_to_json(array_agg(row_to_json(tags_attributes_filter)))\n<span class=\"keyword\">AS</span> tags, <span class=\"integer\">1</span> <span class=\"keyword\">AS</span> match\n  <span class=\"keyword\">FROM</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">tags_attributes_filter</span><span class=\"delimiter\">&quot;</span></span>\n),\n</pre></td>\n</tr></table>\n</div></div>\n<p>which yields</p>\n<div class=\"highlight text \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre>    tags     | match\n====================\n[{},{},{},{}]|     1\n</pre></td>\n</tr></table>\n</div></div>\n<h2>Combining Our Notes and Tags</h2>\n\n<p>So at this point, we have 2 CTEs that represent our notes and tags. We\nneed to combine these two tables into a single row, so that we can convert\nthat row to a JSON object with a <code>notes</code> and <code>tags</code> property. This is\nthe reason we added a <code>match</code> column onto both CTEs; we join those two\ntable into our final table, which we then call <code>row_to_json</code> on to get\nour final JSON object, which mirrors the example at the beginning of\nthis article.</p>\n<div class=\"highlight sql \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n  <td class=\"code\"><pre>jsons <span class=\"keyword\">AS</span> (\n  <span class=\"class\">SELECT</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">tags_as_json_array</span><span class=\"delimiter\">&quot;</span></span>.<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">tags</span><span class=\"delimiter\">&quot;</span></span>, <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">notes_as_json_array</span><span class=\"delimiter\">&quot;</span></span>.<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">notes</span><span class=\"delimiter\">&quot;</span></span>\n  <span class=\"keyword\">FROM</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">tags_as_json_array</span><span class=\"delimiter\">&quot;</span></span>\n  <span class=\"keyword\">INNER</span> <span class=\"keyword\">JOIN</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">notes_as_json_array</span><span class=\"delimiter\">&quot;</span></span>\n  <span class=\"keyword\">ON</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">tags_as_json_array</span><span class=\"delimiter\">&quot;</span></span>.<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">match</span><span class=\"delimiter\">&quot;</span></span> = <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">notes_as_json_array</span><span class=\"delimiter\">&quot;</span></span>.<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">match</span><span class=\"delimiter\">&quot;</span></span>\n)\n<span class=\"class\">SELECT</span> row_to_json(jsons) <span class=\"keyword\">FROM</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">jsons</span><span class=\"delimiter\">&quot;</span></span>;\n</pre></td>\n</tr></table>\n</div></div>\n<p>So there you have it, you could generate this giant query by hand every\ntime you need to create an API endpoint, or you could use ActiveModel::Serializers\nand utilize the PostgresExt-Seriliazers optimizations to avoid Ruby and\nRails when generating API responses.</p>\n","summary":"Let's use PostgreSQL instead of Ruby to generate JSON responses","illustration":null,"illustration_alt":null,"tags":["ruby","ruby-on-rails","postgresql","postgres_ext"],"shallow":false,"date":"2014-05-27T00:00:00Z"},{"id":"2014/05/09/building-an-ember-app-with-rails-part-3","title":"Building an Ember App with Rails Part 3","dockyarder":"brian-cardarella","body":"<p><em>This is a four-part series:\n<a href=\"http://reefpoints.dockyard.com/2014/05/07/building-an-ember-app-with-rails-part-1.html\">Part 1</a>,\n<a href=\"http://reefpoints.dockyard.com/2014/05/08/building-an-ember-app-with-rails-part-2.html\">Part 2</a>,\n<a href=\"http://reefpoints.dockyard.com/2014/05/09/building-an-ember-app-with-rails-part-3.html\">Part 3</a>,\n<a href=\"http://reefpoints.dockyard.com/2014/05/31/building-an-ember-app-with-rails-part-4.html\">Part 4</a></em></p>\n\n<p>Let&#39;s implement some navigation in the Boston Ember app.</p>\n\n<p>Here is a list of sections in the Boston Ember website I&#39;d like to add:</p>\n\n<ul>\n<li>About</li>\n<li>Speakers</li>\n</ul>\n\n<p>For this part we will work with faked out data. In a future part we will\nprovide the Rails backend.</p>\n\n<p>Our first navigation test will be an easy one, create\n<code>ember/tests/integration/about-page-test.js</code></p>\n<div class=\"highlight js \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n</pre></td>\n  <td class=\"code\"><pre><span class=\"reserved\">import</span> Ember from <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">ember</span><span class=\"delimiter\">'</span></span>;\n<span class=\"reserved\">import</span> startApp from <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">bostonember/tests/helpers/start-app</span><span class=\"delimiter\">'</span></span>;\n\n<span class=\"keyword\">var</span> App;\n\nmodule(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Integration - About Page</span><span class=\"delimiter\">'</span></span>, {\n  <span class=\"function\">beforeEach</span>: <span class=\"keyword\">function</span>() {\n    App = startApp();\n  },\n  <span class=\"function\">afterEach</span>: <span class=\"keyword\">function</span>() {\n    Ember.run(App, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">destroy</span><span class=\"delimiter\">'</span></span>);\n  }\n});\n\ntest(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Should navigate to the About page</span><span class=\"delimiter\">'</span></span>, <span class=\"keyword\">function</span>() {\n  visit(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">/</span><span class=\"delimiter\">'</span></span>).then(<span class=\"keyword\">function</span>(assert) {\n    click(<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">a:contains('About')</span><span class=\"delimiter\">&quot;</span></span>).then(<span class=\"keyword\">function</span>(assert) {\n      assert.equal(find(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">h3</span><span class=\"delimiter\">'</span></span>).text(), <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">About</span><span class=\"delimiter\">'</span></span>);\n    });\n  });\n});\n</pre></td>\n</tr></table>\n</div></div>\n<p>After writing this test we can confirm that our test is red in our browser. To make this green we need to add an <code>About</code> route, \na link from the landing page to the <code>About</code> route, and a template for the\n<code>About</code> route.</p>\n<div class=\"highlight js \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\">// ember/app/router.js</span>\nRouter.map(<span class=\"keyword\">function</span>() {\n  <span class=\"local-variable\">this</span>.route(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">about</span><span class=\"delimiter\">'</span></span>);\n});\n</pre></td>\n</tr></table>\n</div></div><div class=\"highlight js \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\">// ember/app/templates/application.hbs</span>\n<span class=\"tag\">&lt;h2</span> <span class=\"attribute-name\">id</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">title</span><span class=\"delimiter\">&quot;</span></span><span class=\"tag\">&gt;</span>Welcome to Boston Ember<span class=\"tag\">&lt;/h2&gt;</span>\n\n{{link-to <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">About</span><span class=\"delimiter\">'</span></span> <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">about</span><span class=\"delimiter\">'</span></span>}}\n\n{{outlet}}\n</pre></td>\n</tr></table>\n</div></div><div class=\"highlight js \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\">// ember/app/templates/about.hbs</span>\n<span class=\"tag\">&lt;h3&gt;</span>About<span class=\"tag\">&lt;/h3&gt;</span>\n\n<span class=\"tag\">&lt;p&gt;</span>Boston Ember is the monthly meetup where awesome people get together\nto do awesome Ember related things!<span class=\"tag\">&lt;/p&gt;</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Your test should now be green. If you navigate to the root path in your\nbrowser you should be able to click through the app. What about getting\nback to root? We can add a test to for this navigation as well.</p>\n<div class=\"highlight js \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\">// ember/tests/integration/landing-page-test.js</span>\ntest(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Should allow navigating back to root from another page</span><span class=\"delimiter\">'</span></span>, <span class=\"keyword\">function</span>(assert) {\n  visit(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">/about</span><span class=\"delimiter\">'</span></span>).then(<span class=\"keyword\">function</span>() {\n    click(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">a:contains(&quot;Home&quot;)</span><span class=\"delimiter\">'</span></span>).then(<span class=\"keyword\">function</span>(assert) {\n      assert.notEqual(find(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">h3</span><span class=\"delimiter\">'</span></span>).text(), <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">About</span><span class=\"delimiter\">'</span></span>);\n    });\n  });\n});\n</pre></td>\n</tr></table>\n</div></div><div class=\"highlight js \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\">// ember/app/templates/application.hbs</span>\n{{link-to <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Home</span><span class=\"delimiter\">'</span></span> <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">application</span><span class=\"delimiter\">'</span></span>}}\n{{link-to <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">About</span><span class=\"delimiter\">'</span></span> <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">about</span><span class=\"delimiter\">'</span></span>}}\n</pre></td>\n</tr></table>\n</div></div>\n<p>Great! A very simple navigation is setup and fully tested. How about something\nmore complex. Let&#39;s allow our visitors to see the people that have spoken at\nBoston Ember. Before we do that we need to add new dependencies to our app for\nmocking out remote requests.</p>\n\n<p>We will be using\n<a href=\"https://github.com/trek/pretender/tree/0.0.5\">Pretender</a> by Ember Core\nmember Trek Glowacki. Pretender is a nice DSL for faking out remote\nresponses.</p>\n\n<p>We can use the\n<a href=\"https://github.com/rwjblue/ember-cli-pretender\">ember-cli-pretender</a>\nEmber CLI Addon to quickly set up Pretender:</p>\n<div class=\"highlight js \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n  <td class=\"code\"><pre>npm install --save-dev ember-cli-pretender\nember install:addon ember-cli-pretender\n</pre></td>\n</tr></table>\n</div></div>\n<p>You may need to restart your server at this point.</p>\n\n<p>Tell <code>JSHint</code> to ignore the <code>Pretender</code> constant.  Open up\n<code>ember/tests/.jshintrc</code> and add <code>&quot;Pretender&quot;</code> to the end of the <code>&quot;predef&quot;</code>\narray.</p>\n\n<p>Finally we need ember-data to make requests namespaced under <code>api</code> to\nour server:</p>\n<div class=\"highlight js \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\">// ember/app/adapters/application.js</span>\n<span class=\"reserved\">import</span> DS from <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">ember-data</span><span class=\"delimiter\">'</span></span>;\n\n<span class=\"reserved\">export</span> <span class=\"keyword\">default</span> DS.ActiveModelAdapter.extend({\n  <span class=\"key\">namespace</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">api</span><span class=\"delimiter\">'</span></span>\n});\n</pre></td>\n</tr></table>\n</div></div>\n<p>We should be in a good place to write our tests.</p>\n<div class=\"highlight js \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n22\n23\n24\n25\n26\n27\n28\n29\n<strong>30</strong>\n31\n32\n33\n34\n35\n36\n37\n38\n39\n<strong>40</strong>\n41\n42\n43\n44\n45\n46\n47\n48\n49\n<strong>50</strong>\n51\n52\n53\n54\n55\n56\n57\n58\n59\n<strong>60</strong>\n61\n62\n63\n64\n65\n66\n67\n68\n69\n<strong>70</strong>\n71\n72\n73\n74\n75\n76\n77\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\">// ember/tests/integration/speakers-page-test.js</span>\n<span class=\"reserved\">import</span> Ember from <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">ember</span><span class=\"delimiter\">'</span></span>;\n<span class=\"reserved\">import</span> startApp from <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">../helpers/start-app</span><span class=\"delimiter\">'</span></span>;\n<span class=\"reserved\">import</span> Pretender from <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">pretender</span><span class=\"delimiter\">'</span></span>;\n\n<span class=\"keyword\">var</span> App, server;\n\nmodule(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Integration - Speaker Page</span><span class=\"delimiter\">'</span></span>, {\n  <span class=\"function\">beforeEach</span>: <span class=\"keyword\">function</span>() {\n    App = startApp();\n    <span class=\"keyword\">var</span> speakers = [\n      {\n        <span class=\"key\">id</span>: <span class=\"integer\">1</span>,\n        <span class=\"key\">name</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Bugs Bunny</span><span class=\"delimiter\">'</span></span>\n      },\n      {\n        <span class=\"key\">id</span>: <span class=\"integer\">2</span>,\n        <span class=\"key\">name</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Wile E. Coyote</span><span class=\"delimiter\">'</span></span>\n      },\n      {\n        <span class=\"key\">id</span>: <span class=\"integer\">3</span>,\n        <span class=\"key\">name</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Yosemite Sam</span><span class=\"delimiter\">'</span></span>\n      }\n    ];\n\n    server = <span class=\"keyword\">new</span> Pretender(<span class=\"keyword\">function</span>() {\n      <span class=\"local-variable\">this</span>.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">/api/speakers</span><span class=\"delimiter\">'</span></span>, <span class=\"keyword\">function</span>(request) {\n        <span class=\"keyword\">return</span> [<span class=\"integer\">200</span>, {<span class=\"key\"><span class=\"delimiter\">&quot;</span><span class=\"content\">Content-Type</span><span class=\"delimiter\">&quot;</span></span>: <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">application/json</span><span class=\"delimiter\">&quot;</span></span>}, JSON.stringify({<span class=\"key\">speakers</span>: speakers})];\n      });\n\n      <span class=\"local-variable\">this</span>.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">/api/speakers/:id</span><span class=\"delimiter\">'</span></span>, <span class=\"keyword\">function</span>(request) {\n        <span class=\"keyword\">var</span> speaker = speakers.find(<span class=\"keyword\">function</span>(speaker) {\n          <span class=\"keyword\">if</span> (speaker.id === parseInt(request.params.id, <span class=\"integer\">10</span>)) {\n            <span class=\"keyword\">return</span> speaker;\n          }\n        });\n\n        <span class=\"keyword\">return</span> [<span class=\"integer\">200</span>, {<span class=\"key\"><span class=\"delimiter\">&quot;</span><span class=\"content\">Content-Type</span><span class=\"delimiter\">&quot;</span></span>: <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">application/json</span><span class=\"delimiter\">&quot;</span></span>}, JSON.stringify({<span class=\"key\">speaker</span>: speaker})];\n      });\n    });\n\n  },\n  <span class=\"function\">afterEach</span>: <span class=\"keyword\">function</span>() {\n    Ember.run(App, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">destroy</span><span class=\"delimiter\">'</span></span>);\n    server.shutdown();\n  }\n});\n\ntest(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Should allow navigation to the speakers page from the landing page</span><span class=\"delimiter\">'</span></span>, <span class=\"keyword\">function</span>(assert) {\n  visit(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">/</span><span class=\"delimiter\">'</span></span>).then(<span class=\"keyword\">function</span>() {\n    click(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">a:contains(&quot;Speakers&quot;)</span><span class=\"delimiter\">'</span></span>).then(<span class=\"keyword\">function</span>(assert) {\n      assert.equal(find(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">h3</span><span class=\"delimiter\">'</span></span>).text(), <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Speakers</span><span class=\"delimiter\">'</span></span>);\n    });\n  });\n});\n\ntest(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Should list all speakers</span><span class=\"delimiter\">'</span></span>, <span class=\"keyword\">function</span>(assert) {\n  visit(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">/speakers</span><span class=\"delimiter\">'</span></span>).then(<span class=\"keyword\">function</span>() {\n    assert.equal(find(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">a:contains(&quot;Bugs Bunny&quot;)</span><span class=\"delimiter\">'</span></span>).length, <span class=\"integer\">1</span>);\n    assert.equal(find(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">a:contains(&quot;Wile E. Coyote&quot;)</span><span class=\"delimiter\">'</span></span>).length, <span class=\"integer\">1</span>);\n    assert.equal(find(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">a:contains(&quot;Yosemite Sam&quot;)</span><span class=\"delimiter\">'</span></span>).length, <span class=\"integer\">1</span>);\n  });\n});\n\ntest(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Should be able to navigate to a speaker page</span><span class=\"delimiter\">'</span></span>, <span class=\"keyword\">function</span>(assert) {\n  visit(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">/speakers</span><span class=\"delimiter\">'</span></span>).then(<span class=\"keyword\">function</span>() {\n    click(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">a:contains(&quot;Bugs Bunny&quot;)</span><span class=\"delimiter\">'</span></span>).then(<span class=\"keyword\">function</span>() {\n      assert.equal(find(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">h4</span><span class=\"delimiter\">'</span></span>).text(), <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Bugs Bunny</span><span class=\"delimiter\">'</span></span>);\n    });\n  });\n});\n\ntest(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Should be able visit a speaker page</span><span class=\"delimiter\">'</span></span>, <span class=\"keyword\">function</span>(assert) {\n  visit(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">/speakers/1</span><span class=\"delimiter\">'</span></span>).then(<span class=\"keyword\">function</span>() {\n    assert.equal(find(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">h4</span><span class=\"delimiter\">'</span></span>).text(), <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Bugs Bunny</span><span class=\"delimiter\">'</span></span>);\n  });\n});\n</pre></td>\n</tr></table>\n</div></div>\n<p>Take a look at the <code>beforeEach</code> function. There is an array of objects that contains the speaker data, currently only <code>id</code>s and <code>name</code>s.\nBelow that we are setting up the request stubs. Currently this feels\nlike a lot of boilerplate, and that is because it is. I&#39;m sure\neventually someone will write a nice abstraction to clean this up. This\ncode simply stubs out the expected server-side calls and returns a JSON\nstring in the format ember-data expects.</p>\n\n<p>Our four tests are very simple. The first tests the navigation, the 2nd\ntests the speakers are in the list, the 3rd tests that we can navigate\nto an individual speaker, and the 4th tests that we can visit the speaker page directly.</p>\n\n<p>Let&#39;s make each pass:</p>\n<div class=\"highlight js \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\">// ember/app/router.js</span>\nRouter.map(<span class=\"keyword\">function</span>() {\n  <span class=\"local-variable\">this</span>.route(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">about</span><span class=\"delimiter\">'</span></span>);\n  <span class=\"local-variable\">this</span>.resource(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">speakers</span><span class=\"delimiter\">'</span></span>);\n});\n</pre></td>\n</tr></table>\n</div></div><div class=\"highlight hbs \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre>// ember/app/templates/application.hbs\n{{link-to 'About' 'about'}}\n{{link-to 'Speakers' 'speakers'}}\n</pre></td>\n</tr></table>\n</div></div><div class=\"highlight hbs \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n  <td class=\"code\"><pre>// ember/app/templates/speakers.hbs\n&lt;h3&gt;Speakers&lt;/h3&gt;\n\n{{outlet}}\n</pre></td>\n</tr></table>\n</div></div>\n<p>The first test should now be passing.</p>\n<div class=\"highlight js \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\">// ember/app/router.js</span>\nRouter.map(<span class=\"keyword\">function</span>() {\n  <span class=\"local-variable\">this</span>.route(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">about</span><span class=\"delimiter\">'</span></span>);\n  <span class=\"local-variable\">this</span>.resource(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">speakers</span><span class=\"delimiter\">'</span></span>, <span class=\"keyword\">function</span>() {\n    <span class=\"local-variable\">this</span>.route(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">show</span><span class=\"delimiter\">'</span></span>, {<span class=\"key\">path</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">:speaker_id</span><span class=\"delimiter\">'</span></span>});\n  });\n});\n</pre></td>\n</tr></table>\n</div></div><div class=\"highlight js \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\">// ember/app/models/speaker.js</span>\n<span class=\"reserved\">import</span> DS from <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">ember-data</span><span class=\"delimiter\">'</span></span>;\n\n<span class=\"reserved\">export</span> <span class=\"keyword\">default</span> DS.Model.extend({\n  <span class=\"key\">name</span>: DS.attr(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">string</span><span class=\"delimiter\">'</span></span>)\n});\n</pre></td>\n</tr></table>\n</div></div><div class=\"highlight js \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\">// ember/app/routes/speakers/index.js</span>\n<span class=\"reserved\">import</span> Ember from <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">ember</span><span class=\"delimiter\">'</span></span>;\n\n<span class=\"reserved\">export</span> <span class=\"keyword\">default</span> Ember.Route.extend({\n  <span class=\"function\">model</span>: <span class=\"keyword\">function</span>() {\n    <span class=\"keyword\">return</span> <span class=\"local-variable\">this</span>.store.find(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">speaker</span><span class=\"delimiter\">'</span></span>);\n  }\n});\n</pre></td>\n</tr></table>\n</div></div><div class=\"highlight hbs \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n  <td class=\"code\"><pre>// ember/app/templates/speakers/index.hbs\n{{#each}}\n  {{link-to name 'speakers.show' this}}\n{{/each}}\n</pre></td>\n</tr></table>\n</div></div>\n<p>The 2nd test should now be passing.</p>\n<div class=\"highlight hbs \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n  <td class=\"code\"><pre>// ember/app/templates/speakers/show.hbs\n&lt;h4&gt;{{name}}&lt;/h4&gt;\n</pre></td>\n</tr></table>\n</div></div>\n<p>The 3rd &amp; 4th tests should now be passing.</p>\n\n<p>Passing tests are great and all, but let&#39;s actually make the app useable by getting our Rails backend\nin the game. </p>\n\n<p>Let&#39;s generate a model from our Rails app <code>rails g model speaker name:string</code></p>\n\n<p>Add some seed data:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\"># rails/db/seeds.rb</span>\n<span class=\"constant\">Speaker</span>.create(<span class=\"key\">name</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Bugs Bunny</span><span class=\"delimiter\">'</span></span>)\n<span class=\"constant\">Speaker</span>.create(<span class=\"key\">name</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Wile E. Coyote</span><span class=\"delimiter\">'</span></span>)\n<span class=\"constant\">Speaker</span>.create(<span class=\"key\">name</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Yosemite Sam</span><span class=\"delimiter\">'</span></span>)\n</pre></td>\n</tr></table>\n</div></div>\n<p>Create, migrate and seed <code>rake db:create db:migrate db:seed</code>.</p>\n\n<p>Add a <code>speakers</code> resource under an <code>api</code> namespace:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\"># rails/config/routes.rb</span>\nnamespace <span class=\"symbol\">:api</span> <span class=\"keyword\">do</span>\n  resources <span class=\"symbol\">:speakers</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Now add the controller:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\"># rails/app/controllers/api/speakers_controller.rb</span>\n<span class=\"keyword\">class</span> <span class=\"class\">Api::SpeakersController</span> &lt; <span class=\"constant\">ApplicationController</span>\n  <span class=\"keyword\">def</span> <span class=\"function\">index</span>\n    render <span class=\"key\">json</span>: <span class=\"constant\">Speaker</span>.all\n  <span class=\"keyword\">end</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">show</span>\n    render <span class=\"key\">json</span>: <span class=\"constant\">Speaker</span>.find(params[<span class=\"symbol\">:id</span>])\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Finally we need to generate a serializer <code>rails g serializer speaker</code>.</p>\n\n<p>Add <code>name</code> to the list of attributes to serialize</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">class</span> <span class=\"class\">SpeakerSerializer</span> &lt; <span class=\"constant\">ActiveModel</span>::<span class=\"constant\">Serializer</span>\n  attributes <span class=\"symbol\">:id</span>, <span class=\"symbol\">:name</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Start your Rails server with port <code>3000</code> and restart your ember server with the command \n<code>ember server --proxy http://localhost:3000</code></p>\n\n<p>Any remote requests will be proxied to this location.</p>\n\n<p>Now you can point\nyour browser to <code>http://localhost:4200</code>, click on <code>Speakers</code> and you\nshould see:</p>\n\n<p><img src=\"http://i.imgur.com/dcdkJDo.png\" alt=\"Screen1\"></p>\n\n<p>That wraps up Part 3. In <a href=\"http://reefpoints.dockyard.com/2014/05/31/building-an-ember-app-with-rails-part-4.html\">Part 4</a> we will get into relationships.</p>\n\n<p><a href=\"https://github.com/bostonember/website/commit/a21e06a9a29b19d405e50268a6d276b8db758261\">Check out the actual code for this\npart</a></p>\n","summary":null,"illustration":null,"illustration_alt":null,"tags":["ember","ruby","ruby-on-rails"],"shallow":false,"date":"2014-05-09T00:00:00Z"},{"id":"2014/05/08/building-an-ember-app-with-rails-part-2","title":"Building an Ember App with Rails Part 2","dockyarder":"brian-cardarella","body":"<p><em>This is a four-part series:\n<a href=\"http://reefpoints.dockyard.com/2014/05/07/building-an-ember-app-with-rails-part-1.html\">Part 1</a>,\n<a href=\"http://reefpoints.dockyard.com/2014/05/08/building-an-ember-app-with-rails-part-2.html\">Part 2</a>,\n<a href=\"http://reefpoints.dockyard.com/2014/05/09/building-an-ember-app-with-rails-part-3.html\">Part 3</a>,\n<a href=\"http://reefpoints.dockyard.com/2014/05/31/building-an-ember-app-with-rails-part-4.html\">Part 4</a></em></p>\n\n<p>From your project directory root, go to your ember directory and start your server:</p>\n<div class=\"highlight bash \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n  <td class=\"code\"><pre>cd ember\nember server\n</pre></td>\n</tr></table>\n</div></div>\n<p>Open your browser and go to: <code>http://localhost:4200/tests</code></p>\n\n<p>You should see something like the following:</p>\n\n<p><img src=\"http://i.imgur.com/bufKV2c.png\" alt=\"Screen 1\"></p>\n\n<p>This is a typical <a href=\"http://qunitjs.com/\">Qunit</a> test suite with some\n<a href=\"http://www.jshint.com/\">JSHint</a> tests already in our app. What you&#39;ll notice in the lower\nright-hand corner is a blank white box. This box is where our\nintegration tests will execute. This is an IFRAME so we can see our\napplications interacted with in real-time (albeit very fast real-time).</p>\n\n<p>Let&#39;s build out a landing page for our app. We will TDD this entire\napplication over this multi-part series. Create a new directory and file\n<code>ember/tests/integration/landing-page-test.js</code>.</p>\n\n<p>All of our files will be in\n<a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts\">ES6\nmodule</a>\nformat. If you are unfamiliar with ES6 modules I suggest you go and read\nup.</p>\n<div class=\"highlight js \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n</pre></td>\n  <td class=\"code\"><pre><span class=\"reserved\">import</span> Ember from <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">ember</span><span class=\"delimiter\">'</span></span>;\n<span class=\"reserved\">import</span> { module, test } from <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">qunit</span><span class=\"delimiter\">'</span></span>;\n<span class=\"reserved\">import</span> startApp from <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">../helpers/start-app</span><span class=\"delimiter\">'</span></span>;\n\n<span class=\"keyword\">var</span> App;\n\nmodule(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Integration - Landing Page</span><span class=\"delimiter\">'</span></span>, {\n  <span class=\"function\">beforeEach</span>: <span class=\"keyword\">function</span>() {\n    App = startApp();\n  },\n  <span class=\"function\">afterEach</span>: <span class=\"keyword\">function</span>() {\n    Ember.run(App, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">destroy</span><span class=\"delimiter\">'</span></span>);\n  }\n});\n\ntest(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Should welcome me to Boston Ember</span><span class=\"delimiter\">'</span></span>, <span class=\"keyword\">function</span>(assert) {\n  visit(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">/</span><span class=\"delimiter\">'</span></span>).then(<span class=\"keyword\">function</span>() {\n    assert.equal(find(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">h2#title</span><span class=\"delimiter\">'</span></span>).text(), <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Welcome to Boston Ember</span><span class=\"delimiter\">'</span></span>);\n  });\n});\n</pre></td>\n</tr></table>\n</div></div>\n<p>Once you save this file go back to your browser. You should not need to reload anything, ember-cli has a live reload feature on file\nchange. Now you should see your failing test:</p>\n\n<p><img src=\"http://i.imgur.com/l7y146I.png\" alt=\"Screen2\"></p>\n\n<p>Let&#39;s make the test pass:</p>\n\n<p>In <code>ember/app/templates/application.hbs</code></p>\n<div class=\"highlight hbs \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n  <td class=\"code\"><pre>&lt;h2 id=&quot;title&quot;&gt;Welcome to Boston Ember&lt;/h2&gt;\n{{outlet}}\n</pre></td>\n</tr></table>\n</div></div>\n<p>Check your test suite and it should be all green.</p>\n\n<p><img src=\"http://i.imgur.com/242RLGf.png\" alt=\"Screen3\"></p>\n\n<p>Congratulations on your first ember test!</p>\n\n<p>In <a href=\"http://reefpoints.dockyard.com/2014/05/09/building-an-ember-app-with-rails-part-3.html\">part 3</a> we&#39;ll build out some pages and write tests to interact with\nthese pages.</p>\n\n<p><a href=\"https://github.com/bostonember/website/commit/b17a67b9368acec29c88f4aaa83eceb82a9f143d\">Check out the actual code for this\npart</a></p>\n","summary":"Writing our first ember test","illustration":null,"illustration_alt":null,"tags":["ember","ruby","ruby-on-rails"],"shallow":false,"date":"2014-05-08T00:00:00Z"},{"id":"2014/05/07/building-an-ember-app-with-rails-part-1","title":"Building an Ember App with Rails Part 1","dockyarder":"brian-cardarella","body":"<p><em>This is a four-part series:\n<a href=\"http://reefpoints.dockyard.com/2014/05/07/building-an-ember-app-with-rails-part-1.html\">Part 1</a>,\n<a href=\"http://reefpoints.dockyard.com/2014/05/08/building-an-ember-app-with-rails-part-2.html\">Part 2</a>,\n<a href=\"http://reefpoints.dockyard.com/2014/05/09/building-an-ember-app-with-rails-part-3.html\">Part 3</a>,\n<a href=\"http://reefpoints.dockyard.com/2014/05/31/building-an-ember-app-with-rails-part-4.html\">Part 4</a></em></p>\n\n<p>This series will take us through building and structuring an application\nwith an Ember front-end built with\n<a href=\"https://github.com/stefanpenner/ember-cli\">ember-cli</a> and a Ruby on\nRails backend. We&#39;ll discuss project structure, testing, and deployment\nto Heroku.</p>\n\n<p>During the course of this series I am going to re-build the\n<a href=\"http://bostonember.com\">Boston Ember</a> website. (if it looks terrible\nthat means I&#39;m not done yet)</p>\n\n<h2>Getting setup with our tools</h2>\n\n<p>Let&#39;s start by making sure all relevant dev tools are installed on our\nmachine. I am using the following:</p>\n\n<ul>\n<li>Ruby 2.1.1</li>\n<li>Rails 4.2.0</li>\n<li>Node 0.12.0</li>\n<li>npm 2.7.0</li>\n<li>Postgres (only necessary because we are deploying to Heroku)</li>\n</ul>\n\n<p>Versions at or above these versions should be OK for following along. Please refer elsewhere on how to install these tools on your development\nmachine.</p>\n\n<p>Next I will install ember-cli</p>\n<div class=\"highlight bash \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>npm install -g ember-cli\n</pre></td>\n</tr></table>\n</div></div>\n<p>Confirm that you have <code>ember-cli</code> installed:</p>\n<div class=\"highlight bash \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>ember --version\n</pre></td>\n</tr></table>\n</div></div>\n<p>You should see:</p>\n<div class=\"highlight bash \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>version: 0.2.0\n</pre></td>\n</tr></table>\n</div></div>\n<p>Or a greater version.</p>\n\n<h2>Setting up our project</h2>\n\n<p>For this project we will keep our Rails and our Ember apps in separate\ndirectories with a top-level directory containing the two. We&#39;ll have to\ndo some project generating and renaming.</p>\n\n<p>I first create a new top-level directory:</p>\n<div class=\"highlight bash \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n  <td class=\"code\"><pre>mkdir bostonember\ncd bostonember\n</pre></td>\n</tr></table>\n</div></div>\n<p>Now we&#39;re going to generate our Rails project:</p>\n<div class=\"highlight bash \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n  <td class=\"code\"><pre>rails new bostonember -B -S -d postgresql\nmv bostonember rails\n</pre></td>\n</tr></table>\n</div></div>\n<p>Note how we renamed the directory the Rails project is in to <code>rails</code>. This\ndoes not affect anything in that directory. If you do not have Postgres\non your machine omit <code>-d postgresql</code></p>\n\n<p>Now the ember project:</p>\n<div class=\"highlight bash \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n  <td class=\"code\"><pre>ember new bostonember --skip-git\nmv bostonember ember\n</pre></td>\n</tr></table>\n</div></div>\n<p>Now it should be obvious why we moved the Rails project. We should now have\na structure like:</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre>bostonember\n|- ember\n|- rails\n</pre></td>\n</tr></table>\n</div></div>\n<p>Let&#39;s confirm that our ember app runs:</p>\n<div class=\"highlight bash \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n  <td class=\"code\"><pre>cd ember\nember server\n</pre></td>\n</tr></table>\n</div></div>\n<p>In your browser visit <code>http://localhost:4200</code> and you should see &quot;Welcome to Ember.js&quot;</p>\n\n<p>At this point you can put everything in your top level directory under\nversion control:</p>\n<div class=\"highlight bash \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre>git init\ngit add .\ngc -m &quot;Initial commit&quot;\n</pre></td>\n</tr></table>\n</div></div>\n<p>Let&#39;s make some modifications to our Rails app.</p>\n<div class=\"highlight bash \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>rm -rf rails/app/assets\n</pre></td>\n</tr></table>\n</div></div>\n<p>In <code>rails/Gemfile</code> remove the following:</p>\n\n<ul>\n<li>coffee-rails</li>\n<li>jquery-rails</li>\n<li>turbolinks</li>\n<li>jbuilder</li>\n</ul>\n\n<p>Now everything related to the Asset Pipeline is completely removed.</p>\n\n<p>Add the following to the <code>Gemfile</code>:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>gem <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">active_model_serializers</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">0.9.3</span><span class=\"delimiter\">'</span></span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>If you don&#39;t have Postgres on your machine you can set this for\nProduction only:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n  <td class=\"code\"><pre>group <span class=\"symbol\">:development</span>, <span class=\"symbol\">:test</span> <span class=\"keyword\">do</span>\n  gem <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">sqlite3</span><span class=\"delimiter\">'</span></span>\n<span class=\"keyword\">end</span>\n\ngroup <span class=\"symbol\">:production</span> <span class=\"keyword\">do</span>\n  gem <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">pg</span><span class=\"delimiter\">'</span></span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Run <code>bundle install</code> in your <code>rails</code> directory. Let&#39;s commit our\nchanges:</p>\n<div class=\"highlight bash \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n  <td class=\"code\"><pre>git add -A\ngc -m &quot;Removed asset pipeline and added active_model_serializers in Rails&quot;\n</pre></td>\n</tr></table>\n</div></div>\n<p>That wraps up Part 1. In <a href=\"http://reefpoints.dockyard.com/2014/05/08/building-an-ember-app-with-rails-part-2.html\">Part 2</a> will focus on Ember and creating\nsome functionality in our app.</p>\n\n<p><a href=\"https://github.com/bostonember/website/commit/cf2d9e18342979b1c187328c4cf29de16599e61d\">Check out the actual code for this\npart</a></p>\n","summary":"ember-cli & Rails","illustration":null,"illustration_alt":null,"tags":["ember","ruby","ruby-on-rails"],"shallow":false,"date":"2014-05-07T00:00:00Z"},{"id":"2014/05/06/the-other-thing-dhh-mentioned","title":"The other thing DHH mentioned","dockyarder":"brian-cardarella","body":"<p>By now <a href=\"http://www.confreaks.com/videos/3315-railsconf-keynote\">you&#39;ve probably seen DHH&#39;s Rails Conf 2014 Keynote</a>. \nLove it or hate it, the one thing you can&#39;t do is deny it got people&#39;s attention. I wasn&#39;t there, and I admit I reacted to Twitter\nbefore actually viewing it. If you only listened on Twitter your\nperception of the keynote is most likely that DHH is anti-testing. That\nis very far from the truth. Go and watch the video, a lot of what he\ntalks about resonated with me. I still believe in &quot;testing first&quot; and\n&quot;red-green-refactor&quot; but my style is not as dogmatic as some other&#39;s. I\nrely on integration tests quite a bit, and I don&#39;t mind hitting the database\nduring unit tests. Slow tests that actually test how clients\nuse your app are much better than fast tests that actually test nothing.</p>\n\n<p>On a side-note, I would be interested to know what DHH thinks about BDD\nas opposed to TDD, if he even thinks there is a difference. For me I\nfeel there is a distinct difference and I would characterize my style of\ndevelopment as BDD.</p>\n\n<p>But I don&#39;t want to talk about testing. I want to talk about the other\nthing DHH came down on during his keynote: Design Patterns.</p>\n\n<p>Now before I get raked over the coals let me start by saying that\noverall design patterns are great. It was the MVC(ish) and ActiveRecord\npatterns that made Rails itself possible. When we speak in patterns it\nbecomes the lingua franca for programmers. I can jump from language to\nlanguage and can, with relative ease, recognize the patterns.</p>\n\n<p>However, in the Ruby/Rails communities we have gone overboard. Design\nPatterns are the new Holy Grail of software development. A few\nyears ago people were very excited about TDD, as DHH said it was sold to\nus as a necessary tool for &quot;professional software development&quot;. Now that\neverybody just assumes TDD is happening the thought leaders went in\nsearch of the next intellectually challenging concept to hold everyone\naccountable for. This began to spring up maybe 2 years ago, at least\nthat&#39;s when I started to notice it. Design pattern talks at conferences, books\ndedicated to design patterns, podcasts talking about patterns, blog\nposts (of which we have written a few), code schools teaching design\npatterns - developers ate them up. The Ruby community was hungry for\npatterns.</p>\n\n<p>There feels to me a loss of pragmatism in the ruby community. I think\nthis is due to there being no major problems to solve in Rails anymore.\nDevelopers are always looking for problems to solve, and in this case\nthe hive mind has decided to hyper optimize on patterns.</p>\n\n<p>I get it, they are intellectually stimulating. Implementing a pattern to\n&quot;perfection&quot; will give a developer that sense of self-satisfaction. &quot;My\ncode is clean&quot;. Until the next feature comes in and you have to blow up\nwhat you&#39;ve been perfecting.</p>\n\n<p>Be pragmatic. Don&#39;t follow the trends just because some guys behind a\nmicrophone say you should.</p>\n","summary":"The Design Pattern Cargo Culting of the Ruby Community","illustration":null,"illustration_alt":null,"tags":["ruby","ruby-on-rails","opinion"],"shallow":false,"date":"2014-05-06T00:00:00Z"},{"id":"2014/05/05/preserve-scroll-position-in-ember-apps","title":"Preserve scrolling position in Ember Apps","dockyarder":"brian-cardarella","body":"<p>If you have a long list of items on a page and a user follows a link\nthen goes back to that list, Ember will re-render the list and the user\nloses their place. This can be annoying if there is a very long list of\nitems and the user is expected to be switching back and forth between\nthe list and the item.</p>\n\n<p>We can preserve the position by taking advantage of <code>didInsertElement</code>\non the list&#39;s view.</p>\n\n<p><a class=\"jsbin-embed\"\nhref=\"http://emberjs.jsbin.com/nevaxipe/2/embed?output\">Ember Starter\nKit</a><script src=\"http://static.jsbin.com/js/embed.js\"></script></p>\n\n<p><strong>Note: there seems to be a bug with the latest stable in Chrome where\nthe position is never reset if you hit the backbutton. In reality it is\nbut the position doesn&#39;t render until you scroll. Canary seems OK as do\nother browsers</strong></p>\n\n<p>In the above example you can scroll down, click on an item, then head\nback to the list and be in your original position. This is all done with\nthe following mixin:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n22\n23\n24\n25\n26\n27\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">var</span> ScrollableMixin = Ember.Mixin.create({\n  <span class=\"key\">scrollingTimeout</span>: <span class=\"integer\">100</span>,\n  <span class=\"function\">bindScrolling</span>: <span class=\"keyword\">function</span>() {\n    <span class=\"keyword\">var</span> self = <span class=\"local-variable\">this</span>,\n    <span class=\"function\">onScroll</span> = <span class=\"keyword\">function</span>() {\n      Ember.run.debounce(self, self.runScrolled, self.scrollingTimeout);\n    };\n\n    Ember.<span class=\"predefined\">$</span>(document).on(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">touchmove.scrollable</span><span class=\"delimiter\">'</span></span>, onScroll);\n    Ember.<span class=\"predefined\">$</span>(window).on(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">scroll.scrollable</span><span class=\"delimiter\">'</span></span>, onScroll);\n  }.on(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">didInsertElement</span><span class=\"delimiter\">'</span></span>),\n\n  <span class=\"function\">unbindScrolling</span>: <span class=\"keyword\">function</span>() {\n    Ember.<span class=\"predefined\">$</span>(window).off(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">.scrollable</span><span class=\"delimiter\">'</span></span>);\n    Ember.<span class=\"predefined\">$</span>(document).off(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">.scrollable</span><span class=\"delimiter\">'</span></span>);\n  }.on(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">willDestroyElement</span><span class=\"delimiter\">'</span></span>),\n\n  <span class=\"function\">preservePos</span>: <span class=\"keyword\">function</span>() {\n    Ember.<span class=\"predefined\">$</span>(window).scrollTop(<span class=\"local-variable\">this</span>.getWithDefault(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">controller.currentPos</span><span class=\"delimiter\">'</span></span>, <span class=\"integer\">0</span>));\n  }.on(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">didInsertElement</span><span class=\"delimiter\">'</span></span>),\n\n  <span class=\"function\">runScrolled</span>: <span class=\"keyword\">function</span>() {\n    <span class=\"keyword\">var</span> position = Ember.<span class=\"predefined\">$</span>(document).height() - Ember.<span class=\"predefined\">$</span>(window).scrollTop();\n    <span class=\"keyword\">var</span> viewportHeight = document.documentElement.clientHeight;\n    <span class=\"local-variable\">this</span>.set(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">controller.currentPos</span><span class=\"delimiter\">'</span></span>, Ember.<span class=\"predefined\">$</span>(window).scrollTop());\n  }\n});\n</pre></td>\n</tr></table>\n</div></div>\n<p>You then mix it into your list&#39;s view:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>ThingsView = Ember.View.extend(ScrollableMixin);\n</pre></td>\n</tr></table>\n</div></div>\n<p>Enjoy!</p>\n","summary":"A simple mixin for your views","illustration":null,"illustration_alt":null,"tags":["ember"],"shallow":false,"date":"2014-05-05T00:00:00Z"},{"id":"2014/05/04/stop-using-ember-appkit-rails","title":"Stop using Ember Appkit Rails","dockyarder":"brian-cardarella","body":"<p>A few months ago I released a gem called <a href=\"https://github.com/dockyard/ember-appkit-rails\">Ember Appkit\nRails</a>. Let me start by\napologizing for its existence. For those that began projects around\neak-rails it started with good intentions and felt right at first but we\nhave abandoned the gem at DockYard.</p>\n\n<p>eak-rails was/is a merging of <a href=\"https://github.com/stefanpenner/ember-app-kit\">Ember App\nKit</a> and Rails. It does\nsome heavy monkey patching to Rails&#39; Asset Pipeline to give as much\nproject hierarchical power to your Ember code as your Rails code\nenjoys.</p>\n\n<p>We used eak-rails in smaller projects, and intro to Ember courses. In\nsmall doses eak-rails felt right. However, when the surface area of an\napplication increased eak-rails did not scale well. Having your Ember\nand Rails files mixed into the same directories created more problems\nthan it solved.</p>\n\n<p>This week I will be focusing on how we are building Ember apps\nbacked with Rails at DockYard. Part of that will be in-line with what\nfellow DockYarder <a href=\"https://www.youtube.com/watch?v=ceFNLdswFxs&amp;t=1h8m20s\">Dan McClain presented at Boston Ember last\nmonth</a>.</p>\n\n<p>For eak-rails users, we have not abandoned you. Anybody refusing to\nmigrate we&#39;ll continue any <strong>critical</strong> bug fixes but no new features.\nWe actually sunset the gem about 2 months ago.</p>\n\n<p>ember-cli is the future.</p>\n","summary":"Just stop","illustration":null,"illustration_alt":null,"tags":["ember","ruby","ruby-on-rails"],"shallow":false,"date":"2014-05-04T00:00:00Z"},{"id":"2014/05/03/guarding-with-arrays","title":"Guarding with arrays","dockyarder":"brian-cardarella","body":"<p>This week I applied a pattern I&#39;ve been using for years to two\nseparate pull requests from our devs. (I like to review almost all of the\ncode that DockYard devs write)</p>\n\n<p>In both cases I was able to help them refactor their code to use an\nenumerator as code guards instead of conditional statements. Let&#39;s take a\nlook at each example:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n  <td class=\"code\"><pre>users = <span class=\"constant\">User</span>.where(<span class=\"key\">type</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">employee</span><span class=\"delimiter\">'</span></span>)\n\n<span class=\"keyword\">if</span> users.any?\n  users.each <span class=\"keyword\">do</span> |user|\n    <span class=\"comment\"># ...</span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>In this first example the <code>each</code> is avoided if the <code>users</code>\ncollection is empty. However, with arrays the enumerator only acts on each\nmember of the collection so we don&#39;t need to avoid if the collection is\nempty. We can refactor the above code into something like this:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre><span class=\"constant\">User</span>.where(<span class=\"key\">type</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">employee</span><span class=\"delimiter\">'</span></span>).each <span class=\"keyword\">do</span> |user|\n   <span class=\"comment\"># ...</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Much cleaner!</p>\n\n<p>The next example may not be as straight forward but as we&#39;ll see with\nRuby we can clean this up nicely.</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">if</span> params[<span class=\"symbol\">:ids</span>]\n  params[<span class=\"symbol\">:ids</span>].each <span class=\"keyword\">do</span> |id|\n    <span class=\"comment\"># ...</span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Here we have a situation where <code>params[:ids]</code> could contain a collection\nof data. Or it could be <code>nil</code>. Because of this we cannot just assume we\ncan always iterate over that value. In Ruby we can create a new <code>Array</code>:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n  <td class=\"code\"><pre>Array([<span class=\"integer\">1</span>,<span class=\"integer\">2</span>,<span class=\"integer\">3</span>])\n<span class=\"comment\"># =&gt; [1,2,3]</span>\n\nArray(<span class=\"predefined-constant\">nil</span>)\n<span class=\"comment\"># =&gt; []</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Notice in the second example that when we pass <code>nil</code> it creates an\n<strong>empty array</strong>. Knowing this we can refactor our code:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre>Array(params[<span class=\"symbol\">:ids</span>]).each <span class=\"keyword\">do</span> |id|\n  <span class=\"comment\"># ...</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>If you find yourself putting guards around enumerators odds are you can\nrefactor in a similar manner as I&#39;ve shown above.</p>\n\n<p>BTW, I&#39;ve been using this pattern for years but I don&#39;t know if there is\nan actual name for this. If you do please share!</p>\n","summary":"A common pattern we use","illustration":null,"illustration_alt":null,"tags":["ruby","ruby-on-rails"],"shallow":false,"date":"2014-05-03T00:00:00Z"},{"id":"2014/05/02/what-is-holding-up-uniqueness-validator","title":"What is holding up the uniqueness validator?","dockyarder":"brian-cardarella","body":"<p><a href=\"https://github.com/dockyard/ember-validations\">ember-validations</a> has\nnearly all of the <a href=\"https://github.com/dockyard/ember-validations#validators\">validator\nrules</a> one needs.\nOne glarring omission is the <code>Uniqueness</code> validator.</p>\n\n<h3>Not as straight forward as one would think</h3>\n\n<p>Before we even talk about the complication with implementing the remote\nvalidator, we should talk about if <code>uniqueness</code> should be both a remote \n<strong>and</strong> local validator.</p>\n\n<p>Imagine you are working with\n<a href=\"https://github.com/emberjs/data\">ember-data</a>, you attempt to create a\nnew record with an email <code>test@example.com</code>. If you already have a\nrecord with that value for email in ember-data&#39;s store should\n<code>uniqueness</code> first defer here before we hit remote? This ends up being a\nstrange thing because what if you have not persisted that first record\nyet. Do we only run uniqueness checks against local records that have\nbeen persisted? And how exactly would this fit in if you are mixing your\nvalidations into the controller instead of the model?</p>\n\n<p>If the <code>email</code> example isn&#39;t working for you, imagine you are adding a\nbunch of line items to a parent record. None of these line items have\nbeen persisted yet. And you don&#39;t want to allow your users to add\nanother until the current one they are working on is &quot;valid&quot;. Validating\nuniqueness locally is all of a sudden very valuable. But also very\ncomplex to implement properly.</p>\n\n<h3>No standard yet</h3>\n\n<p>If the local validator is too complex of an animal to tackle perhaps the\nremote validator implementation will be easier. It is, in part at least.\nWe can rely on <code>Ember.run.debounce</code> to ensure the the remote validator\ndoesn&#39;t fire too frequenly when many changes are happening to the value\nof a property. (i.e. entering text into a field)</p>\n\n<p>But where do we send this request for uniqueness? This is where I am\ncurrently hung up. I really don&#39;t want to implement a backend api\nexpectation into ember-validations. I was hoping that something like\n<a href=\"http://jsonapi.org\">json-api</a> would define this for me then I could rely upon that as a\nstarting expected endpoint. But I don&#39;t think this is anywhere on their\nradar.</p>\n\n<p>This being said, there is a possible solution. One of my co-workers <a href=\"https://twitter.com/linstula\">Lin\nReid</a> has put together a PR for\nintroducing remote uniqueness to ember-validations. It is lacking tests\n(hint hint, Lin!) but I think <a href=\"https://github.com/dockyard/ember-validations/pull/117\">this is moving in the right\ndirection</a>.</p>\n\n<p>To summarize, uniqueness is not forgotten. It is just a pain in the ass\nto do properly. Personally, I would prefer not to implement an API have\npeople buy into it now and have to change it (or be locked into it) a\nfew months from now.</p>\n","summary":"One of the more requested features of ember-validations","illustration":null,"illustration_alt":null,"tags":["ember"],"shallow":false,"date":"2014-05-02T00:00:00Z"},{"id":"2014/05/01/alert-messages-in-ember-apps","title":"Alert messages in Ember Apps","dockyarder":"brian-cardarella","body":"<p>Something that feels missing from Ember is a way to send, from anywhere\nin my app, a general alert message. Something that would pop up in my\napp, display for a few seconds and disappear.</p>\n\n<p>Clearly, this is something that should not be part of Ember itself but it\nis a common enough feature that someone should build it.</p>\n\n<p>I call it <code>Woof</code>.</p>\n\n<iframe width=\"620\" height=\"465\"\nsrc=\"//www.youtube.com/embed/8wfG8ngFvPk\" frameborder=\"0\"\nallowfullscreen></iframe> \n\n<p>It currently only exists on <a href=\"http://jsbin.com\">jsbin</a></p>\n\n<p><a class=\"jsbin-embed\"\nhref=\"http://jsbin.com/luhoquxi/7/embed?output\">WoofWoof! Notifier for\nEmber</a><script src=\"http://static.jsbin.com/js/embed.js\"></script></p>\n\n<p>So for the time being you&#39;ll need to copy/paste. We&#39;ll be extracting it\ninto a plugin soon enough.</p>\n\n<p>Basically, Woof will inject itself into your routes, controllers, and\ncomponents. You will need to embed the Woof component somewhere in your\ntemplates:</p>\n<div class=\"highlight handlebars \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre><span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">x-woof</span><span class=\"inline-delimiter\">}}</span></span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Woof injects a <code>woof</code> object similar to how <code>ember-data</code> injects a\n<code>store</code> object. You can push a message onto Woof using some of the\npre-defined types or create your own:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre><span class=\"local-variable\">this</span>.woof.info(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">This is an info message</span><span class=\"delimiter\">'</span></span>);\n<span class=\"local-variable\">this</span>.woof.pushObject({<span class=\"key\">type</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">customType</span><span class=\"delimiter\">'</span></span>, <span class=\"key\">message</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Woof! Woof!\nWoof!</span><span class=\"delimiter\">'</span></span>});\n</pre></td>\n</tr></table>\n</div></div>\n<p>This code comes with Twitter Bootstrap types setup:</p>\n\n<ul>\n<li><em>danger</em></li>\n<li><em>info</em></li>\n<li><em>success</em></li>\n<li><em>warning</em></li>\n</ul>\n\n<p>The <code>x-woof</code> component will loop through all woofs in the array and\nprint out a div with the type as the class for specific styling\npurposes.</p>\n\n<p>The code in the JSBin is setup and styled for Twitter Bootstrap.\nThe event handling is setup for removing the woof when the\ncss opacity transition completes. Browser support may vary.</p>\n","summary":"The wonder of Woof!","illustration":null,"illustration_alt":null,"tags":["ember"],"shallow":false,"date":"2014-05-01T00:00:00Z"},{"id":"2014/04/30/understanding-validation-graphs","title":"Understanding validation graphs","dockyarder":"brian-cardarella","body":"<p>If you have heard me speak about\n<a href=\"https://github.com/dockyard/ember-validations\">ember-validations</a> then\nyou may have heard me mention the term <strong>validation graph</strong>. What is\nthis? Why is it important?</p>\n\n<p>If you come from a Rails background then you are used to the validations\nbeing stored in an array on the instance of the model. When you validate\nyour model all of those validations will be run and an errors object is\nproduced. If you make a change to a property you have to run the\nvalidations again to determine the validity of the model.</p>\n\n<p>I would refer to the style of\nvalidations described above as <em>lazy validations</em>. Meaning the\nvalidity of the model may not be truly representative of its\ncurrent state. We have to opt-into running the validations again to\ndetermine this. Fortunately in most cases, the validations will run for us\nbefore we save. On the server this all happens within a request/response\ncycle so we don&#39;t really care too much about the validations\nbeing lazy because we care about the final result, not the state of the\nmodel at any given point during that cycle.</p>\n\n<p>ember-validations has <em>eager validations</em>. This means when the property\nthat is associated with any number of validations changes those\nvalidations will run again to determine the state of the model. This is\ngreat for client side apps that need to show the current state of the\nentire model any time you make a change, say during a user sign up. I\nmight want to disable the Submit button if there are any failing\nvalidations. If I make a correction I want the error message to go away\nonce the correction is made. I should not have to wait upon form\nsubmission to see my errors.</p>\n\n<p>How does ember-validations do this? Let&#39;s say you have the following\nvalidations:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">var</span> UsersController =\nEmber.ObjectController.extend(Ember.Validations.Mixin, {\n  <span class=\"key\">validations</span>: {\n    <span class=\"key\">firstName</span>: {\n      <span class=\"key\">presence</span>: <span class=\"predefined-constant\">true</span>,\n      <span class=\"key\">length</span>: <span class=\"integer\">5</span>\n    },\n    <span class=\"key\">password</span>: {\n      <span class=\"key\">confirmation</span>: <span class=\"predefined-constant\">true</span>\n    }\n  }\n});\n</pre></td>\n</tr></table>\n</div></div>\n<p>There are 3 validations on 2 properties. Each validation is an\ninstantiated class that can observe the one or more properties. In the\ncase of the <code>firstName</code> property the <code>Presence</code> and <code>Length</code> validators\nare observing it. The <code>Confirmation</code> validator is actually\nobserving <code>password</code> <strong>and</strong> <code>passwordConfirmation</code> for changes. Each\nvalidator has a <code>isValid</code> flag that is set to <code>true</code> or <code>false</code>\ndepending upon the result. Each of these validators are pushed onto a\n<code>_validators</code> array and the parent object is observing\n<code>_validators.@each.isValid</code> for any changes. If any of the validators\nare <code>false</code> the parent&#39;s <code>isValid</code> state is now <code>false</code>.</p>\n\n<p>Please take a moment to re-read the above paragraph because it is very\nimportant to have a good handle on this before we move forward. <strong>The\nvalidating object&#39;s <code>isValid</code> flag is the result of its validator&#39;s\n<code>isValid</code> flags</strong></p>\n\n<p>Because we are in quack-quack duck-typed JavaScript we don&#39;t <strong>have</strong> to\npass validator instances into the <code>_validators</code> array. <em>What if we pass\nanother validatable object?</em> Now things get interesting.</p>\n\n<p>Let&#39;s say we have a <code>Profile</code> that belongs to a <code>User</code>. The <code>Profile</code>\ncan have its own set of validations as well as its own <code>isValid</code> flag.\nIf the <code>Profile</code> is mixed into the <code>Users</code>&#39;s validation graph then the\n<code>User</code> will be invalid when the <code>Profile</code> is invalid. We can use this\npattern to build an incredibly deep and complex graph where the validation\nstate bubbles up to the root whenever a property change takes place\nanywhere in the graph.</p>\n\n<p>We can do this simply with:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">var</span> UsersController =\nEmber.ObjectController.extend(Ember.Validations.Mixin, {\n  <span class=\"key\">validations</span>: {\n    <span class=\"key\">firstName</span>: {\n      <span class=\"key\">presence</span>: <span class=\"predefined-constant\">true</span>,\n      <span class=\"key\">length</span>: <span class=\"integer\">5</span>\n    },\n    <span class=\"key\">password</span>: {\n      <span class=\"key\">confirmation</span>: <span class=\"predefined-constant\">true</span>\n    },\n    <span class=\"key\">profile</span>: <span class=\"predefined-constant\">true</span>\n  }\n});\n</pre></td>\n</tr></table>\n</div></div>\n<p>Notice <code>profile: true</code> in the graph. As long as <code>profile</code> is the path to\nthe object to validate against ember-validations will work its magic.</p>\n\n<p>However, the above only really works if the validations exist on the\n<code>Profile</code> <strong>model</strong> and not the controller.</p>\n\n<p>A visualization of a complex validation graph might look like this. We\ncan see the <code>isValid</code> states bubbling up to the original root node:</p>\n\n<p><img style=\"width: auto\" src=\"http://i.imgur.com/QP2sYWT.gif\"/></p>\n\n<p>I welcome suggestions and thoughts on this API as well as the validation graph in general.</p>\n","summary":"The power behind ember-validations","illustration":null,"illustration_alt":null,"tags":["ember"],"shallow":false,"date":"2014-04-30T00:00:00Z"},{"id":"2014/04/29/the-problem-with-server-rendered-errors","title":"The problem with server-rendered errors","dockyarder":"brian-cardarella","body":"<p>The 3rd most popular question with\n<a href=\"https://github.com/dockyard/ember-validations\">ember-validations</a> is\nhow can the library work with server-rendered validation errors, such as\nthe ones returned with <a href=\"https://github.com/emberjs/data\">ember-data</a>.</p>\n\n<p>The short answer for now: it can&#39;t.</p>\n\n<p>(btw, 2nd most popular question is about <code>uniqueness</code>/remote validations\nand the 1st most popular question is when will I provide a <code>dist/</code>\ndirectory... I&#39;ll cover the 2nd Q in an upcoming blog post. As far as\n<code>dist/</code> its never going to happen, ever)</p>\n\n<p>Here is the problem. When you are dealing with a client-side model and a\nserver-rendered model there won&#39;t always be a 1-to-1 representation of the\nmodel. In those cases you can rely on ember-data&#39;s serializer to\ntransform the properties on a server-rendered error object to ones that\nexist on the client data model. How about properties that don&#39;t exist at\nall in any form on the client? You could have a validation error on\nsomething only meant for server-rendered purposes. How do we best handle\nthis?</p>\n\n<p>Let&#39;s imagine for a moment that we can properly map all the properties\nback to their client-side equivalents. Now what? How do you resolve\nthese validation errors? How do you know in the UI when the validation\nerror has been resolved to clear the error message? Are you preventing data\nsubmission until your client model is valid? If the errors are happening\nserver-side the odds are high that these are not validations that can be\nknown to be resolved on the client unless you do another data\nsubmission and wait to see how the server responds.</p>\n\n<p>So to re-cap the two issues are:</p>\n\n<ol>\n<li>Potential lack of context on which properties errors can map back to</li>\n<li>Inability to know when server-rendered validation errors are\nsatisfied on the client</li>\n</ol>\n\n<p>To start to consider a possible solution I think we need to step back\nand consider the ultimate goal of client side validations. In my mind\nthis is purpose: <em>to help the user submit valid data to the server</em>.</p>\n\n<p>Client side validations are just UI sugar. They are there to guide your\nusers. ember-validations only has model-layer concerns, which means you\nhave to provide how the validation errors are displayed on your UI. This\nis why I also wrote\n<a href=\"https://github.com/dockyard/ember-easyForm\">ember-easyForm</a> which\nhandles the complexity of what I consider to be best practices of how\nvalidation messages should be displayed and cleared. To fix this problem\nwould have to tackle it from both sides:</p>\n\n<ol>\n<li>How will server-rendered errors be stored in the validation graph?\n(ember-validations)</li>\n<li>How will server-rendered errors be displayed and resolved in the client?\n(ember-easyForm)</li>\n</ol>\n\n<h3>Storing server-rendered errors</h3>\n\n<p>If you are already using ember-data then your data model is handling\nthis for you already. IMO you should never mix your validations into\nyour data model, they should be mixed into your controller:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">var</span> UserController =\nEmber.ObjectController.extend(Ember.Validations.Mixin, {\n  <span class=\"key\">validations</span>: {\n    <span class=\"key\">firstName</span>: {\n      <span class=\"key\">presence</span>: <span class=\"predefined-constant\">true</span>\n    }\n  }\n});\n</pre></td>\n</tr></table>\n</div></div>\n<p>This way the controller has its own <code>errors</code> object which will not clash\nwith the <code>errors</code> object on your data model. One possibility of\nreferencing the model&#39;s server-rendered errors is to have a <code>base</code>\nvalidator that is not part of the validation graph but who&#39;s errors can\nbe used for presentation purposes.</p>\n\n<h3>Displaying server-rendered errors</h3>\n\n<p>So how do you properly display these error messages? Do you try to\nassociate them with a property? What if that property is not represented\nby a form input? What if you aren&#39;t even using a form? How do you know\nwhen to clear the errors?</p>\n\n<p>I believe this is a complex issue. My first pass at handling this in\nEasyForm will be to display all of the server-rendered errors in a\nsingle place. An upcoming version of EasyForm will simply group all\nerrors in <code>base</code> and display them. These errors will not clear out due\nto any corrections made by the client. They will only clear when some\nother action clears out those errors, for example when ember-data itself\nclears out or changes the content of its <code>errors</code> object.</p>\n\n<h3>Conclusion</h3>\n\n<p>This is far from ideal. This moves us away from the &quot;best practices&quot; for\n<a href=\"http://alistapart.com/article/inline-validation-in-web-forms\">high conversion forms outlined by Luke\nWroblewski</a>.\nBut it is better than not guiding your users. If the server errors for\nany given reason we don&#39;t want our users sitting there without any\nfeedback.</p>\n\n<p>I am very interested in other approaches and brainstorming on the best\ndirection for this. Please feel free to comment below.</p>\n","summary":"Handling validation errors returned from the server is no easy task","illustration":null,"illustration_alt":null,"tags":["ember"],"shallow":false,"date":"2014-04-29T00:00:00Z"},{"id":"2014/04/28/first-few-months","title":"The first two months at DockYard","dockyarder":"maria-matveeva","body":"<h1>The first two months at DockYard.</h1>\n\n<p>Recurring themes, and principles I learned in breaking into user experience design.</p>\n\n<h2>Invisible</h2>\n\n<p>The way I see websites has changed after a month and a half of paying attention to website UI. One thing that stands out: good design can support the message and content in a quiet, almost invisible way. This principle applies in all areas of design, but I am particularly focusing on elegant solutions in web interfaces. It is a pleasure to observe, and sometimes find myself, effective use of subtle visual changes. </p>\n\n<p>The principle of quiet, effective solutions comes up most often when my work-in-progress is reviewed by the whole team. In most cases, I find that I start a design with many elements in a very \u201cloud\u201d state, then evaluate the entire layout. Once I can prioritize things on the page, most elements can become more \u201cquiet\u201d.</p>\n\n<h2>Design for a typical case, not the worst case.</h2>\n\n<p>Before DockYard, my process relied heavily on finding out what the worst-case scenario could be, and designing for that. For example, I would consider a very long, but still plausible, title for an article, and then design the header to accommodate that comfortably. I\u2019d always consider extreme cases early on, and design heavily around those. </p>\n\n<p>At DockYard, I learned to design for the typical use case, and then consider how an extreme case would be accommodated. Looking back, I realize that this approach is less limiting and can result in better graphical solutions.</p>\n\n<h2>Information density</h2>\n\n<p>Different use cases call for different densities of information. </p>\n\n<p>When you are scanning through many search results, it is sometimes appropriate to show a lot of detail at once. Search results are basically many repetitions of one type of item. Users may want to compare what they see according to different criteria, and it is useful to neatly show many details about each result. If I\u2019ve done a good job prioritizing the detailed information, many details do not cause clutter.</p>\n\n<p>In other cases, it is more important to convey the atmosphere around a brand, or to highlight one or two primary actions. Showing fewer items and fewer details can work better.  In these cases, the density of information may appear low, but each element has more prominence.</p>\n\n<p>I can make good progress towards solving the layout of a page by deciding whether it is a detailed type of page (like search results) or a page focused on emotional impact, but not details (like some landing pages).</p>\n\n<h2>Does it look \u201creal\u201d?</h2>\n\n<p>Design is often about deciding what kind of animal a chunk of information will be. Through visual design, we have to clearly answer questions like \u201chow important is this thing, relative to others?\u201d, \u201cwhat can I do with this?\u201d and even \u201cwhat kind of thing is it?\u201d. When I show a draft in a design review, I can see how the suggested changes \u201csnap\u201d to something that looks more real and interactive. I believe that the ability to make things look real quickly comes from experience, and also from paying attention to how user interface elements are crafted in products I use every day.</p>\n\n<p>Through regular design reviews, close observation of UI design, and occasional experiments, I hope to continue improving my ability to judge my own work. This will allow for more efficient work, more refined design, and more awesomeness in the future.</p>\n","summary":"Recurring themes, and principles I learned in breaking into user experience design.","illustration":null,"illustration_alt":null,"tags":["design-thinking","design","user-experience"],"shallow":false,"date":"2014-04-28T00:00:00Z"},{"id":"2014/04/28/dont-override-init","title":"Don't override init","dockyarder":"brian-cardarella","body":"<p>Too frequently I see the following problem. Someone creates a new\nclass and overrides <code>init</code>:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">var</span> UsersController = Ember.ArrayController.extend({\n  <span class=\"function\">init</span>: <span class=\"keyword\">function</span>() {\n    <span class=\"comment\">// some custom stuff</span>\n  }\n})\n\n<span class=\"reserved\">export</span> <span class=\"keyword\">default</span> UsersController;\n</pre></td>\n</tr></table>\n</div></div>\n<p><code>init</code> is a popular function to override because it is automatically run\nafter the object is instantiated. It is the only lifecycle hook for\n<code>Ember.Object</code>, subclasses of <code>Ember.Object</code> add their own hooks to the\nlifecycle but the only one that is guaranteed to be there is <code>init</code>.</p>\n\n<p>The problem is with the above example\nthe controller is broken. I forgot to make a call to <code>this._super()</code>\nwhich will call the original <code>init</code> from <code>Ember.ArrayController</code>. That\n<code>init</code> assigns the proper value to <code>content</code>. (via <code>ArrayProxy</code>)</p>\n\n<p>Instead of overriding <code>init</code> I have been writing functions that are\nspecific to the logic I want to kick off on object instantiation and\nhave that function trigger <code>on(&#39;init&#39;)</code>:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">var</span> UsersController = Ember.ArrayController.extend({\n  <span class=\"function\">doSomething</span>: <span class=\"keyword\">function</span>() {\n    <span class=\"comment\">// some custom stuff</span>\n  }.on(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">init</span><span class=\"delimiter\">'</span></span>)\n})\n\n<span class=\"reserved\">export</span> <span class=\"keyword\">default</span> UsersController;\n</pre></td>\n</tr></table>\n</div></div>\n<p>Now I don&#39;t risk messing with the original behavior of the parent class.</p>\n\n<p>Calling up the <code>super</code> chain is a powerful and important feature in\nEmber but too often I was forgetting to call it. Now the only time I find\nmyself overriding <code>init</code> is if I want to <strong>disrupt</strong> the default instantiating\nbehavior of the object.</p>\n","summary":"Use events instead","illustration":null,"illustration_alt":null,"tags":["ember","best-practices"],"shallow":false,"date":"2014-04-28T00:00:00Z"},{"id":"2014/04/25/ryo-takemasa","title":"Artist: Ryo Takemasa","dockyarder":"logan-faerber","body":"<h1>Artist: Ryo Takemasa</h1>\n\n<p>If you\u2019re not using Pinterest yet to collect various reference material and inspirational artists, may I suggest doing so immediately? I typically like to keep a huge assortment of \u201cmood boards\u201d on various topics, ranging from product designs to comic books to grandiose natural landscape photography. It serves as an endless source of reference material, much like collecting magazine clippings and organizing them in various folders. Not only is it great for collecting all of the art you love in one place, it\u2019s also a great platform for discovering new artists. A list of suggestions titled, \u201cother pins like...\u201d is displayed below the piece you\u2019re currently viewing. This often times leads me down an endless tunnel of discovery - one that typically keeps me digging a hole into the wee hours of the morning. </p>\n\n<p><img src=\"http://24.media.tumblr.com/tumblr_mbi1kuOUHp1rfdswao1_500.jpg\" alt=\"\u201cCucumbers\u201d by Ryo Takemasa\"></p>\n\n<p>During one of these excavations, I discovered the artist <a href=\"http://ryotakemasa.com/\">Ryo Takemasa</a>, who I at first mistook as <a href=\"http://en.wikipedia.org/wiki/Charley_Harper\">Charley Harper</a>. The piece I saw was a series of stand alone fruits and vegetables, most of them cut in half to expose their cross section, which all shared a beautiful mixture of what appeared to be wood block print and cut paper. Their geometric and pattern infused forms created lovely shapes alongside color shifts that I\u2019d typically only see in particular vintage illustrations. Accompanying this pin was a link to his site. It turns out he\u2019s a modern Japanese illustrator who works primarily in the print world for a variety of publications. </p>\n\n<p><img src=\"http://24.media.tumblr.com/67de982b360a312ab4d4623f544ba118/tumblr_mg1q8u60Ra1rfdswao1_500.jpg\" alt=\"\u201cYellow Pepper\u201d by Ryo Takemasa\"></p>\n\n<p>Once I discovered this, I began to see the Japanese line work and <a href=\"https://www.google.com/search?q=Japanese+wood+block+print&amp;safe=active&amp;es_sm=91&amp;espv=210&amp;source=lnms&amp;tbm=isch&amp;sa=X&amp;ei=o__0UuZd5anRAdv0gJgP&amp;ved=0CAgQ_AUoAg&amp;biw=2840&amp;bih=1495&amp;dpr=0.9\">wood block printing</a> aesthetics shine through in his work. The geometric forms and subtle color transparencies were clearly influenced by Japanese culture, but they still retained that vintage American aesthetic at times as well.</p>\n\n<p><img src=\"http://24.media.tumblr.com/tumblr_m9xfe6iAqI1rfdswao1_500.jpg\" alt=\"\u201cOnion\u201d by Ryo Takemasa\"></p>\n\n<p>I\u2019d be curious to learn what amount of influence Charley Harper\u2019s art had on the world and whether it was a huge influence everywhere, such as territories in Japan. Similarly I would also like to know the amount of influence, if any, ancient Japanese wood block printing had on Charley Harper. Was it a conscious decision or had it inadvertently shown through? If there had been a direct influence, that would significantly alter my view of someone who I\u2019ve alway seen as having emerged purely from American Modernist abstraction. Either way, it\u2019s amazing to think that two people, so separated by distance, culture and era could have produced such distinct, yet aesthetically similar artwork. As is the beauty of influence in this world. </p>\n","summary":"Highlighting an inspiring artist","illustration":null,"illustration_alt":null,"tags":["design","illustration","inspiration"],"shallow":false,"date":"2014-04-25T00:00:00Z"},{"id":"2014/04/17/ember-object-self-troll","title":"Ember Object Self Troll","dockyarder":"alex-navasardyan","body":"<p>Let&#39;s say we have a <code>Month</code> object. A <code>Month</code> has <code>weeks</code>.</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">var</span> Month = Ember.Object.extend({\n  <span class=\"key\">weeks</span>: Em.A()\n});\n</pre></td>\n</tr></table>\n</div></div>\n<p>Consider the following code:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">var</span> a = Month.create();\n<span class=\"keyword\">var</span> b = Month.create();\n\nconsole.log(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">before a</span><span class=\"delimiter\">'</span></span>, a.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">weeks</span><span class=\"delimiter\">'</span></span>)); <span class=\"comment\">// =&gt; []</span>\nconsole.log(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">before b</span><span class=\"delimiter\">'</span></span>, b.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">weeks</span><span class=\"delimiter\">'</span></span>)); <span class=\"comment\">// =&gt; []</span>\n\na.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">weeks</span><span class=\"delimiter\">'</span></span>).pushObject(<span class=\"integer\">1</span>);\na.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">weeks</span><span class=\"delimiter\">'</span></span>).pushObject(<span class=\"integer\">2</span>);\n\nconsole.log(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">after a</span><span class=\"delimiter\">'</span></span>, a.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">weeks</span><span class=\"delimiter\">'</span></span>)); <span class=\"comment\">// =&gt; [1, 2], as you expect</span>\nconsole.log(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">after b</span><span class=\"delimiter\">'</span></span>, b.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">weeks</span><span class=\"delimiter\">'</span></span>)); <span class=\"comment\">// =&gt; [1, 2], and you're like O_o</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>And another one:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">var</span> Month = Ember.Object.extend({\n  <span class=\"key\">weeks</span>: Em.A()\n});\n\n<span class=\"keyword\">var</span> a = Month.create({ <span class=\"key\">weeks</span>: Em.A([<span class=\"integer\">1</span>, <span class=\"integer\">2</span>]) });\n<span class=\"keyword\">var</span> b = Month.create();\n\nconsole.log(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">a</span><span class=\"delimiter\">'</span></span>, a.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">weeks</span><span class=\"delimiter\">'</span></span>)); <span class=\"comment\">// =&gt; [1, 2]</span>\nconsole.log(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">b</span><span class=\"delimiter\">'</span></span>, b.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">weeks</span><span class=\"delimiter\">'</span></span>)); <span class=\"comment\">// =&gt; []</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>The results of the first example are quite surprising, if you are not used\nto the prototypical inheritance.</p>\n\n<p>So what&#39;s going on there? Let&#39;s take a look at the &quot;very scary&quot; Ember.js <code>create</code> <a href=\"https://github.com/emberjs/ember.js/blob/master/packages_es6/ember-metal/lib/platform.js#L39-L52\">function</a>:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n</pre></td>\n  <td class=\"code\"><pre><span class=\"function\">create</span> = <span class=\"keyword\">function</span>(obj, props) {\n  K.prototype = obj;\n  obj = <span class=\"keyword\">new</span> K();\n  <span class=\"keyword\">if</span> (props) {\n    K.prototype = obj;\n    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> prop <span class=\"keyword\">in</span> props) {\n      K.prototype[prop] = props[prop].value;\n    }\n    obj = <span class=\"keyword\">new</span> K();\n  }\n  K.prototype = <span class=\"predefined-constant\">null</span>;\n\n  <span class=\"keyword\">return</span> obj;\n};\n</pre></td>\n</tr></table>\n</div></div>\n<p>When you don&#39;t pass any properties to create (<code>props</code>), all instances of\nthe <code>Object</code> will share the same prototype. That&#39;s pretty much the gist\nof the prototypical inheritance. It means that any changes on one object will\nreflect on the others. That explains the behaviour in the first example.</p>\n\n<p>If you pass the properties (that ones that you specified at <code>extend</code> time) to <code>create</code>,\nthey are going to be replaced on the instance&#39;s prototype.</p>\n\n<p>There are two ways of changing the default behavior:</p>\n\n<ul>\n<li>turn <code>weeks</code> into a <a href=\"http://reefpoints.dockyard.com/2013/09/04/computed_properties_in_ember_js.html\">Computed Property</a></li>\n<li>set <code>weeks</code> on <code>init</code></li>\n</ul>\n\n<p>Using computed property:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">var</span> Month = Ember.Object.extend({\n  <span class=\"key\">weeks</span>: Ember.computed(<span class=\"keyword\">function</span>() {\n    <span class=\"keyword\">return</span> Em.A();\n  })\n});\n</pre></td>\n</tr></table>\n</div></div>\n<p>In this case, <code>weeks</code> is going to return a new <code>Ember.Array</code> on <code>get</code>.\nThe code will run as you expect, <code>weeks</code> are not going to be shared.</p>\n\n<p>Using <code>init</code>:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">var</span> Month = Ember.Object.extend({\n  <span class=\"key\">weeks</span>: <span class=\"predefined-constant\">null</span>,\n\n  <span class=\"function\">init</span>: <span class=\"keyword\">function</span>() {\n    <span class=\"local-variable\">this</span>._super();\n    <span class=\"local-variable\">this</span>.set(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">weeks</span><span class=\"delimiter\">'</span></span>, Em.A());\n  }\n});\n</pre></td>\n</tr></table>\n</div></div>\n<p>This is very clear and nice technique if you&#39;re not familiar with computed properties.\nOverriding <code>init</code> and calling <code>super</code> allows to run code upon the object&#39;s creation.\nYou can set the value for <code>weeks</code> there.</p>\n\n<p>You can also use <code>on(&#39;init&#39;)</code> but it&#39;s discouraged because a subclass can provide\nits own implementation of <code>setWeeks</code>:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">var</span> Month = Ember.Object.extend({\n  <span class=\"function\">setWeeks</span>: <span class=\"keyword\">function</span>() {\n    <span class=\"local-variable\">this</span>.set(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">weeks</span><span class=\"delimiter\">'</span></span>, Em.A());\n  }.on(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">init</span><span class=\"delimiter\">'</span></span>)\n});\n</pre></td>\n</tr></table>\n</div></div>\n<p>Happy coding!</p>\n","summary":"Ember.Object.create explained","illustration":null,"illustration_alt":null,"tags":["ember"],"shallow":false,"date":"2014-04-17T00:00:00Z"},{"id":"2014/04/10/vim-on-your-mark","title":"Vim: On Your Mark...","dockyarder":"doug-yun","body":"<p>The strength of Vim&#39;s basic <strong>movement</strong> commands are immediately apparent.\nWe can jump four words over with <code>4w</code> or move to the beginning\nof a sentence with <code>(</code>. Once these movements are engrained to muscle memory,\nwe can move within files with ease. However, there are certain limitations\nto these basic movement commands; wouldn&#39;t it be great if we could move\nto different and specific spots within multiple files?</p>\n\n<p>Today, we&#39;re going to briefly cover a poweful motion strategy:\n<strong>mark</strong> motion.</p>\n\n<h2>What is a Mark?</h2>\n\n<p>Marks are essentially <em>hidden</em> positions that, when set, allow us to\njump back to that specific location or line. What we mean by <em>hidden</em> is that these marks\nare not visible by default; marks are simply invisible points within a file.</p>\n\n<p>The mark motion command starts with hitting <code>m</code> - <code>m</code> for mark - and then setting\na <strong>destination marker</strong> - either a lowercase letter or uppercase letter.\nWe&#39;ll introduce the differences among the destination markers soon.</p>\n\n<p>Let&#39;s start by covering a simple example of setting a <strong>lowercase mark</strong>.</p>\n\n<h4>Example: Moving With A Lowercase Mark</h4>\n<div class=\"highlight bash \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n  <td class=\"code\"><pre># ~/example1.txt\n\nHere is Line 3\nHere is Line 4\nHere is Line 5\n\n# On Line #3, use `mn` to set a mark on the letter `n` within the word `Line`.\n# Move around the file.\n# Go back to the previous mark by hitting: `n\n</pre></td>\n</tr></table>\n</div></div>\n<ol>\n<li><p>First, in <code>Normal</code> mode, move to Line #3. Place your cursor on the letter <code>n</code>\nwithin the word <code>Line</code>.</p></li>\n<li><p>Next, set a mark by hitting <code>m</code> and then the lowercase letter\n<code>n</code>. <code>n</code> is our lowercase <strong>destination marker</strong>.\nCongratulations, we&#39;ve just set a <strong>lowercase mark</strong>!\nWe could of used any lowercase character, but by using the letter <code>n</code>, we&#39;ve\nsetup a nice mnemonic device.</p></li>\n<li><p>Now move to Line #5. We&#39;re going to move to our mark now.\nHit <code>`n</code> - <em>backtick</em> and <code>n</code>, our previous destination marker.</p></li>\n<li><p>Notice where our cursor is (<em>hint</em>: it should be located on the letter <code>n</code>\nwithin the word <code>Line</code>).\nHuzzah, we are now back to our previous position within the file!</p></li>\n<li><p>Go back to Line #5.</p></li>\n<li><p>Now, hit <code>&#39;n</code> - <em>single quote</em> and <code>n</code>.</p></li>\n<li><p>We are now at the beginning of Line #3!</p></li>\n</ol>\n\n<h2>Jumps, Marks and a Few Commands</h2>\n\n<p>We know how to set a mark with <code>m</code>, but let&#39;s clarify the two types of mark jumps\nand the different types of marks.</p>\n\n<h2>Two Types of Mark Jumps</h2>\n\n<h3>Backtick</h3>\n\n<p><code>`&lt;mark&gt;</code> - The <em>backtick</em> places our cursor directly on the mark.</p>\n\n<h3>Single Quote</h3>\n\n<p><code>&#39;&lt;mark&gt;</code> - The <em>single quote</em> takes us to the first non-blank character of the\nmark&#39;s line.</p>\n\n<h2>Three Types of Marks</h2>\n\n<h3>Lowercase Marks</h3>\n\n<p><strong>a - z</strong> - These marks preserve locations within a <em>single</em> file. Each individual file\npossesses 26 settable lowercase marks. Lowercase marks are valid as long as the file\nremains in the buffer list. Furthermore, lowercase marks can be combined with other\noperators.  For example, <code>c`n</code>, will change everything between the cursor to the\nmark, <code>n</code>.</p>\n\n<h3>Uppercase Marks</h3>\n\n<p><strong>A - Z</strong> - These marks preserve locations within <em>multiple</em> files. Also known\nas <strong>file marks</strong>. These marks, which are shared among all files within the buffer list,\ncan be used to jump from file to file. File marks can only be used in combination with\noperators if the mark is in the current file, i.e. when the current file opened contains\nthe global file mark.</p>\n\n<h3>Numbered Marks</h3>\n\n<p><strong>0 - 9</strong> - Numbered marks cannot be set directly, instead they are created\nautomagically and used by the <strong>viminfo-file</strong> (<code>:help viminfo-file</code>).\nEssentially, the numbered marks store the location of your cursor after closing Vim.\nFor example, mark <code>0</code> returns the position of the cursor during your last Vim session,\nwhile mark <code>1</code> returns the next to last Vim session, and so forth.</p>\n\n<h2>Some Pertinent Commands</h2>\n\n<h3>Viewing current marks</h3>\n\n<p><strong>:marks {argument}</strong> - <strong>:marks</strong> will show you all current marks, their file location and\ndestination marker. We can pass in an <em>argument</em> to view a range of marks between two marks.</p>\n\n<ul>\n<li><strong>:marks aC</strong> - will return all marks that are between <code>a</code> and <code>C</code>.</li>\n</ul>\n\n<h3>Deleting Marks</h3>\n\n<p><strong>:delm[arks] {marks}</strong> - We can use <code>:delm</code> or <code>:delmarks</code> and then pass in marks\nthat we want to delete.</p>\n\n<ul>\n<li><strong>:delm aAbB</strong> - will delete marks labeled <code>a</code>, <code>A</code>, <code>b</code> and <code>B</code>.</li>\n</ul>\n\n<h2>Okay, What&#39;s So Cool About Marks?</h2>\n\n<p>Marks can speed up our navigation workflow! Here are a few examples:</p>\n\n<h4>Discussion: Editing One Large File With Lowercase Marks</h4>\n\n<p>I&#39;ve found <strong>lowercase marks</strong> extremely useful when editing multiple portions of\na file. Instead of using <code>CTRL+u</code>, <code>CTRL+d</code>, <code>H</code>, or <code>L</code> to move up and down\nthe file, you can set local marks at heavily treaded locations at jump back\nand forth among them. Moveover, marks give us the ability to jump to an\nexact location - <em>backtick</em> - or to the beginning of the line - <em>single quote</em>.</p>\n\n<h4>Example: Editing Multiple Files With Uppercase (File) Marks</h4>\n\n<p>When I first started using Vim (and began programming), I had multiple windows\nopen constantly on the monitor.  Not only does it quickly become cluttered,\nremembering which file is which becomes hairy.</p>\n\n<p>Files marks to the rescue!</p>\n\n<ul>\n<li>Here are three files we are want to work on. Let&#39;s add some <strong>file marks</strong>.\nJust like lowercase marks, the actual uppercase letter we use does not matter\nas long as it is unique.</li>\n</ul>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\"># ~/sheep.rb</span>\n\n<span class=\"comment\"># On the word `speak`, place a file mark with `mS` - `S` for &quot;sheep&quot;</span>\n<span class=\"keyword\">def</span> <span class=\"function\">speak</span>\n  puts <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">Baah! Baah!</span><span class=\"delimiter\">&quot;</span></span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div><div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\"># ~/cat.rb</span>\n\n<span class=\"comment\"># On the word `speak`, place a file mark with `mC` - `C` for &quot;cat&quot;</span>\n<span class=\"keyword\">def</span> <span class=\"function\">speak</span>\n  puts <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">Meow! Meow!</span><span class=\"delimiter\">&quot;</span></span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div><div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\"># ~/doge.rb</span>\n\n<span class=\"comment\"># On the word `speak`, place a file mark with `mD` - `D` for &quot;doge&quot;</span>\n<span class=\"keyword\">def</span> <span class=\"function\">speak</span>\n  puts <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">Wow! Ahh yes method! Such quality!</span><span class=\"delimiter\">&quot;</span></span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<ul>\n<li>If we are in <code>~/sheep.rb</code> and want to jump to the <code>speak</code> method defined\nwithin <code>~/cat.rb</code>, we can do so with <code>`C</code>. Now that we&#39;re in <code>~/cat.rb</code>,\nlet&#39;s go to the <code>speak</code> method within <code>~/doge.rb</code> with <code>`D</code>.\nPretty sweet, huh?</li>\n</ul>\n\n<h2>&quot;X&quot; Marks the Spot</h2>\n\n<p>Hope you enjoyed the basics of Vim <strong>marks</strong>. We&#39;ve only covered the basics here, so if\nyou&#39;d like to learn more check the docs.</p>\n","summary":"An introduction to the mark motion","illustration":null,"illustration_alt":null,"tags":["vim","workflow"],"shallow":false,"date":"2014-04-10T00:00:00Z"},{"id":"2014/04/04/design-within-the-browser","title":"Designing Within The Browser","dockyarder":"steven-trevathan","body":"<p>I employ a solid range of design tools and although I\u2019m spending some of my time designing in the browser, the ideal of designing <em>entirely</em> in that context is often unrealistic and stifling.</p>\n\n<h2>Save time for discovery</h2>\n\n<p>Sometimes an accident leads to an interesting and useful discovery. In art and design this is especially true. In a browser, unfortunately, accidents don\u2019t pleasantly surprise you in the way <em>\u201dstatic\u201d</em> designs may. In development an accident means broken code \u2013 plain and simple. You may stumble on a solution, but you\u2019re not going to be surprised by a random glimpse of order and possibility in the muck of your own broken HTML. It\u2019s broken until it\u2019s fixed.</p>\n\n<p>Such a quality of the web is necessary, but I don\u2019t find it very helpful for discovering new solutions to visual or experience problems. In the early stages you become very focused on minute details when you should be thinking in broad strokes. In later stages you find yourself seeing larger visual problems and with less power to change it. In many ways, I find designing in the browser akin to designing in the dark.</p>\n\n<p>There are plenty of browser based design tools attempting to free designers of heavy weights such as Photoshop and allow designers to work without learning advanced HTML and CSS. This is a positive direction, but I still haven\u2019t seen the problem solved without losing the element of discovery. Instead of happy accidents, you may experience a gross misunderstanding between your intent, the front end code of the tool you\u2019ve chosen, and the DOM. Maybe the tools will get better, and I\u2019m sure they will, but I\u2019m not optimistic they\u2019ll be architected to facilitate discovery within the next few years.</p>\n\n<p>For the time being my opinion is that, in terms of process, improvements in web standards and web technology aren\u2019t going to change anything save for ensuring work may be completed in shorter order. We create tools (or products) and advance technology in order to <em>increase</em> efficiency and <em>improve</em> human capability. The computer added efficiency for designers by - among many, many other things - being faster and more forgiving than pen and ink, but we still use these older technologies today in tandem with computers.</p>\n\n<h2>The right tool at the right time</h2>\n\n<p>We can still integrate designing in the browser as a component of the design process. I don\u2019t view this as an all\u2013or\u2013nothing deal and our process should be malleable enough to better facilitate reaching the goals of each and every project. Imagine, as an extreme example, that you were told to integrate sketching into your design process. You would absolutely not render your designs \u201cpixel-perfect\u201d in a sketch book. It beats the whole point of the sketch book and the whole experience would be tremendously debilitating. Instead, you\u2019d probably do at least a little bit of preliminary sketching before opening Photoshop, and return when you need to massage another idea out of your head.</p>\n\n<p>The benefit of designing in the web, or at least getting a product in the browser sooner, is that you can experience it and identify major problems before you\u2019re past the point of no return. This is a pretty well established idea (that I believe in), but just like using the sketchbook we need to identify when it\u2019s appropriate to pop open a text editor and start punching in markup and styles. I\u2019ll kick this off with two cases where I think designing in the browser is appropriate: prototyping unique interactions and defining visual state changes.</p>\n\n<h3>Prototyping unique interactions</h3>\n\n<p>We should prototype and test core product interactions when they are unorthodox. Design patterns should be used where possible, but if we are knowingly going against the grain we need to test that experience in the browser and with users (as available) before making it permanent. This is sometimes after the static design has been completed, but in many cases can be done before anything static has been created.</p>\n\n<h3>Visual state changes</h3>\n\n<p>When following design patterns there are still standard things to be fleshed out in the browser: hovers, presses, clicks, fades, sliding interactions, and so on. Generally, if you don\u2019t know how an interaction will truly feel and it involves a state change: design it in the browser. At DockYard, we often propose a solution first in Photoshop and then weigh our options again in the browser. </p>\n\n<h2>An example</h2>\n\n<p>We completed a project last year with the ambition of the design stage being completely browser based, skipping the use of Photoshop altogether. The benefits of having a usable front end in place of static mockups are great: you can use your app as it is being designed and get a sense of the failure points before they become too ingrained in the experience. User testing can begin earlier. This is awesome. From the outside, designing solely in the browser seemed perfect.</p>\n\n<p>You guessed it: I was wrong. It wasn&#39;t right for us then, nor for that project. We were less focused on the user\u2019s experience and more focused on the organization and creation of markup, styles, and script. We began (and ended) by worrying about and writing lines of HTML, CSS, and JavaScript. We were worried about front end patterns, but the design patterns we were aiming to support weren\u2019t fully identified yet. We introduced somewhat of a chicken and the egg problem, making our thinking more difficult and more sporadic than it should have been.</p>\n\n<p>For us this meant spending hours and hours tweaking markup, all in the name of being able to feel and test the product as it was created. In some cases, for sure, this can be worth it. In our case we even had plenty of existing design assets to base our web interface off of, but that project had called for too many largely different iterations (and mixed opinions) of the same few designs.</p>\n\n<p>Designing in the browser does not mean your project will turn out poorly. Ultimately, and fortunately, that project turned out well in the end, but we did spend a lot more time getting a complete idea of what we were actually designing and building. Our clients got to use the product before they bought into the concept, which was great for them. For us, however, it was as if we started designing a house by laying the concrete foundation before knowing what we were building.</p>\n\n<h2>Weigh your options</h2>\n\n<p>A successful product depends on its content, design, engineering, market fit, team, tools, and infinitely more. When consulting, those elements are wildly varied from client to client, including the toolset. So we must be mindful of what is necessary, be malleable in our processes, and most important of all: make room for discovery.</p>\n","summary":"Make room for accidental progress.","illustration":null,"illustration_alt":null,"tags":["design","design-process"],"shallow":false,"date":"2014-04-04T00:00:00Z"},{"id":"2014/03/30/magic_behind_es6_generators","title":"Magic behind ES6 Generators","dockyarder":"alex-navasardyan","body":"<h2>Overview</h2>\n\n<p>The next version of JavaScript (ES6 or ES.next) is going to have a lot of\ngreat features built in that are going to make developer&#39;s life much easier.\n<a href=\"http://wiki.ecmascript.org/doku.php?id=strawman:promises\">Promises</a>,\n<a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:modules\">Modules</a>,\n<a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:weak_maps\">WeakMaps</a>,\n<a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:generators\">Generators</a> to name a few. In this\npost I want to talk about generators.</p>\n\n<p>Generators are objects that encapsulate suspended execution context. What the heck does it mean?\nIn other words, generators allow you to pause execution of your code and return a value.</p>\n\n<p>Let&#39;s say you need to write a <code>cubic</code> function (for any given number, calculate a cubic number)\nand then print it out.</p>\n\n<p>Code without generators for 10 numbers:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">function</span> <span class=\"function\">out</span>(n) {\n  console.log(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Cubic number:</span><span class=\"delimiter\">'</span></span>, n);\n}\n\n<span class=\"keyword\">function</span> *cube(n) {\n  n = n * <span class=\"integer\">3</span>;\n  out(n);\n}\n\n<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"integer\">0</span>; i &lt; <span class=\"integer\">10</span>; i++) {\n  cube(i);\n}\n</pre></td>\n</tr></table>\n</div></div>\n<p>Code with ES6 generators for 10 numbers:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">function</span> *cube(n) {\n  <span class=\"keyword\">var</span> i = <span class=\"integer\">0</span>, j = n;\n  <span class=\"keyword\">while</span> (i &lt; n) {\n    i++;\n    j = j * <span class=\"integer\">3</span>;\n    yield j;\n  }\n}\n\n<span class=\"keyword\">var</span> c = cube(<span class=\"integer\">10</span>);\n<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"integer\">0</span>; i &lt; <span class=\"integer\">10</span>; i++) {\n  console.log(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Cubic number:</span><span class=\"delimiter\">'</span></span>, c.next().value);\n}\n</pre></td>\n</tr></table>\n</div></div>\n<p>Can you spot the difference? Generator represents a sequence of numbers and every time you call\n<code>next()</code> it gives you the next number in the sequence (it actually gives you an object back\nwith two properties: <code>value</code> and <code>done</code>):</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>c.next(); <span class=\"comment\">// =&gt; { value: 3, done: false }</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Once the limit is reached, generator will return:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>c.next(); <span class=\"comment\">// =&gt; { value: undefined, done: true }</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Pretty cool, eh?</p>\n\n<p>Note, that generators look <em>just</em> like functions, but with <code>*</code>s:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\">// regular function</span>\n<span class=\"keyword\">function</span> <span class=\"function\">cube</span>()  {}\n\n<span class=\"comment\">// es6 generator</span>\n<span class=\"keyword\">function</span> *cube() {}\n</pre></td>\n</tr></table>\n</div></div>\n<p>If you&#39;re a Python developer, generators and <code>yield</code> are not new to you. But it&#39;s a big step forward\nfor JavaScript.</p>\n\n<h2>For-Of</h2>\n\n<p>The <code>for of</code> loop is a new iteration construct in ES6 which supports generators. This is really for\nperformance purposes. Instead of returning a full array, you can just return a generator which\nlazily gives values back on each iteration. That decreases memory allocation and you can express\ninfinite data structures (since no array allocation is needed).</p>\n\n<p>A really interesting use case for generators is async operations:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n  <td class=\"code\"><pre>spawn(<span class=\"keyword\">function</span>() {\n  <span class=\"keyword\">var</span> users = yield db.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">users</span><span class=\"delimiter\">'</span></span>);\n  <span class=\"keyword\">var</span> posts = yield db.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">posts</span><span class=\"delimiter\">'</span></span>);\n});\n</pre></td>\n</tr></table>\n</div></div>\n<p><code>spawn</code> is a function in <a href=\"http://nodejs.org\">node.js</a> that allows you to create child processes.\nYou can read about it <a href=\"http://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options\">here</a>.</p>\n\n<p><code>spawn</code> hands control over the function to the scheduler, which knows that the function will <code>yield</code>\npromises and will send the values back as soon as the promises are going to be resolved (fulfilled).</p>\n\n<p>This is really powerful.</p>\n\n<h2>Availability</h2>\n\n<p>If you really want to use this feature, you&#39;re going to have to use transpilers, such as <a href=\"https://github.com/google/traceur-compiler\">Traceur</a>\nor <a href=\"https://github.com/facebook/regenerator\">Regenerator</a>. The reason for that is two new language keywords\nintroduced by ES6 generators: <code>yield</code> and <code>function *</code>. There&#39;s a really good blog post about <a href=\"http://gu.illau.me/posts/polyfilling-generators/\">polyfilling generators</a>\nthat goes in depth about how transpilers deal with the new syntax.</p>\n\n<p>Native implementations of generators are available in Firefox and Chrome Canary\n(you will need to enable <a href=\"chrome://flags/#enable-javascript-harmony\">harmony experimental flag</a>).</p>\n\n<p>I encourage you to play around with the generators and get familiar with the syntax because in couple of\nyears from now, we all will be writing code using generators (hopefully).</p>\n\n<p>P.S.</p>\n\n<p>Great article about <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/1.7#Generators\">ES6 generators</a>.</p>\n","summary":"Overview of ES6 generators","illustration":null,"illustration_alt":null,"tags":["javascript","es6"],"shallow":false,"date":"2014-03-30T00:00:00Z"},{"id":"2014/03/17/emberconf-picks-ups-where-the-rails-community-left-off","title":"Ember Conf picks up where the Rails community left off","dockyarder":"brian-cardarella","body":"<p>I&#39;m writing this on my flight from Portland back to Boston. On this\nplane I count at least 12 other attendees of the first <a href=\"http://emberconf.com\">Ember Conference</a>.\nA lot has been said about Ember in the past year but if this conference\nwas any indicator big things are happening and even bigger things are\ngoing to happen.</p>\n\n<p>For me, the biggest take away from any conference is the people and\nthis conference was no exception. In fact, Ember Conf is now my gold\nstandard for a technology event. The only possible comparison I have is\nhow early Rails Confs felt. There is an energy and a scary amount of\ncreativity happening in the Ember community right now. Much like the\ncommunity felt around Rails back in 2006 - 2009 there is the\nunderstanding that those doing Ember now are going to be shaping the\nfuture of the web. Whether that is setting the bar higher for how users\nwill want to consume web applications in the future or being a large\ninfluence on what the future of the web standards themselves will be, Ember\nis the only web technology today that is positioned in the same place\nthat I feel Rails was years ago. We are the rebels. We are the\ncounter-culture. Ember is the future.</p>\n\n<p>But, we&#39;re learning from the mistakes of the past. Where the Rails\ncommunity was the counter-culture of its time it suffered from a male\n(and very juvenile) dominated culture. This culture was the result of\nthe &quot;RockStar&quot; mentality set forth by its leader(s). Ember, in contrast,\nbegan its very first conference with Yehuda Katz and Tom Dale addressing\nthe entire crowd with their desire for Ember to be an open and diverse\ncommunity.</p>\n\n<p>The conference was very well organized, big shoutout to Leah Silber at Tilde. She\nput on a great conference, I&#39;m proud that my company had the opportunity\nto help make it happen.</p>\n\n<p>From a technology perspective <strong>huge</strong> things are on the horizon for\nEmber. If you have been on the cusp of getting involved you will be\nkicking yourself later for not doing so now. If you are already building\nin Ember nearly all of the pain-points that have existed will be\naddressed in the next 6 months. Testing as a first class citizen,\nfastest template rendering of any JavaScript framework/tool out there,\nanimation support, query params, a standardized project structure and\nbuild tool, and there was even talk of how we&#39;re going to package and\ndistribute dependencies. Ember Conf was a continuous roll of one great\ntalk after another loaded with the best tech on the web. I&#39;ve already\nreally enjoyed writing Ember apps for the past year, the next year will\nbe amazing.</p>\n\n<p>I realize at this point the article smacks of cheerleading optimism. How\ncan it be this good? The real secret weapon of any open source software\nis its community. After this week I can tell you that I have not felt\nthis way about a community since the early days of Rails. There is\nsomething very special happening here. It isn&#39;t just me. <a href=\"https://twitter.com/search?q=%23emberconf&amp;src=tyah\">Go search\nTwitter for <code>#EmberConf</code> and see for\nyourself</a>.</p>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>People are crying, having\nspiritual awakenings and overall life-affirming moments at <a\nhref=\"https://twitter.com/search?q=%23emberconf&amp;src=hash\">#emberconf</a>\n\u2026 Think I want whatever\u2019s in their punch</p>&mdash; Rob Conery\n(@robconery) <a\nhref=\"https://twitter.com/robconery/statuses/449041727240695808\">March\n27, 2014</a></blockquote>\n\n<script async src=\"//platform.twitter.com/widgets.js\"\ncharset=\"utf-8\"></script>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>IT\u2019S HAPPENING!! HTMLbars\neliminates &lt;script&gt; tags, {{bindAttr}}, and gives Ember the\nfastest bound templates on the planet. <a\nhref=\"https://twitter.com/search?q=%23emberconf&amp;src=hash\">#emberconf</a></p>&mdash;\nTom Dale (@tomdale) <a\nhref=\"https://twitter.com/tomdale/statuses/448621833953083392\">March 26,\n2014</a></blockquote>\n\n<script async src=\"//platform.twitter.com/widgets.js\"\ncharset=\"utf-8\"></script>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>This scene with <a\nhref=\"https://twitter.com/tomdale\">@tomdale</a> <a\nhref=\"https://twitter.com/tehviking\">@tehviking</a> and <a\nhref=\"https://twitter.com/fivetanley\">@fivetanley</a> sums up <a\nhref=\"https://twitter.com/search?q=%23emberconf&amp;src=hash\">#emberconf</a>\n- so much love \u2764\ufe0f\u2764\ufe0f\u2764\ufe0f <a\n  href=\"http://t.co/AEUEeiq97i\">pic.twitter.com/AEUEeiq97i</a></p>&mdash;\nDan Gebhardt (@dgeb) <a\nhref=\"https://twitter.com/dgeb/statuses/449088566962814976\">March 27,\n2014</a></blockquote>\n\n<script async src=\"//platform.twitter.com/widgets.js\"\ncharset=\"utf-8\"></script>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>Ember makes you a badass\nweb developer. The productivity gains are unparalleled. Page flow is\nfirst class. <a\nhref=\"https://twitter.com/search?q=%23emberconf&amp;src=hash\">#emberconf</a>\n<a\nhref=\"http://t.co/DlKqmmdVEU\">pic.twitter.com/DlKqmmdVEU</a></p>&mdash;\nJohn K. Paul (@johnkpaul) <a\nhref=\"https://twitter.com/johnkpaul/statuses/448510256097001472\">March\n25, 2014</a></blockquote>\n\n<script async src=\"//platform.twitter.com/widgets.js\"\ncharset=\"utf-8\"></script>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>Notes on the morning <a\nhref=\"https://twitter.com/search?q=%23emberconf&amp;src=hash\">#emberconf</a>\nkeynote by <a href=\"https://twitter.com/wycats\">@wycats</a> <a\nhref=\"https://twitter.com/tomdale\">@tomdale</a> <a\nhref=\"http://t.co/rYKEruaxRe\">pic.twitter.com/rYKEruaxRe</a></p>&mdash;\nMichael Chan (@chantastic) <a\nhref=\"https://twitter.com/chantastic/statuses/448517744900976641\">March\n25, 2014</a></blockquote>\n\n<script async src=\"//platform.twitter.com/widgets.js\"\ncharset=\"utf-8\"></script>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p>hug <a\nhref=\"https://twitter.com/tomdale\">@tomdale</a> achievement unlocked <a\nhref=\"https://twitter.com/search?q=%23emberconf&amp;src=hash\">#emberconf</a>\n<a\nhref=\"http://t.co/nLOBPGJwKL\">pic.twitter.com/nLOBPGJwKL</a></p>&mdash;\nBen Rosas (@ballPtPenguin) <a\nhref=\"https://twitter.com/ballPtPenguin/statuses/449000521211203586\">March\n27, 2014</a></blockquote>\n\n<script async src=\"//platform.twitter.com/widgets.js\"\ncharset=\"utf-8\"></script>\n\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p><a\nhref=\"https://twitter.com/ebryn\">@ebryn</a> <a\nhref=\"https://twitter.com/EmberConf\">@EmberConf</a> Such a wonderful\nexperience. One of the best conferences I&#39;ve ever attended, it was\nlike one big family finally united.</p>&mdash; Kasper Tidemann\n(@KasperTidemann) <a\nhref=\"https://twitter.com/KasperTidemann/statuses/449044965855723520\">March\n27, 2014</a></blockquote>\n\n<script async src=\"//platform.twitter.com/widgets.js\"\ncharset=\"utf-8\"></script>\n","summary":"A summary of the first Ember Conference","illustration":null,"illustration_alt":null,"tags":["ruby-on-rails","ember","opinion"],"shallow":false,"date":"2014-03-17T00:00:00Z"},{"id":"2014/03/03/using-database-templates","title":"Using Database Templates in Rails","dockyarder":"romina-vargas","body":"<p>Using Postgres as your application&#39;s database? If so, there is a handy\nconfiguration option that you may not be aware about. The <code>pg</code> gem provides a <code>template</code> option that\nallows for copying already existing data into an application as\nlong as you have matching schema. </p>\n\n<p>To add this functionality, simply add the <code>template</code> option inside <code>config/database.yml</code>:</p>\n<div class=\"highlight yaml \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n  <td class=\"code\"><pre><span class=\"key\">development</span>:\n  <span class=\"key\">adapter</span>: <span class=\"string\"><span class=\"content\">postgresql</span></span>\n  <span class=\"key\">encoding</span>: <span class=\"string\"><span class=\"content\">unicode</span></span>\n  <span class=\"key\">database</span>: <span class=\"string\"><span class=\"content\">myapp_development</span></span>\n  <span class=\"key\">template</span>: <span class=\"string\"><span class=\"content\">my_template</span></span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Let&#39;s go through a quick example. Suppose we have an existing database, <code>food</code>, and it contains an abundant amount of data with the\nfollowing schema:</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n  <td class=\"code\"><pre>foods: name (string), category_id (integer)\ncategories: category (string)\n</pre></td>\n</tr></table>\n</div></div>\n<p>To use the <code>food</code> database for our application, we are going to\ncreate a template by specifying our database with the following command: </p>\n<div class=\"highlight bash \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>createdb -T food my_food_template\n</pre></td>\n</tr></table>\n</div></div>\n<p>We must now set up our Rails application and make sure that our schema matches\nthat of our new template. Our Rails models will mimick <code>food</code>. Having done\nthat, we can now modify our <code>config/database.yml</code>.</p>\n<div class=\"highlight yaml \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n  <td class=\"code\"><pre><span class=\"key\">database</span>: <span class=\"string\"><span class=\"content\">myapp_development</span></span>\n<span class=\"key\">template</span>: <span class=\"string\"><span class=\"content\">my_food_template</span></span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Run migrations and voil\u00e0! Our database has been populated and is ready to be used.</p>\n<div class=\"highlight bash \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n</pre></td>\n  <td class=\"code\"><pre>&gt; psql myapp_development\n\n&gt; select * from foods;\n  id |  name  | category_id\n  --------------------------\n  1   apple       1\n  2   banana      1\n  3   spinach     2\n  4   ice cream   3\n\n&gt; select * from categories;\n  id |  category\n  --------------\n  1   fruit\n  2   vegetable\n  3   other\n</pre></td>\n</tr></table>\n</div></div>","summary":"Discover a helpful Postgres config option","illustration":null,"illustration_alt":null,"tags":["ruby-on-rails","postgresql"],"shallow":false,"date":"2014-03-03T00:00:00Z"},{"id":"2014/03/03/a-simple-ember-data-route","title":"A Simple Ember Data Route","dockyarder":"brian-cardarella","body":"<p>When working with an Ember Data model it is easy to forget to properly\nhandle the teardown of that model. For example, if you are creating a\nnew model and the user hits the backbutton that model is still in the\nlocal <code>store</code>. Or if a user edits a model and decides to click the\n<code>Cancel</code> button or clicks a link that transitions out of this route\nwithout saving the model. A basic approach can be as simple as:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n</pre></td>\n  <td class=\"code\"><pre>Ember.DSModelRoute = Ember.Route.extend({\n  <span class=\"function\">deactivate</span>: <span class=\"keyword\">function</span>() {\n    <span class=\"keyword\">var</span> model = <span class=\"local-variable\">this</span>.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">controller.model</span><span class=\"delimiter\">'</span></span>);\n    model.rollback();\n    <span class=\"keyword\">if</span> (model.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">isNew</span><span class=\"delimiter\">'</span></span>)) {\n      model.deleteRecord();\n    }\n  },\n  <span class=\"key\">actions</span>: {\n    <span class=\"function\">willTransition</span>: <span class=\"keyword\">function</span>(transition) {\n      <span class=\"keyword\">var</span> model = <span class=\"local-variable\">this</span>.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">controller.model</span><span class=\"delimiter\">'</span></span>);\n      <span class=\"keyword\">if</span> (model.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">isDirty</span><span class=\"delimiter\">'</span></span>) &amp;&amp; !confirm(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">You have unsaved changes. They will be lost if you continue!</span><span class=\"delimiter\">'</span></span>)) {\n        transition.abort();\n      }\n    }\n  }\n});\n</pre></td>\n</tr></table>\n</div></div>\n<p>Routes inherited from <code>Ember.DSModelRoute</code> will always clean up after themselves. If the user has unsaved changes and attempts to leave the current route \nthe app will guard against the transition and allow the user to confirm with a notice that changes will be lost.</p>\n","summary":"A basic pattern for routes with Ember Data content","illustration":null,"illustration_alt":null,"tags":["ember"],"shallow":false,"date":"2014-03-03T00:00:00Z"},{"id":"2014/02/07/native-app-developers-we-can-help-you","title":"Native App Developers: We Can Help You","dockyarder":"dan-mcclain","body":"<p>If you have an existing app, and are looking for a server component,\nwhether it be adding a syncing service to your app, building out a web\nversion to extend your user experience, or need a site to showcase your\napp, we have both the design and development resources to make that\nhappen.</p>\n\n<p>You might have realized that iCloud doesn&#39;t fit your needs, or you want\na web application that interacts with your app. We can build your API to\nfit your exact needs, so you don&#39;t need to fight iCloud to fit your\nneeds. You may be looking to build out a new RSS service that needs to\nparse and cache RSS feeds. We have the experience and resources that\nwill help you bring a server heavy component to your app.</p>\n\n<p>You may have users looking to use your application when they aren&#39;t on\ntheir phone. We can design and build a rich web application that brings your\napp to the browser without losing the spirit of your app. You might need\na marketing site with video demos and screenshots of your app. We can\ndesign and build a site that really shows off your application.</p>\n\n<p>If any of these sound like you, you should <a href=\"https://dockyard.com/hire-us\">get in touch with\nus</a>.</p>\n","summary":"Have an existing application? We can help you out!","illustration":null,"illustration_alt":null,"tags":["business-development","mobile","services"],"shallow":false,"date":"2014-02-07T00:00:00Z"},{"id":"2014/02/07/announcing-postgres_ext-postgis","title":"Announcing PostgresExt-PostGIS","dockyarder":"dan-mcclain","body":"<p>Today I released the first version of\n<a href=\"https://github.com/dockyard/postgres_ext-postgis\">postgres_ext-postgis</a>, which\nextends ActiveRecord to support PostGIS data types and some querying.\nThis is definitely a beta release, but ready to the point where people\ncan play around with it.</p>\n\n<h2>Migrations</h2>\n\n<p>With postgres_ext-postgis, you can easily add geometry columns:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre>create_table <span class=\"symbol\">:districts</span> <span class=\"keyword\">do</span> |t|\n  t.geometry <span class=\"symbol\">:district_boundries</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>If you&#39;d like to include your projection or geometry type, just include\nthem as options to your column:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre>create_table <span class=\"symbol\">:districts</span> <span class=\"keyword\">do</span> |t|\n  t.geometry <span class=\"symbol\">:district_boundries</span>, <span class=\"key\">spatial_type</span>: <span class=\"symbol\">:multipolygon</span>, <span class=\"key\">srid</span>: <span class=\"integer\">4326</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<h2>Type Casting</h2>\n\n<p>Your geometry columns will be typecasted into\n<a href=\"http://dazuma.github.io/rgeo/\">RGeo</a> objects. You can set your\nattributes with RGeo objects or EWKT/EWKB strings. EWKT/EWKB strings\nwill be converted to RGeo objects:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>user.location = <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">SRID=4623;POINT(1 1)</span><span class=\"delimiter\">'</span></span>\n</pre></td>\n</tr></table>\n</div></div>\n<h2>Querying</h2>\n\n<p>For now, the only added querying method for ActiveRecord is <code>contains</code>:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre><span class=\"constant\">District</span>.where.contains(<span class=\"key\">district_boundries</span>: user.location)\n</pre></td>\n</tr></table>\n</div></div>\n<p>The above query will utilize PostGIS&#39;s <code>ST_CONTAINS</code> to see if the\n<code>district_boundries</code> column contains the <code>user.location</code>. I plan to add\na convience method to convert EWKT strings to RGeo object, something\nlike <code>PostgreExt.geom(&#39;SRID=4623;POINT(1 1)&#39;)</code>, to make generating\nqueries from, say, a mobile user&#39;s current location a bit easier.</p>\n\n<p>As I get feedback and use postgres_ext-postgis, more features will get\nadded. Stay tuned!</p>\n","summary":"PostgresExt-PostGIS adds PostGIS support to ActiveRecord","illustration":null,"illustration_alt":null,"tags":["ruby","ruby-on-rails","postgresql","postgis","postgres_ext","postgres_ext-postgis"],"shallow":false,"date":"2014-02-07T00:00:00Z"},{"id":"2014/02/04/ember-conf-ember-for-rails-devs","title":"Ember Conf: Ember for Rails Devs","dockyarder":"brian-cardarella","body":"<p><a href=\"http://emberconf.com/\"><img src=\"http://emberconf.com/images/header.png\" alt=\"EmberConf\"></a></p>\n\n<p>We invite you to learn from DockYard for a day before <a href=\"http://emberconf.com\">Ember Conf</a> in Portland, Oregon. We will be offering a one day training session for Ruby on Rails developers interested in\nlearning how to build Ember Applications. Over the course of the day we\nwill teach you the following:</p>\n\n<h4>Introduction to Higher Level JavaScript Concepts</h4>\n\n<ul>\n<li>ES6 Modules</li>\n<li>Promises</li>\n</ul>\n\n<h4>Introduction to Ember Concepts</h4>\n\n<ul>\n<li>Client side MVC</li>\n<li>Ember.Object</li>\n<li>All the stuff under the hood of Router, Routes, Models, Controllers,\nComponents, Templates, and the Runloop</li>\n<li>Ember Data</li>\n</ul>\n\n<h4>Introduction to Ember Appkit Rails</h4>\n\n<ul>\n<li>How to build a new Ember project with Rails</li>\n<li>Generators</li>\n<li>Testing</li>\n</ul>\n\n<p>Together we wil build two applications before the day is over. The first\nwill be a simple CRUD &quot;blog&quot; style application. Time permitting the second will be \na more advanced desktop-quality style applicaiton.</p>\n\n<p><a href=\"http://emberconf.com/\">Seats are limited, be sure to get your ticket before they sell\nout!</a></p>\n\n<h2>About The Instructors</h2>\n\n<h4>Brian Cardarella</h4>\n\n<p>Brian is the CEO of DockYard and has been developing in Ember since late\n2012. He was a <a href=\"https://www.youtube.com/watch?v=wmQovdFoMm0\">speaker at the &quot;first&quot; Ember conference, Ember Camp, in\n      2013</a>.\n      Brian is the author of some popular Ember libraries such as\n<a href=\"https://github.com/dockyard/ember-validations\">ember-validations</a> and <a href=\"https://github.com/dockyard/ember-easyForm\">ember-easyForm</a>. Recently he has been focusing most\nof his open source time on building <a href=\"https://github.com/dockyard/ember-appkit-rails\">Ember Appkit\nRails</a>, which is a\nre-implementation of <a href=\"https://github.com/stefanpenner/ember-app-kit\">Ember App\nKit</a> for the Rails Asset Pipeline.</p>\n\n<h4>Robert Jackson</h4>\n\n<p>Robert is a Sr. Developer at DockYard. He is a member of the Ember Release Management Team and a significant contributor to Ember. He spends much of his free time helping maintain a number of Ember related open-source projects including: <a href=\"https://github.com/emberjs/data\">Ember Data</a>, <a href=\"https://github.com/dockyard/ember-appkit-rails\">Ember Appkit Rails</a>, <a href=\"https://github.com/stefanpenner/ember-app-kit\">Ember App Kit</a>, the <a href=\"https://github.com/stefanpenner/ember-jj-abrams-resolver\">EAK/EAKR resolver</a>, <a href=\"https://github.com/emberjs/ember-rails\">ember-rails</a>, <a href=\"https://github.com/dockyard/ember-easyForm\">ember-easyForm</a>, and <a href=\"https://github.com/dockyard/ember-validations\">ember-validations</a>.</p>\n","summary":"Join our one day training session prior to Ember Conf in Portland, Oregon","illustration":null,"illustration_alt":null,"tags":["ember","ruby-on-rails","ruby","announcement"],"shallow":false,"date":"2014-02-04T00:00:00Z"},{"id":"2014/01/02/romina-vargas-is-a-dockyarder","title":"Romina Vargas is a DockYarder!","dockyarder":"brian-cardarella","body":"<p><img src=\"/images/rvargas.jpg\" alt=\"Romina Vargas\"></p>\n\n<p>Romina was a DockYard intern that we just recently hired to full-time!\nOver the past few months Romina has taken on all of the challenges we&#39;ve\nthrown at her and excelled. Now she&#39;s TDD&#39;ing, Vim&#39;ing, Tmux&#39;ing,\nEmber&#39;ing with the best of them. She&#39;s also the co-author of the\nexciting new Ember application that is all the buzz: <a href=\"http://pizza-time.herokuapp.com\">Pizza\nTime</a></p>\n\n<p><a href=\"https://github.com/rsocci\">Follow Romina on GitHub</a></p>\n","summary":null,"illustration":null,"illustration_alt":null,"tags":["office","announcement"],"shallow":false,"date":"2014-01-02T00:00:00Z"},{"id":"2014/01/02/robert-jackson-is-a-dockyarder","title":"Robert Jackson is a DockYarder","dockyarder":"brian-cardarella","body":"<p><img src=\"/images/rjackson.jpg\" alt=\"Robert Jackson\">\nToday is Robert Jackson&#39;s first day at DockYard. Robert is joining our\nteam as a Sr. Rails and Sr. Ember developer by way of Florida (but he&#39;ll\nsoon be joining us in the Northeast). Robert is a member of the Ember\nRelease Management Team and has been saving my ass with several of our\nopen source Ember projects over the past few months.</p>\n\n<p>Follow Robert on <a href=\"http://twitter.com/rwjblue\">Twitter</a> and\n<a href=\"https://github.com/rwjblue\">GitHub</a></p>\n","summary":null,"illustration":null,"illustration_alt":null,"tags":["office","announcement"],"shallow":false,"date":"2014-01-02T00:00:00Z"},{"id":"2014/01/02/lin-reid-is-a-dockyarder","title":"Lin Reid is a DockYarder!","dockyarder":"brian-cardarella","body":"<p><img src=\"/images/lreid.jpg\" alt=\"Lin Reid\"></p>\n\n<p>Lin comes to us from Alaska. Normally that is all that you need to say\nbut Lin also brought us jerked-bear (actual Alaskan black bear) on his first day with us as an\nintern. From there it was easy street. Lin&#39;s published his own\n<a href=\"https://github.com/dockyard/stashable_params\">gem</a>,\ncontributed back to several of our projects, and has been expanding his\ndeveloper horizons with Ember over the past few months. He is also the\n<em>co-founder</em> of <a href=\"http://pizza-time.herokuapp.com\">Pizza Time</a></p>\n\n<p>Follow Lin on <a href=\"https://twitter.com/linstula\">Twitter</a> and on <a href=\"https://github.com/linstula\">GitHub</a></p>\n","summary":null,"illustration":null,"illustration_alt":null,"tags":["office","announcement"],"shallow":false,"date":"2014-01-02T00:00:00Z"},{"id":"2013/12/22/lessons-learned-two-years-of-running-a-dockyard","title":"Lessons Learned: The First Two Years of Running a Software Consultancy","dockyarder":"brian-cardarella","body":"<p>This is an update of <a href=\"/opinion/2012/06/21/lessons-learned-six-month-of-running-dockyard.html\">the previous post that reflected on the first six\nmonths of DockYard</a>.\nA lot has changed over the past year and a half, and a lot has not. I\nwon&#39;t do a point-by-point comparison to the previous post but I will\naddress some as well as some of the feedback I got at the time. But\nfirst, let&#39;s talk about revenue.</p>\n\n<h2>Revenue</h2>\n\n<p>After our first year we took in about $750,000 in revenue. DockYard\nofficially began in January of 2012  so we had a full calendar year to\nearn. From what I&#39;ve been told this is pretty good for the first year as\na consultancy. In our second year we broke $1,500,000 at the beginning\nof December. I&#39;m happy with that, we doubled revenue. I have set a\nrevenue goal of $2,500,000 for 2014. Assuming there are no major screw ups\nnext year we should exceed that goal.</p>\n\n<p>Revenue is great and all but kind of useless information without our\nprofit margin. We have averaged around 20% profit margin over the past\ntwo years. This year we were averaging in the mid to high 20s before we\nhit a lull at the end of November.</p>\n\n<h3>The Negative Stuff</h3>\n\n<p>Let&#39;s get the negative stuff out of the way first so we can focus on positives\nfor the remainder of the post. We could have done better the previous year, we could have done better\nthis year. We lost money due to decisions that I made throughout the\npast two years. Those choices include two bad clients, a mistake in the\ndirection of our growth, and a lack of experience of running a\nconference.</p>\n\n<h3>Bad Clients</h3>\n\n<p>In the previous post I mentioned how DockYard nearly folded from the\nstart due to a bad client. That nightmare lasted for a year and half and\nwas finally settled in June of this year. It ended up being nearly a\n$50,000 loss for us. I am convinced this is due entirely to poor legal\ncounsel; I cannot stress enough how important it is to have a competent\nlawyer on your side. We didn&#39;t have someone that was willing to fight\nfor us, it cost us big time. We have since retained the law firm of\n<a href=\"http://gesmer.com\">Gesmer Updegrove</a>. They&#39;re pricey, but it&#39;s worth it.</p>\n\n<p>However, before we ever engaged with our current lawyer we unfortunately\nhad another run with a bad client. This time to the tune of $20,000.\nThat hit came this year. What is really strange is that I knew walking\ninto this deal it was going to end badly, and I voiced my concerns\ninternally to my people at the time but I still OK&#39;d the deal and it\nunfolded just as I thought it would. It was a dumb move and we paid the\nprice of it.</p>\n\n<p>One of the plans for DockYard was to quickly grow into the political\ntech space in Washington, DC. I have experience working in political\ntech, I brought on a guy who I worked with at the DNC, and we hired another\nguy I worked with on a political campaign. We started making\nconnections. It didn&#39;t work out. Three reasons:</p>\n\n<h4>Timing</h4>\n\n<p>Timing is everything I guess. Especially in political tech, we set out\non this effort right when the 2012 cycle ended. It was a ghost town, and\nrightly so. There is no reason for campaigns or political groups to\nspend money on development efforts when the next election cycle is two\nyears away. While we spoke with a lot of people that were interested in\nwhat we could do from a technical perspective there simply were very\nlittle groups without any budget at the time.</p>\n\n<h4>The People</h4>\n\n<p>During my time at the DNC I worked with some awesome people. Nathan Woodhull,\nChris Gill, Brent Kimmel, Leo Zhadanovsky, and Nicole Aro to name a few.\nI&#39;ve been lucky enough to work with a few of them since. Unfortunately I\nalso got to work with some really shitty people too. I don&#39;t think its\ntheir fault, the political tech space is a real drag. It doesn&#39;t \nattract a lot of talented people because the money to work on the inside\nis very bad compared with any other job out there. The tone you get is\nthat it is a privilege that you should be thankful for, and perhaps\nthat is the case. But that leaves a vacuum that gets filled with people\nthat frankly don&#39;t know their ass from a hole in the ground. Many of these\npeople are now in charge of making technology decisions in many\norganizations. I have no interest in working with those types of people\nagain, nor do I want to subject my employees to work with them.</p>\n\n<h4>Politics</h4>\n\n<p>I&#39;ve always considered myself &quot;on the Blue team&quot; but the past year has\nreally pissed me off. NSA, Healthcare.gov, drone strikes, and the\nPresident trying everything he can muster to go to war with Syria. I\nwalked into our Business Developer&#39;s office one day and I said enough was\nenough. I could not in good conscience do work for the Democratic Party\nbecause of these issues.</p>\n\n<h3>Just Dumb Wasted Money</h3>\n\n<p><a href=\"http://wickedgoodruby.com\">We ran a conference this year</a> and due to my\nlack of experience running an event like this (and to be honest, being\ntaken advantage of by the venue we held the conference at) we lost $15,000.</p>\n\n<p>There were also downtimes when we didn&#39;t have enough money coming in,\nbut I will get into detail about this later in this post. (and the\nchanges we&#39;ve made to hopefully avoid this in the future)</p>\n\n<p>Overall I am pretty proud with our revenue over the past two years.\nWe didn&#39;t start with an &quot;industry superstar&quot; on our team or with a\nsignificant open source project in our pocket, nor were we on the &quot;inside&quot; of\nthe Boston tech scene. We&#39;ve built a very strong brand for ourselves\nvery quickly.</p>\n\n<h3>Open Source</h3>\n\n<p>This is still a financial loser for us. I don&#39;t care what people say, that&#39;s a\nfact. However, <a href=\"https://twitter.com/peteforde\">Pete Forde</a> commented on\nmy last post and what he said was absolutely true: it will help you hire\ngood people. DockYard has been making a name for itself in the Ruby and\nEmber open source world. We have a good number of projects that people\nare actively using. I encourage all of our developers to contribute back\nto not just our projects but projects we use on a regular basis.</p>\n\n<h3>Personnel</h3>\n\n<p>I&#39;ve made missteps on hirings, that is also costly. I&#39;ll get into this\nlater in the article.</p>\n\n<p>OK, enough with the negative stuff. Let&#39;s get into what we did right.</p>\n\n<h2>Great Clients</h2>\n\n<p>We have had some awesome clients over the past year and a half. I am\npretty much happy with everyone we&#39;ve had with the exception of the two\nclients I mentioned above. We have kept a balance of Startups and\nEnterprise, but we have been very careful about the people we work with.\nThis is how I have boiled it down to the clients we want to work with:</p>\n\n<ol>\n<li><p>Can they afford us? If you think it is callous to put this as the\nfirst thing we look for, then you are probably not someone we want to\nwork with. We are running a business and there are plenty of great ideas\nout there and plenty of great people. But the sad fact is many of them\ncannot afford to build the applications they dream of, at least not\nthrough us. Financially vetting clients is very important. It makes no\nsense to waste our time in contract negotiations with someone that\ncannot afford our services. We try to discover this as soon as possible\nso we don&#39;t waste any of the client&#39;s time either. We try to make the\nbest recommendation on the next steps they can take. We never take\nequity.</p></li>\n<li><p>Is this an application we want to work on? I would make this the 2nd\nNo. 1 if I could. While it is very important to make sure we have\nclients that can pay us so we can pay our employees it is equally\nimportant to make sure we have projects that our employees actually want\nto work on. This is something that I butted heads over with our Business Developer\nearly on. He was not coming from a developer background and at the start\ndid not know what projects were good and which were shit, from an engineering\nperspective. Consultancies are a feeding ground for other companies to\npoach from. We try to retain our employees by paying well and by keeping\nthem on interesting and challenging projects.</p></li>\n<li><p>Is this a project that helps us grow? This is something we\nhave, over the past six months, started to think about when speaking\nwith clients. Is this a project we would be proud to put in our\nportfolio? Is this a project we can write a case-study on? Is this a\nproject that helps us make a sales pitch to an even larger client?</p></li>\n</ol>\n\n<p>If we can stick to these three items when choosing clients I think we&#39;ll\nbe fine. That is not always the case and from time to time we have had\nto sacrifice up the chain. So the first to go is #3, then #2, and\nfinally #1 if we are desperate.</p>\n\n<h2>Our Tech Stack</h2>\n\n<p>While we started out as a Rails shop we have moved very quickly over the\npast year to brand ourselves also as an <a href=\"http://emberjs.com\">Ember</a> shop.</p>\n\n<p>I believe in Ember as a technology, it is superior to any other\nJavaScript framework out there in every way except for the learning\ncurve. I see many developers that I have known in the Boston area hate\non Ember. Good, let them. More for us. We also chose Ember for business\nreasons.</p>\n\n<p>Competing with all of the other Rails shops in Boston is just stupid.\nDown the street we have one of the most well know Rails consultancies in\nthe world (thoughtbot) and within a half a mile we have about 6 others\nlesser-known ones. From an ability perspective we are just as good as\nany of them, but then again that&#39;s the point of Rails. There is no\ntechnological advantage that any one shop has over another nowadays. We\nall pretty much do the same &quot;best practices&quot; and use nearly the same tech\nstack. There is nothing that distinguishes one shop from another. So we\nhave diversified our offerings.</p>\n\n<p>I chose Ember as a technology direction because it was, and still is,\nincredibly undervalued in the market. If I was playing a short game in\nour business I would invest in Angular, it is the tech-du-jour but a\nyear from now I seriously doubt that will be the case. While everyone\nelse is wasting their time specializing in Angular we&#39;re building an\nincredibly strong presence in the Ember world. When the scale tips we&#39;re\ngoing to be in a great position. At least that&#39;s the theory. Time will\ntell, maybe the next time I write on of these I&#39;ll be bitching about how\nwrong I was. We&#39;ll see.</p>\n\n<h2>Hiring</h2>\n\n<p>For the most part I&#39;ve been very lucky with the team I&#39;ve hired.\nRecently we just had our holiday party and I thought on my way to the\ndinner that this is the team I&#39;ve always wanted. I can&#39;t imagine that is\na very common thing for people to think. And that&#39;s not to say we\nhaven&#39;t had missteps.</p>\n\n<h3>Finding The Right People</h3>\n\n<p>For us I hire for cultural fit. We have a good mix of senior and junior\ntalent. If we hire a junior developer I only hire people that show an\nability to learn fast. I really dislike white-board interviews so the\nface-to-face interview is for me to get a sense of their personality.\nThen I will ask some general knowledge questions to get a sense of where\nthey are at skill-wise. I will then send the candidate away for a week\nand give them a project to create. I try to pick criteria that puts them\noutside of their comfort zone. Have they done TDD before, have they done\nEmber? I will ask them to challenge themselves and I will ask for access\nto the GitHub repository. One indicator I use is how soon did the\ncandidate start this project? If it was started right away that shows an\neagerness to complete the work. Was is started and finished the night\nbefore? This might show a tendency to procrastinate and get things in at\nthe last minute. While these may be outside factors I do ask about them\nif they are extreme during the follow-up interview.</p>\n\n<p>Recently we have been able to build enough of a name for ourselves in\nthe development community where we have started to attract some good\nsenior development talent. We are putting a pause on hiring junior\ndevelopers and will likely focus on more senior developers for the next\nyear.</p>\n\n<h3>Firing People</h3>\n\n<p>I&#39;ve gotten permission to talk about this from Russ. Russ was a\nco-founder of DockYard and I fired him. It was around the time of the\nfirst post but I didn&#39;t want to reflect on it yet. In retrospect it was a\nlong-term mistake but perhaps the correct short-term decision. We were\nnot at the size when I was really thinking too long-term. I was not\ngetting from him what I needed and it was weighing me down mentally, but\nthis was my fault. I was not communicating to Russ properly what my\nexpectations were. Thankfully we&#39;re still friends and grab drinks every\nnow and then. If the roles were reversed I don&#39;t think I would be as\nmagnanimous.</p>\n\n<p>I&#39;ve since fired two others. One was my fault, the other was not. It is\na strange thing to fire someone. People try to make it nice by saying\n&quot;let them go&quot;, but in reality you&#39;ve shit-canned them. When you are\nemploying someone, especially at a small company, you feel a sense of\nresponsibility for them. You are paying them money and provide them with\nhealth care they use to take care of their family. I wish we could\nmagically double the salaries of all of our employees but of course we\ncannot afford that. When it came time to firing someone it weighed on me\nand I considered the implications. I never did it lightly, but\nconsidering the alternative, each firing has turned out to be the correct move.\nEven with Russ, he&#39;s done much better without DockYard than he was doing\nwith DockYard. Sometimes its not a good fit, I am guilty of letting\nthings sit too long. I have learned to be quicker about acting upon\nthis.</p>\n\n<h3>Losing People</h3>\n\n<p>We have so far lost just one employee, one of our DC partners Chris\nGill. He got a job with the Department of Revenue that paid well beyond\nwhat we could afford. I was actually pretty proud of him that he landed\nit. I have left enough jobs in my career to know that I never want to be angry\nat someone that has decided to leave DockYard. If it is time to go, it\nis time to go. Considering the number of junior developers we have been training\nup I would like to think of it as an accomplishment of ours to see\npeople &quot;graduate&quot; from DockYard and go on to do great things in the\nindustry. (but don&#39;t leave us too quick!)</p>\n\n<h2>Business Development</h2>\n\n<p>In the summer of 2012 I was overwhelmed. I was Lead Developer, Business\nDeveloper, Office Manager, and Everything Else* at DockYard. The most\nimportant job I had was making sure new business was coming in. But\nfocusing on that was having a negative impact on the client projects I\nwas on as well as training any developers we had that required it. I\nstarted a search for a Business Developer. At first I hatched a plan to\nleverage the recruiters of Boston. It made sense: they already were\ntalking to companies but it was difficult for those companies to hire.\nWhy not just partner with DockYard and rent our services to those\ncompanies? At 8% the math actually worked out in their favor, however none of\nthem bit. I&#39;m still struggling with this one and I think it speaks to\nthe state of recruitment. It was a good business opportunity but they\ncould not think outside the box.</p>\n\n<p>So it was time to find someone for that position. I had never made a\nnon-technical hire before. I had no idea how to do that. I looked\nspecifically for &quot;Business Developers&quot; but that was a bust. I gave up\nfor a month or two then I realized that it was essentially a Sales\nposition. So I put an ad out for a someone in sales looking to take on a\nlarger role, a key role for the growth of a young company. I got about\n50 resumes and brought in two people for interview. I liked them both\nand settled on the one with the better references. It was a great\ndecision. Our Business Developer Dan Crowther has been huge for us. We butt\nheads on a few things; he&#39;s right sometimes and I&#39;m right sometimes. But\nthe fact is we would not be where we are today without him.</p>\n\n<p>It took him about six months to really get comfortable with the\nposition, this is very common from what I&#39;ve been told of those\ntransitioning into this position. He&#39;s helped us open up business we\nwouldn&#39;t have known about otherwise. And most important I can focus on\nother things.</p>\n\n<p>We sell DockYard on the quality of our work. While we started as a\ntechnology company, design has become a large part of who DockYard is and\nhas gone a long way to help sell our brand.</p>\n\n<h2>Design</h2>\n\n<p>Since our first &quot;real&quot; contract with <a href=\"http://openbay.com\">Openbay</a> we\nworked with an outside designer, Steven Trevathan. He was recommended to\nme by two separate people. Steve along with his partner Logan Faerber\nwere starting their own consultancy Dobot. Steve and I got along \nwell and I brought them back for a few more contracts. We bonded over\nour mutual disdain for many of the people in the <a href=\"http://www.cambridgecoworking.com/aboutc3.html\">C3 space at\nCIC</a> and so when we\nfinally got our own office last year I invited Steven and Logan to work\nfrom there. We even brought them along to check out the office spaces\nwe were interested in. This past Spring it became obvious that we needed\nsomeone full-time at DockYard to take ownership of our design. Likewise\nDobot was also looking for a lead engineer. It would be funny if it\nwasn&#39;t so stupid that we were literally sharing the same office, worked\ntogether on several projects, and were still looking for one another. Steve and I\ngrabbed drinks and I laid it out: let&#39;s do this. He agreed and we\nbrought Steve on as our Creative Director and a partner. Logan came on as a lead illustrator. It\nis the best move we&#39;ve made to date. Steve and Logan quickly took\nownership of the design direction of DockYard and have along with Amanda\nand Angelo put out a <a href=\"https://dockyard.com\">website that really represents who we\nare</a> and have also put together some amazing\ndesigns for our clients.</p>\n\n<p>While earlier I mentioned how it was very difficult to differentiate\nourselves from other Rails shops, the one place we can totally do that\nis with design. Ultimately design sells much better than engineering.\nThe engineering part of our contracts bring in more money, so we have to\nmake certain that the design contracts we pick up will convert to\nengineering contracts. We look at design as the best Lead Generator we\ncould get. It has worked, very well.</p>\n\n<h2>Office Manager</h2>\n\n<p>This is one that I was told multiple times that I should do sooner than\nlater. I am very bad with context switching, I have to either do all\nbusiness stuff one day or all of the engineering. I cannot do both effectively.\nAfter hiring Crowther I knew the next non-technical hire I wanted was an\noffice manager. What I did might be considered overboard.</p>\n\n<p>I put an ad on Craigslist. We got over 200 responses. I brought the list\ndown to around 100 and sent out invites and asked people to schedule\nthemselves for an interview through\n<a href=\"https://gb.youcanbook.me/\">YouCanBook.me</a> I blocked out over two weeks\nof time, and broke the interviews into 20 minute blocks. Over 60\ninterviews were scheduled. I ended up meeting with about 40 of people.\nIt was one of the crazier things I&#39;ve done but this was a position I had\nno idea how to hire and the only way I could figure to find the right\nperson was to see a ton of candidates and waited to see what stuck. The\nperson we hired was the 2nd person to walk through the door, Mariel\nEbrahimi. We got real lucky, and I think I even came out of that\ninterview and told everyone that we were probably going to hire her.\nHowever, considering she was only the 2nd candidate I still went through\nthe next two weeks of interviews. It became obvious that she was well\nbeyond anybody else coming in and over the past few months she has kept\nDockYard running smoothly. Being able to let go of these small things in\nthe office is incredibly freeing and has allowed me to focus on the\nbigger picture.</p>\n\n<p>I have been toying with the idea of hiring a Project Manager in Boston.\nWe did that before in Washington, DC but we were in a very different position that\nwe are now and I think the position only works for us, at our size, in\nBoston. I am currently running PM on most projects, at least to a\ncertain degree. I allocate resources, and assign roles. Developers at\nDockYard look to me for what they should be doing next. It&#39;s time\nconsuming and only gets worse as we grow. We&#39;ll see what happens in the\nnext few months.</p>\n\n<h2>Building Our Own Products</h2>\n\n<p>We&#39;ve tried it once and we failed. That simple. We failed for several\nreasons:</p>\n\n<ol>\n<li><p>We could not work on the product consistently. This killed us. We\nwere putting in days here and there in between client work. I was\nputting in hours on the weekend and this was burning me out for the rest\nof the week.</p></li>\n<li><p>It was not an idea that was very good beyond concept. We built out a\nmarketplace for Heroku called\n<a href=\"https://github.com/dockyard/igata\">Igata</a> It would allow developers to\nsell pre-baked applications for deployment on Heroku. I liked the\nchallenge of building the initial technology. But when I began to think\nabout the long term implications of maintaining a marketplace\napplication I lost all interest.</p></li>\n<li><p>Heroku was too much of an obstacle. I actually went out to Heroku and\nmet with some of their people to pitch them on the idea. They liked\nit but it became clear that if we really wanted to make money we should\njust make our own Heroku and not lose the money on hosting. Then it was\nan easy mental jump to &quot;let&#39;s forget about this marketplace and just\ncompete with Heroku&quot; which of course is a dumb idea.</p></li>\n</ol>\n\n<p>So we bailed on the application and open sourced it. We are going to\nattempt another product built, this time we are going to save up a\nfinancial war chest so we can dedicate the proper amount of time to the project.\nI don&#39;t mind losing money on projects like this. They are fun to build\nand I think we come out the other end as a better shop once we dog food\nour own process.</p>\n\n<h2>Getting Our First Office</h2>\n\n<p>I was pretty annoyed with all of the entrepreneurial bullshit that was\ngoing on in the CIC in Cambridge. It is a terrible working environment,\nespecially if you are a consultancy. You get bugged all the time by the\nworst people. The space is <strong>incredibly</strong> loud. If you go there to work\non the weekends it&#39;s fantastic. But it became obvious very quickly that\nwe needed our own office. We worked with <a href=\"https://twitter.com/jfrisch21\">Jon\nFrisch</a> at <a href=\"http://www.t3advisors.com/\">T3\nAdvisors</a>. We were growing and we need\nspace to grow <em>into</em>. We decided upon a 2,200 square foot 2nd floor space\nin Downtown Crossing. I always wanted an office there because of how\ncentrally located it was. Thankfully, Downtown Crossing ends up being\nmuch cheaper real-estate than many of the other places around Boston \n(although this is already changing).</p>\n\n<p>We had some difficulty moving in. We were supposed to start the build-out\nin July of 2012. I was getting married in late August. The owner kept\ndeflecting us, and deflecting. I went on my honeymoon and when I got\nback I asked him what the deal was. He said, &quot;OK, it&#39;s no longer an\nactive crime scene so I can tell you what happened.&quot;</p>\n\n<p>It turns out that our office is a floor above a jewelery store. The\nfloor in our office is concrete. Two guys broke down a side door to the\nvacant space, brought some mini-jackhammers and drilled a man-size hole\ninto the store below. They then repelled down with ropes and started to\nclean the place out. There were some silent alarms that were set off and\nthey got busted. Exactly why it took them 2 months to clear the place to\nallow us to build I don&#39;t know. But considering how crazy the story is I\nwas OK with it.</p>\n\n<p>Anyway, we finally got into the space in October of 2012. Thankfully no\nmore jewelery heists have happened. We host a lot of community events at\nour office and I&#39;m really happy with that. Currently we organize <a href=\"http://www.meetup.com/Boston-Ember-js/\">Boston\nEmber</a>, <a href=\"http://openhack.github.io/boston/\">Boston OpenHack</a>, <a href=\"http://www.meetup.com/uxboston/\">UX Boston</a>, run classes for <a href=\"http://www.girldevelopit.com/chapters/boston\">Girl Develop It Boston</a>, and\nhost <a href=\"http://www.meetup.com/Boston-PostgreSQL-Users-Group-BPUG/\">Boston\nPostgres</a>.</p>\n\n<h2>Starting Over</h2>\n\n<p>If I had to start DockYard from scratch today I would do it differently.\nThe number one thing I would do different is not agree to a partnership\nuntil 6 months out. I would have awarded co-founder status to those\nthat started, but I would have held off on awarding partnerships\nuntil everyone settled into their roles. I think when you first get going you don&#39;t really\nunderstand what those roles are. Assigning roles on day zero\nand expecting everyone to just stick to these roles is not realistic if\nthis is everyone&#39;s first rodeo. Trial by fire is the best way to define\nthe roles. Once that is done then the partnership can be established.\nPerhaps someone that previously thought being partner was a good idea\nwas not actually interested in the added responsibility? Perhaps someone\nyou didn&#39;t think was &quot;partner material&quot; ends up being one of your key\npeople and that should be rewarded.</p>\n\n<p>I would also hire a little more slowly than we did at first. I have not\nyet been able to pay myself what I&#39;ve set my salary to. The first year I\npaid myself 25% of that salary. This year I&#39;ve hit my goal of paying\nmyself 50%. Next year I hope to hit 100% of that goal. Thankfully I&#39;ve\ngot a wife that makes a good living and we&#39;ve been able to lean on that\nwhen I&#39;ve needed to take myself off of payroll. If our situation were\ndifferent I am not confident that DockYard would be around today, at\nleast not in its currently form. I&#39;ve been able to take risks that\nothers might not be able to.</p>\n\n<h2>Conclusion</h2>\n\n<p>Any success we have had is due in part to not just the great team we\nhave but honestly sometimes just luck. There have been several times in\nthe past two years where I have not been able to sleep due to the stress\nof thinking how we were going to make the next few payrolls. Every time\nwe got lucky, someone came along at the right moment and bailed us out.\nI would like to think we are out of those woods, we&#39;ll see.</p>\n\n<p>One way I have changed how DockYard operates is moving away from always\nnew clients to retaining clients. I had lunch with <a href=\"https://www.assembla.com/spaces/andy/wiki\">Andy\nSingleton</a> and he stressed\nand convinced me that we were throwing away money by always looking\nfor new clients. The really successful consultancies had several large\ncontracts that would span multiple years. It was obvious but I had not\nseen it until it was spelled out for me. So we are going to look to\nretain and provide ongoing services for our existing clients. If\nsomeone is reading this and looking to get started that was probably\none of our biggest mistakes over the past two years; find a client that\nyou might even need to take a financial hit on but is always there to\nhelp you keep the lights on. Looking back it seem crazy that we were\nable to not just survive but thrive given out direction of always\nlooking for greenfield projects.</p>\n\n<p>In the next few years I don&#39;t want to see the same rate of growth we&#39;ve\npreviously had. I&#39;ve said several times to my team I don&#39;t want to grow\nto more than 20. Any more than that and we&#39;ll have to consider some\nserious restructuring of the company. I also feel at that number the\nsmall team we have starts to feel more like a &quot;real company&quot;. We just\nrecently made an offer to a new member of our team that will be joining\nin January. I have not met her yet and that is strange to me, but is\nalso an indicator that we have grown to that point that these things\nwill happen.</p>\n\n<p>I look forward to hearing the feedback from this article. I&#39;m sure there\nwill be people that disagree with some of the things I&#39;ve said and the\ndecisions we&#39;ve made.</p>\n","summary":"Brian talks about what has worked, what has not worked, and the changes that have been made at DockYard during its first two years","illustration":null,"illustration_alt":null,"tags":["opinion","business","consulting"],"shallow":false,"date":"2013-12-22T00:00:00Z"},{"id":"2013/12/19/ember-enum-property-cycler","title":"Simple Property Enum Cycling in Ember","dockyarder":"brian-cardarella","body":"<p>This is a quick one. I needed to cycle between the values in a set.\nToggling between <code>true</code> and <code>false</code> in Ember is easy enough with the\n<code>toggleProperty</code> function but I had several properties I wanted to cycle\nbetween. So last night I wrote a simple function poorly named:\n<code>cycleEnumProperty</code>. You pass it the property you want to act upon and\nthe enum set to cycle. If the property is currently empty or if the\nproperty matches the last value in the set the property will be set to\nthe first value, otherwise the property will be set to the next value.\nTry it out:</p>\n\n<p><a class=\"jsbin-embed\"\nhref=\"http://emberjs.jsbin.com/agaKuCoL/1/embed?js,output\">Ember\nStarter Kit</a><script\nsrc=\"http://static.jsbin.com/js/embed.js\"></script></p>\n","summary":"A quick demo of cycling between a set of values","illustration":null,"illustration_alt":null,"tags":["ember"],"shallow":false,"date":"2013-12-19T00:00:00Z"},{"id":"2013/12/18/be-a-blunt-axe","title":"Be A Blunt Axe","dockyarder":"logan-faerber","body":"<h2>Be A Blunt Axe</h2>\n\n<p>Something that was taught to us early on in College was how to make a &quot;compliment sandwich.&quot; I\u2019m sure many of you have heard this term before, but for those of you who haven\u2019t, it&#39;s a communication tool that can keep yourself humble when confronted with the daunting task of giving others critical feedback on their work. </p>\n\n<p>The idea is that you as the critic would point out a positive aspect about their work or concept, the top layer of bread if you will. Then you\u2019d follow this by mentioning something they could improve upon, which is the meaty and true substance of the discussion. At the end you\u2019d conclude by providing another positive aspect, a la the last bit of bread. The reason we had to come up with this step-by-step process when approaching a critique environment was to avoid hurting anyone\u2019s feelings. Rather than declaring an idea as stupid or bad, which honestly helps to accomplish nothing aside from increase the size of a critic\u2019s ego, we had now formulated a way of give important and in-depth feedback that would actually help to improve an idea by simply being kind and genuinely interested in helping. Keeping to this method, people were much more adept to make the suggested improvements rather than declare themselves a failure, giving up before they\u2019ve even begun to start. </p>\n\n<p>It&#39;s important to remember that your feedback can and should be honest and frequent, but kindness prevails over being an asshole (every time). By being empathetic to the person receiving the critique, you get a better sense of what&#39;ll help them improve, rather than just tearing them down. With this, your critiques become genuine and no longer appear as a means to stroke an inflated ego. Without this, the whole world would be filled with broken hearts and ego-powered douche-bags. As they say, &quot;an eye for an eye makes the whole world blind&quot;. Let&#39;s keep our eyes and hearts intact.</p>\n","summary":"Giving good feedback without being too aggressive.","illustration":null,"illustration_alt":null,"tags":["illustration","art","design"],"shallow":false,"date":"2013-12-18T00:00:00Z"},{"id":"2013/12/08/introducing-easydir-vim","title":"Introducing easydir.vim","dockyarder":"doug-yun","body":"<p>One of the things that I wish Vim had by default is the ability to create\ndirectories and files at the same time. Last month at our local\n<a href=\"http://openhack.github.io/\">OpenHack meetup</a>, I had a conversation about\nit with a fellow developer and we both concluded that it wouldn&#39;t be too\ndifficult to write something up.</p>\n\n<p>Well, I&#39;m happy to introduce <a href=\"https://github.com/dockyard/vim-easydir\">easydir.vim</a>!</p>\n\n<p>It adds to the functionality of <code>:new</code>, <code>:edit</code>, <code>:write</code>, and more.</p>\n\n<p>Here are some quick examples:</p>\n\n<ul>\n<li>Edit a new file inside of a previously nonexistent directory.</li>\n</ul>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n  <td class=\"code\"><pre>:e new_directory/new_file.txt\n\n# Write some things to &quot;new_file.txt&quot; and save it.\n\n:w\n\n# The directory &quot;new_directory/&quot; and the file &quot;new_file.txt&quot;\n# are saved!\n</pre></td>\n</tr></table>\n</div></div>\n<ul>\n<li>Open the new directory and file into a split window.</li>\n</ul>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n  <td class=\"code\"><pre>:sp another_directory/another_file.txt\n\n# Write to &quot;another_file.txt&quot; and save the file.\n\n:w\n\n# another_directory/another_file.txt is saved!\n</pre></td>\n</tr></table>\n</div></div>\n<ul>\n<li>Super nested directories</li>\n</ul>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n  <td class=\"code\"><pre>:n thank/you/sir/may/i/have/another.txt\n\n# Write some things to &quot;another.txt&quot; and save it.\n\n:w\n</pre></td>\n</tr></table>\n</div></div>\n<p>The directories and files will be saved under your current project&#39;s directory.</p>\n\n<p>Thanks for checking it out and enjoy!</p>\n","summary":"A Vim plugin that allows you create directories and files at the same time!","illustration":null,"illustration_alt":null,"tags":["vim","workflow"],"shallow":false,"date":"2013-12-08T00:00:00Z"},{"id":"2013/12/06/always-be-exploring","title":"Never Stop Exploring","dockyarder":"logan-faerber","body":"<h2>Never Stop Exploring</h2>\n\n<p>Over the years, many artists seem to have fallen into a creative rut within their chosen career path. Some may have found a comfortable day job that sufficiently pays the bills. Others simply retired early, claiming to have burnt out creatively, and chose to throw in the artistic towel for a simpler lifestyle, one far less plagued by self doubt and critical objections, I\u2019m sure. Whatever the reason is, we as a society are more often selecting to pursue comfort over curiosity and I believe it\u2019s hurting the progression of our personal artistic expression in both our culture and as individuals.</p>\n\n<p>By choosing to accept what\u2019s handed to you by media, you\u2019re merely absorbing other\u2019s ideas or predefined popular interests that have become media friendly rather than participating as part of the cultural influence. This accounts for many of the current trends that appear in graphic design, illustration, web design, music, and movies these days. How else would you have ended up with Independence Day, Mars Attacks, and Men in Black hitting the top box office charts all within the same year? You couldn\u2019t. Aliens and end of the world scenarios were accepted as hot topics at the time, but are any of them truly remembered as works of art? I would argue the answer to be, \u201cNo\u201d. What makes something a genuine work of art is the passion with which it is made. A fresh and deeply personal idea that attempts to either break the rules of the medium or painstakingly craft them to best suit your particular need. </p>\n\n<p>For example, as soon as iOS7 was shown to the public, a majority of the design community\u2019s reaction was negative. But as soon as this same operating system was made public and write-ups began appearing online from major figureheads in the industry, people\u2019s views started to change, as did their designs. The same people who appeared to be so opposed to this recent announcement were beginning to cater their latest designs to having an extremely minimal feel, embracing extra thin typefaces and overly saturated primary colors. While I for one have definitely come to appreciate specific things about the iOS7 operating system, there are definitely things about it\u2019s design that are not necessarily applicable to other interface scenarios. In short, just because a big company is successful with their design doesn\u2019t mean it\u2019s the right fit for your project. No one\u2019s remembered for who they\u2019ve copied. They\u2019re remembered for what innovations they\u2019ve made or new ideas they\u2019ve brought to the table. </p>\n\n<p>Whether this trend is a culturally specific problem or something that has plagued mankind for years, I\u2019m unsure. What I am sure of though is that I for one don\u2019t ever want to find myself in this predetermined rut. I think everyone has great ideas, and it\u2019s important for them to take the time to properly express them. It\u2019s a matter of finding the motivation in yourself to make it happen and take the risk of making it public. As the great Bill Nye said, \u201cEveryone you will ever meet knows something you don&#39;t\u201d.</p>\n\n<p>I for one keep a persistent list of ideas that I want to explore, both in a physical journal and on <a href=\"https://www.wunderlist.com/en/\">Wunderlist</a>, just so that no matter how random the idea may seem, I can at the very least document it to be reviewed at a later date. When I do have down time between projects, I never have to search too hard for a new one to get started. For instance, my current side project is to keep an ongoing list of fictional band names that my friends and I have collected over the years and make actual merchandise out of them as if they were real bands. I treat these projects like tiny experiments and allow myself to try new things, technically and mentally. That way, when I do return to my other projects, they never feel stale. I\u2019m once again excited to work on them and have a new set of skills or ideas to help make them even better. </p>\n\n<p>This is why I think it\u2019s important that no matter what you do, whether it\u2019s a full time design job, freelance illustration, or something far removed from the art profession you had originally pursued, to always keep your mind fresh with new ideas. Explore all possibilities and try new things whenever you can. The more you create, the more apt you are to legitimately think outside the box, rather than work within it\u2019s constraints. And that, my friends is how you will be remembered, for being true to yourself and creating genuine, passionate work.</p>\n","summary":"Being true to yourself and creating passionate work.","illustration":null,"illustration_alt":null,"tags":["illustration","art","design"],"shallow":false,"date":"2013-12-06T00:00:00Z"},{"id":"2013/11/27/vim-windows","title":"Buffers, Windows, Tabs... Oh My! Part 2: Vim Windows","dockyarder":"doug-yun","body":"<p>In the second part of this series, we&#39;ll be covering Vim windows. Windows are simply\nthe <strong>viewports</strong> into <a href=\"http://reefpoints.dockyard.com/2013/10/22/vim-buffers.html\">buffers</a>\nand I&#39;m 110% sure that they are a huge part of your daily workflow.</p>\n\n<p>Yes, there are numerous plugins that make our lives a lot easier, but let&#39;s\ndive into a powerful defaults that Vim offers us.</p>\n\n<p>We&#39;ll first cover the basics, and then learn some neat window management commands.</p>\n\n<h2>Starting a Vim Session</h2>\n\n<h3>One File</h3>\n\n<p>Vim windows are not complicated to use; if you want to open a file, <code>file_one.txt</code>, simply:</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>$ vim file_one.txt\n</pre></td>\n</tr></table>\n</div></div>\n<h3>Multiple Files</h3>\n\n<p>If you want to open multiple files, <code>file_one.txt</code>, <code>file_two.txt</code>, and <code>file_three.txt</code>, you can\ndo the following:</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>$ vim file_one.txt file_two.txt file_three.txt\n</pre></td>\n</tr></table>\n</div></div>\n<p>This opens the first file, <code>file_one.txt</code>, into a window.\nFiles <code>file_two.txt</code> and <code>file_three.txt</code> are opened as inactive buffers.</p>\n\n<h3>Multiple Horizontal Splits</h3>\n\n<p>Say you want to view multiple files at once. Good news! You can\nopen all files and place them into <strong>horizontal splits</strong>.</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>$ vim -o file_one.txt file_two.txt file_three.txt\n</pre></td>\n</tr></table>\n</div></div>\n<h3>Multiple Vertical Splits</h3>\n\n<p>Don&#39;t like horizontal splits? Better news! You can open them all as <strong>vertical splits</strong>.</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>$ vim -O file_one.txt file_two.txt file_three.txt\n</pre></td>\n</tr></table>\n</div></div>\n<h2>Within a Vim Session</h2>\n\n<p>There are two main arrangements for splitting windows, vertical and horizontal. Let&#39;s say\nwe&#39;re editing a file and want to open up another file. We can do the following:</p>\n\n<h3>Horizontal Splits</h3>\n\n<p>This will open <code>another_file.txt</code> as <strong>horizontal split</strong>.</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>:split another_file.txt\n</pre></td>\n</tr></table>\n</div></div>\n<p>You can use this abbreviation:</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>:sp another_file.txt\n</pre></td>\n</tr></table>\n</div></div>\n<p>In addition, you can specify how large the new split will be by passing\nin a numerical value. This value will represent the line numbers shown within the\nsplit.</p>\n\n<p>For example, this will reveal 25 lines of <code>another_file.txt</code>.</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>:25sp another_file.txt\n</pre></td>\n</tr></table>\n</div></div>\n<p>Lastly, you can open a <strong>split</strong> window with <code>CTRL-W s</code>.</p>\n\n<h3>Vertical Splits</h3>\n\n<p>You can open files as <strong>vertical splits</strong> as well.</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>:vsplit another_file.txt\n</pre></td>\n</tr></table>\n</div></div>\n<p>Which is abbreviated as:</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>:vsp another_file.txt\n</pre></td>\n</tr></table>\n</div></div>\n<p><strong>Vertical splits</strong> can also take in a numerical value, which corresponds to the\ncharacter width of the column.</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>:30vsp another_file.txt\n</pre></td>\n</tr></table>\n</div></div>\n<p>Finally, you can open a <strong>vertical split</strong> with <code>CTRL-W v</code>.</p>\n\n<h3>New Files</h3>\n\n<p>Let&#39;s create a new file.</p>\n\n<p>Use, <code>:new</code> to create a new file inside the current window.\nAfter you save the file, it will be created within your current directory.\nYou can also use the abbreviation <code>:n</code>.</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>:n new_file.txt\n</pre></td>\n</tr></table>\n</div></div>\n<p>If we specify the path, we can also create files inside existing directories.</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>:n ../existing_dir/new_file.txt\n</pre></td>\n</tr></table>\n</div></div>\n<p>Use <code>:vnew</code> or <code>:vne</code> to create a new file inside a new <strong>vertical split</strong>.</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>:vne new_file.txt\n</pre></td>\n</tr></table>\n</div></div>\n<p>Lastly, we can use <code>CTRL-w n</code> to create a new file inside a <strong>horizontal split</strong>.\nNote that we have not specified a file name. Upon saving the file with <code>:w</code>, we\ncan give the file a name. Such that:</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre># CTRL-w n\n\n:w this_is_a_new_file.txt\n</pre></td>\n</tr></table>\n</div></div>\n<h3>Switching Windows</h3>\n\n<p>Switching windows ain&#39;t hard either!</p>\n\n<ul>\n<li><code>CTRL-w h</code> = Switch to the window to the left</li>\n<li><code>CTRL-w j</code> = Switch to the window below</li>\n<li><code>CTRL-w k</code> = Switch to the window above</li>\n<li><code>CTRL-w l</code> = Switch to the window to the right</li>\n</ul>\n\n<h3>Moving Windows</h3>\n\n<p>I&#39;ve realized that window placement is incredibly useful\nwhen pairing with another person. Here&#39;s are a some ways to adjust\nthe windows.</p>\n\n<ul>\n<li><code>CTRL-w T</code> = Move current window to a new tab</li>\n<li><code>CTRL-w r</code> = <em>Rotates</em> the windows from left to right - only if the windows\nare split vertically</li>\n<li><code>CTRL-w R</code> = <em>Rotates</em> the windows from right to left - only if the windows\nare split vertically</li>\n<li><code>CTRL-w H</code> = Move current window the far left and use the full height of the screen</li>\n<li><code>CTRL-w J</code> = Move current window the far bottom and use the full width of the screen</li>\n<li><code>CTRL-w K</code> = Move current window the far top and full width of the screen</li>\n<li><code>CTRL-w L</code> = Move current window the far right and full height of the screen</li>\n</ul>\n\n<h3>Resizing Windows</h3>\n\n<p>Sometimes windows open up funny or are rendered incorrectly after separating from\nan external monitor. Or maybe you want to make more room for an important file.</p>\n\n<p>We can easily solve those problems with the following:</p>\n\n<ul>\n<li><code>CTRL-w =</code> = Resize the windows <em>equally</em></li>\n<li><code>CTRL-w &gt;</code> = Incrementally increase the window to the right\n\n<ul>\n<li>Takes a parameter, e.g. <code>CTRL-w 20 &gt;</code></li>\n</ul></li>\n<li><code>CTRL-w &lt;</code> = Incrementally increase the window to the left\n\n<ul>\n<li>Takes a parameter, e.g. <code>CTRL-w 20 &lt;</code></li>\n</ul></li>\n<li><code>CTRL-w -</code> = Incrementally decrease the window&#39;s height\n\n<ul>\n<li>Takes a parameter, e.g. <code>CTRL-w 10 -</code></li>\n</ul></li>\n<li><code>CTRL-w +</code> = Incrementally increase the window&#39;s height\n\n<ul>\n<li>Takes a parameter, e.g. <code>CTRL-w 10 +</code></li>\n</ul></li>\n</ul>\n\n<h2>Wrapping Up</h2>\n\n<p>That was a lot to cover, but I do believe incorporating these commands into\nyour workflow will prove pretty helpful. Thanks for reading!</p>\n","summary":"A painless tutorial on Vim windows","illustration":null,"illustration_alt":null,"tags":["vim","workflow"],"shallow":false,"date":"2013-11-27T00:00:00Z"},{"id":"2013/11/15/think","title":"Think","dockyarder":"dan-mcclain","body":"<p>Ever since <a href=\"http://wickedgoodruby.com/2013/speakers/matt_aimonetti\">Matt Aimonetti&#39;s talk at\nWicked Good Ruby</a>\non there being such thing as bad code, I&#39;ve felt I&#39;ve\nneeded to write a blog post about the <a href=\"https://en.wikipedia.org/wiki/Cargo_cult\">cargo\nculting</a> that happens in\nthe development world.</p>\n\n<h2>Sandi Metz&#39;s Rules</h2>\n\n<p>Back in January, <a href=\"http://rubyrogues.com/087-rr-book-clubpractical-object-oriented-design-in-ruby-with-sandi-metz/\">Sandi Metz was on Ruby\nRogues</a>\nto discuss her book, <strong><a href=\"http://www.amazon.com/Practical-Object-Oriented-Design-Ruby-Addison-Wesley/dp/0321721330/\">Practical Object-Oriented Design in Ruby</a></strong>.\nOut of this conversation came &quot;<a href=\"https://gist.github.com/henrik/4509394\">Sandi Metz&#39;s\nrules</a>&quot;. Many\nin the Ruby community took these rules as gospel, without knowing the\ncontext in which these rules were created.</p>\n\n<p>The rules, for those unfamilar:</p>\n\n<ol>\n<li>Your class can be no longer than 100 lines of code</li>\n<li>Your methods can be no longer than five lines of code</li>\n<li>You can pass no more than four parameters and you can&#39;t just make it one big hash</li>\n<li>When a call comes into your Rails controller, you can only instantiate one object to do whatever it is that needs to be done</li>\n</ol>\n\n<p>Sandi joined Matt during his talk at Wicked Good Ruby and <a href=\"http://www.youtube.com/watch?feature=player_embedded&amp;v=VO-NvnZfMA4#t=1380\">gave some background to the\nstory of her rules</a>.\nTo paraphase Sandi, at the time she was working with a group that had multi-thousand line controllers with\nmulti-hundred line methods. These controllers and methods represented\none end of a spectrum, which made code incredibly hard to read and maintain.\nThey were begging Sandi for guidelines with which they could try to\ncorrect this problem. What she did was create a set of rules that\nlived on the opposite side of the extreme, to force them to meet\nsomewhere in the middle.</p>\n\n<p>In reality, these rules are a different way of looking at rules many of\nus strive for in the first place. An example: The 100 lines per class\nrule is really forcing you to create classes with the <a href=\"https://en.wikipedia.org/wiki/Single_responsibility_principle\">Single\nResponsibility Principle</a> in mind.</p>\n\n<p>My issue is not with these rules as they exist, but with the\ncommunity&#39;s cargo culting of these rules and treating them as The Four\nCommandments. I don&#39;t have an issue with you following them, as long as\nyou understand why they exist, and you feel as though they are\nprinciples you believe in. Don&#39;t just make five line methods because\nSandi said so, and if you follow these rules, you feel like you&#39;ll be a\ngreat developer. Adhering to Sandi&#39;s rules does not make one great, it&#39;s\nunderstanding where these, or any rules, should and shouldn&#39;t apply.\nSometimes a method that spans more than five lines will be more readable\nand maintainable than the same method spread across five or six 5-line\nmethods. Striking that balance is where the power lies.</p>\n\n<h2>REMOTE</h2>\n\n<p>37signals just published\n<a href=\"http://www.amazon.com/Remote-Office-Required-Jason-Fried/dp/0804137501/\">REMOTE</a>, a book about\nthe benefits of allowing remote workers. I don&#39;t disagree that\nworking remote has many benefits. At DockYard, we work from home from time\nto time. We also strive to have people in the office more often than\nnot, not because Brian doesn&#39;t think we aren&#39;t working when we aren&#39;t in\nthe office, but because it enables greater collaboration.</p>\n\n<p>DockYard is a consultancy; we have client work with deadlines we have to\nmeet. With having our developers and designers in the office together more\noften than not, it removes the latency from discussing issues. I can\nwalk over to Steve and we can hash out an issue in a few minutes. If we\nwere all remote, I&#39;d have to ping him on HipChat, hope he&#39;s at his desk,\ntry to go over the issue text-only until we realize we need to have a\nGoogle Hangout, etc. It makes more sense for us to be in the same place.</p>\n\n<p>The other benefit of DockYard working from the office is that our junior\ndevelopers enjoy the same face-to-face benefits. Also, body language\nmakes a huge difference when teaching or learning topic. When someone pauses,\nhas a slightly puzzled look on their face and says &quot;....Ok&quot;, it easy to\nrealize that a bit more background on the topic will really let them\ngrasp the topic, but an &quot;ok&quot; in HipChat removes all the body language we\ncould leverage.</p>\n\n<p>Removing the latency between a junior developer having a\nquestion and getting the answer is crucial. If a junior developer has a\nquestion that&#39;s a show stopper, they can feel helpless while they wait\nfor someone to be around to answer that question. That helplessness is\nkiller; it makes someone feel like they aren&#39;t helping, and can\npotentially prevent them from asking other questions. If the that delay\nis interpreted as the senior developer blowing them off, they will be\nless inclined to ask questions in the future, hurting both themselves\nand the team.</p>\n\n<p>A product company that employs experts (or creators) of a framework has\na much different situation, where working remote makes a lot more sense.\nThe conversations they have will be at a different level. They&#39;ll all\nhave intimate knowledge of the code base, and so a few questions back\nand forth or a quick Google Hangout achieves a great deal. The\nconclusion was a result of the context they exist in. Remote workers\nwork great for them because they have the perfect mix of experts in\ntheir domain; are working on products, which have very different\nrequirements and issues of client work; and have a customer support\ngroup, which don&#39;t necessarily need to collaborate while working a\ncustomer through issues.</p>\n\n<h2>Figure Out What Works for YOU</h2>\n\n<p>In no way am I saying you should all work in the same office and\ndisregard Sandi&#39;s rules. What I&#39;m asking of the community is a bit of\ncritical thought. Just because someone smart said one thing, it doesn&#39;t\nmean it&#39;s gospel. Realize that experience has led that person to that\nconclusion, weigh your experience against it, and apply it if you can.</p>\n\n<p>Let&#39;s just not hope that the gods give us food because we made bamboo\nairplanes. Let&#39;s realize that moving to XYZ comes with both drawbacks and\nbenefits, not just the benefits that everyone is touting.</p>\n","summary":"Don't do what others tell you to do without thinking about it","illustration":null,"illustration_alt":null,"tags":["ruby","community","opinion"],"shallow":false,"date":"2013-11-15T00:00:00Z"},{"id":"2013/11/11/capybara-extensions","title":"Introducing Capybara-Extensions","dockyarder":"michael-dupuis","body":"<p>Today we&#39;re happy to announce <a href=\"https://github.com/dockyard/capybara-extensions\">CapybaraExtensions</a>.</p>\n\n<h2>Testing with Capybara</h2>\n\n<p>We love <a href=\"https://github.com/jnicklas/capybara\">Capybara</a> at DockYard. We use it for virtually all of our integration tests and\nrely on it for writing tests that not only replicate how users flow\nthrough an application, but also for how they interact with page\nelements.</p>\n\n<p>Briefly, let&#39;s take a look at a Rails application with and without\nCapybara. Without Capybara, inheriting from <code>ActionDispatch::IntegrationTest</code> provides\nsome helpful <code>RequestHelpers</code> like <code>get</code>, which takes a path, some\nparameters, and headers (via <a href=\"http://guides.rubyonrails.org/testing.html#integration-testing-examples\">RailsGuides</a>):</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n</pre></td>\n  <td class=\"code\"><pre>require <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">test_helper</span><span class=\"delimiter\">'</span></span>\n\n<span class=\"keyword\">class</span> <span class=\"class\">UserFlowsTest</span> &lt; <span class=\"constant\">ActionDispatch</span>::<span class=\"constant\">IntegrationTest</span>\n  fixtures <span class=\"symbol\">:users</span>\n\n  test <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">login and browse site</span><span class=\"delimiter\">&quot;</span></span> <span class=\"keyword\">do</span>\n    <span class=\"comment\"># login via https</span>\n    https!\n    get <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">/login</span><span class=\"delimiter\">&quot;</span></span>\n    assert_response <span class=\"symbol\">:success</span>\n\n    post_via_redirect <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">/login</span><span class=\"delimiter\">&quot;</span></span>, <span class=\"key\">username</span>: users(<span class=\"symbol\">:david</span>).username, <span class=\"key\">password</span>: users(<span class=\"symbol\">:david</span>).password\n    assert_equal <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">/welcome</span><span class=\"delimiter\">'</span></span>, path\n    assert_equal <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Welcome david!</span><span class=\"delimiter\">'</span></span>, flash[<span class=\"symbol\">:notice</span>]\n\n    https!(<span class=\"predefined-constant\">false</span>)\n    get <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">/posts/all</span><span class=\"delimiter\">&quot;</span></span>\n    assert_response <span class=\"symbol\">:success</span>\n    assert assigns(<span class=\"symbol\">:products</span>)\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Capybara adds some syntactic sugar with its\n<code>Capybara::Session#visit</code> method, and produces code that reads a lot cleaner and mimics\nhow a user engages with the application:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n22\n23\n</pre></td>\n  <td class=\"code\"><pre>require <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">test_helper</span><span class=\"delimiter\">'</span></span>\nrequire <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">capybara</span><span class=\"delimiter\">'</span></span>\nrequire <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">capybara_minitest_spec</span><span class=\"delimiter\">'</span></span> <span class=\"comment\"># MiniTest::Spec expectations for Capybara</span>\n\n<span class=\"keyword\">class</span> <span class=\"class\">PostsTest</span> &lt; <span class=\"constant\">ActionDispatch</span>::<span class=\"constant\">IntegrationTest</span>\n  fixtures <span class=\"symbol\">:users</span>\n\n  test <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">login and browse site</span><span class=\"delimiter\">&quot;</span></span> <span class=\"keyword\">do</span>\n    visit login_path\n\n    within find(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">form#session-new</span><span class=\"delimiter\">'</span></span>) <span class=\"keyword\">do</span>\n      fill_in <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">username</span><span class=\"delimiter\">'</span></span>, <span class=\"key\">with</span>: users(<span class=\"symbol\">:david</span>).username\n      fill_in <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">password</span><span class=\"delimiter\">'</span></span>, <span class=\"key\">with</span>: users(<span class=\"symbol\">:david</span>).password\n      click_button <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Submit</span><span class=\"delimiter\">'</span></span>\n    <span class=\"keyword\">end</span>\n\n    current_path.must_equal welcome_path\n    page.must_have_content <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Welcome david!</span><span class=\"delimiter\">'</span></span>\n\n    visit posts_path\n    page.must_have_content <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Welcome to ReefPoints!</span><span class=\"delimiter\">'</span></span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Jonas Nicklas, who maintains Capybara, writes how the library leads to <a href=\"http://www.elabs.se/blog/51-simple-tricks-to-clean-up-your-capybara-tests\">cleaner tests and clearer intent</a>. This is exactly what we\nwant from our tests, which not only test our code, but also\ndocument our application&#39;s behavior. A lot more could be written about\nthis idea, but I&#39;m going to assume I&#39;m preaching to the choir here and\njump into DockYard&#39;s newest gem:\n<a href=\"https://rubygems.org/gems/capybara-extensions\">CapybaraExtensions</a>.</p>\n\n<p>CapybaraExtensions extends Capybara&#39;s finders and matchers. Our goal is\nto cull many of the <code>find</code> statements from our tests and remove the\nverbose CSS and\nxpath locators that come along with them.</p>\n\n<h2>Finders</h2>\n\n<h3>find_&lt;element&gt;</h3>\n\n<p>The library contains helper\nmethods for finding elements like <code>form</code>, <code>table</code>, and lists, as well as\nmany HTML5 elements like <code>article</code>, <code>aside</code>, <code>footer</code>, and <code>header</code>.</p>\n\n<p>So the above code in which we pass a CSS selector</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre>within find(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">form#session-new</span><span class=\"delimiter\">'</span></span>) <span class=\"keyword\">do</span>\n  ...\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>becomes the following:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre>within form(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Login</span><span class=\"delimiter\">'</span></span>) <span class=\"keyword\">do</span>\n  ...\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>In this example, &quot;Login&quot; is text found in the form. Passing the text contained within the element we&#39;re looking for better reflects what a user is thinking when she sees a form that\nsays &quot;Login.&quot;</p>\n\n<p>Finder methods are also aliased so that you can call <code>#form</code>\ninstead of <code>#find_form</code> (which you might expect from a finder method).\nThis makes for better readability with the oft-used <code>Capybara::Session#within</code> method.</p>\n\n<h3>first_&lt;element&gt;</h3>\n\n<p>Each &quot;find&quot; method also has a corresponding &quot;first&quot; method. So when you\nhave multiple <code>article</code> elements on a page with the text &#39;Lorem ipsum,&#39; you can call\n<code>first_article(&#39;Lorem ipsum&#39;)</code> without returning an ambiguous match in\nCapybara.</p>\n\n<h3>&lt;element&gt;_number</h3>\n\n<p>In instances when you have lists or tables and you&#39;d like to verify the\ncontent of a specific <code>li</code> or <code>tr</code>, CapybaraExtensions allows\nyou to target the nth occurence of the element via\n<code>#list_item_number</code> and <code>#row_number</code>.</p>\n\n<p>So given the following HTML:</p>\n<div class=\"highlight html \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n  <td class=\"code\"><pre><span class=\"tag\">&lt;ul&gt;</span>\n  <span class=\"tag\">&lt;li&gt;</span>John Doe<span class=\"tag\">&lt;/li&gt;</span>\n  <span class=\"tag\">&lt;li&gt;</span>Jane Doe<span class=\"tag\">&lt;/li&gt;</span>\n  <span class=\"tag\">&lt;li&gt;</span>Juan Doe<span class=\"tag\">&lt;/li&gt;</span>\n<span class=\"tag\">&lt;/ul&gt;</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>You can find the second <code>li</code> with:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>list_item_number(<span class=\"integer\">2</span>) <span class=\"comment\"># =&gt; 'Jane Doe'</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Use these methods for testing how elements are being ordered.</p>\n\n<h2>Matchers</h2>\n\n<p>CapybaraExtensions extends Capybara&#39;s matchers with methods for\nverifying the presence of images, the value of input fields, and the\npresence of meta tags. All of these methods return a boolean.</p>\n\n<h3>field_values</h3>\n\n<p>CapybaraExtensions comes with a <code>#has_field_value?</code> method which checks\nthe value of a form field. Ensuring that your records save and update\ncorrectly should be the domain of your unit tests, however this method\ncan come in handy when you&#39;re not persisting data to the back-end. For\nexample, after performing a search, you may want to ensure that the\nquery persists in the search field after redirect.</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n  <td class=\"code\"><pre>within form(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Search</span><span class=\"delimiter\">'</span></span>) <span class=\"keyword\">do</span>\n  has_field_value?(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">search</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">capybara images</span><span class=\"delimiter\">'</span></span>)\n<span class=\"keyword\">end</span>\n<span class=\"comment\"># =&gt; true</span>\n</pre></td>\n</tr></table>\n</div></div>\n<h3>images</h3>\n\n<p>Asserting that text appears on the page is easy with Capybara&#39;s\n<code>#must_have_content</code> method; asserting\nthat a particular image appears has always been a little tougher.\n<code>#must_have_image</code> takes a hash with the <code>src</code> and/or <code>alt</code> attributes\nyou&#39;re looking for. You can pass a string for either of these keys, and\nan instance of <code>Regexp</code> to the <code>src</code> attribute when you want to hone in\non a portion of the <code>src</code> attribute without worrying about the rest of\nthe URL.</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre>page.has_image?(<span class=\"key\">src</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">http://gallery.photo.net/photo/8385754-md.jpg</span><span class=\"delimiter\">'</span></span>,\n<span class=\"key\">alt</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Capybara</span><span class=\"delimiter\">'</span></span>)\n<span class=\"comment\"># =&gt; true</span>\n</pre></td>\n</tr></table>\n</div></div>\n<h3>meta_tags</h3>\n\n<p><code>#has_meta_tag</code> checks the <code>head</code> for meta tags. Just pass in the <code>name</code>\nand <code>content</code> you&#39;re expecting to find. We use this method quite a bit to ensure that our pages are looking good\nfrom a search engine optimization standpoint.</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n  <td class=\"code\"><pre>page.has_meta_tag?(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">title</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Introducing CapybaraExtensions</span><span class=\"delimiter\">'</span></span>)\n<span class=\"comment\"># =&gt; true</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>We hope this gem makes your tests a little more descriptive and your <code>test_helper.rb</code> a little lighter. As always, we welcome pull requests and issues via Github. Thanks!</p>\n\n<h2>Resources</h2>\n\n<ul>\n<li>Install CapybaraExtensions from <a href=\"http://rubygems.org/gems/capybara-extensions\">Rubygems</a></li>\n<li>Follow CapybaraExtensions on <a href=\"https://github.com/dockyard/capybara-extensions\">Github</a></li>\n<li>Read up on CapybaraExtensions on\n<a href=\"http://rubydoc.info/gems/capybara-extensions/frames\">RubyDoc.info</a></li>\n</ul>\n","summary":"Write more descriptive tests with additional finders and matchers for Capybara.","illustration":null,"illustration_alt":null,"tags":["testing","ruby"],"shallow":false,"date":"2013-11-11T00:00:00Z"},{"id":"2013/11/05/design-patterns-command-pattern","title":"Design Patterns: The Command Pattern","dockyarder":"doug-yun","body":"<h2>Let&#39;s get ready for some football!</h2>\n\n<p>One of my favorite sports is American football; it&#39;s strategic, physical,\nand wild! As a fan - and once high school player - of the sport, I&#39;ve gained some\nvaluable lessons from my experiences. For example, I&#39;ve learned that &quot;persistence\nis key&quot;, &quot;giving up is for losers&quot;, and that &quot;water sucks, Gatorade is better.&quot;</p>\n\n<p>While those are fine gems of wisdom, today we&#39;ll be\ncovering one of the most overlooked teachings in football: the power\nof <strong>Command</strong> pattern.</p>\n\n<p>The <strong>Command</strong> design pattern intends to separate and decouple an object of invocation\nfrom the object that receives the message of invocation. We will\nencapsulate all pertinent information of a method and execute the method\nat a later time. Essentially, the <strong>Command</strong> pattern gives us the ability\nto queue a series of operations for a later time. Let&#39;s dig in.</p>\n\n<h2>Put me in, Coach!</h2>\n\n<p>Let&#39;s start by creating a <code>BostonNarwin</code> class from which our\nfootball players will inherit from.</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\"># football.rb</span>\n\n<span class=\"keyword\">class</span> <span class=\"class\">BostonNarwin</span>\n  attr_reader <span class=\"symbol\">:action</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">initialize</span>(action)\n    <span class=\"instance-variable\">@action</span> = action\n  <span class=\"keyword\">end</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">name</span>\n    <span class=\"predefined-constant\">self</span>.class\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Next, we&#39;ll need some key players; let&#39;s create <code>Quarterback</code> and <code>Receiver</code> classes.\nFor fun, we&#39;re going to add a <code>TeamOwner</code> class too.\nAll three of these classes are going to possess a method called <code>#execute</code>.</p>\n\n<p>Each of these classes can be considered as instances of separate\n<strong>commands</strong>.</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n22\n23\n24\n25\n26\n27\n28\n29\n<strong>30</strong>\n31\n32\n33\n34\n35\n36\n37\n38\n39\n<strong>40</strong>\n41\n42\n43\n44\n45\n46\n47\n48\n49\n<strong>50</strong>\n51\n52\n53\n54\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\"># football.rb</span>\n\n<span class=\"keyword\">class</span> <span class=\"class\">Quarterback</span> &lt; <span class=\"constant\">BostonNarwin</span>\n  attr_reader <span class=\"symbol\">:path</span>, <span class=\"symbol\">:play</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">initialize</span>(path, play)\n    <span class=\"keyword\">super</span> <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Hut! Hut! Red 19! Red 19! Hike!</span><span class=\"delimiter\">'</span></span>\n    <span class=\"instance-variable\">@path</span> = path\n    <span class=\"instance-variable\">@play</span> = play\n  <span class=\"keyword\">end</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">execute</span>\n    file = <span class=\"constant\">File</span>.open path, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">w</span><span class=\"delimiter\">'</span></span>\n    file.write <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"inline\"><span class=\"inline-delimiter\">#{</span>name<span class=\"inline-delimiter\">}</span></span><span class=\"content\">: </span><span class=\"inline\"><span class=\"inline-delimiter\">#{</span>play<span class=\"inline-delimiter\">}</span></span><span class=\"char\">\\n</span><span class=\"delimiter\">&quot;</span></span>\n    file.close\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n\n<span class=\"keyword\">class</span> <span class=\"class\">Receiver</span> &lt; <span class=\"constant\">BostonNarwin</span>\n  attr_reader <span class=\"symbol\">:path</span>, <span class=\"symbol\">:play</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">initialize</span>(path, play)\n    <span class=\"keyword\">super</span> <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Run, run, run!!!</span><span class=\"delimiter\">'</span></span>\n    <span class=\"instance-variable\">@path</span> = path\n    <span class=\"instance-variable\">@play</span> = play\n  <span class=\"keyword\">end</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">execute</span>\n    file = <span class=\"constant\">File</span>.open path, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">a</span><span class=\"delimiter\">'</span></span>\n    file.write <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"inline\"><span class=\"inline-delimiter\">#{</span>name<span class=\"inline-delimiter\">}</span></span><span class=\"content\">: </span><span class=\"inline\"><span class=\"inline-delimiter\">#{</span>play<span class=\"inline-delimiter\">}</span></span><span class=\"char\">\\n</span><span class=\"delimiter\">&quot;</span></span>\n    file.close\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n\n<span class=\"keyword\">class</span> <span class=\"class\">TeamOwner</span> &lt; <span class=\"constant\">BostonNarwin</span>\n  attr_reader <span class=\"symbol\">:path</span>, <span class=\"symbol\">:target</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">initialize</span>(path, target)\n    <span class=\"keyword\">super</span> <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">We are moving the team from </span><span class=\"inline\"><span class=\"inline-delimiter\">#{</span>prettify path<span class=\"inline-delimiter\">}</span></span><span class=\"content\"> to </span><span class=\"inline\"><span class=\"inline-delimiter\">#{</span>prettify target<span class=\"inline-delimiter\">}</span></span><span class=\"content\">!</span><span class=\"delimiter\">&quot;</span></span>\n    <span class=\"instance-variable\">@path</span> = path\n    <span class=\"instance-variable\">@target</span> = target\n  <span class=\"keyword\">end</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">execute</span>\n    <span class=\"constant\">FileUtils</span>.mv path, target\n    file = <span class=\"constant\">File</span>.open target, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">a</span><span class=\"delimiter\">'</span></span>\n    file.write <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"inline\"><span class=\"inline-delimiter\">#{</span>name<span class=\"inline-delimiter\">}</span></span><span class=\"content\">: We moved from </span><span class=\"inline\"><span class=\"inline-delimiter\">#{</span>prettify path<span class=\"inline-delimiter\">}</span></span><span class=\"content\"> to </span><span class=\"inline\"><span class=\"inline-delimiter\">#{</span>prettify target<span class=\"inline-delimiter\">}</span></span><span class=\"content\">!</span><span class=\"delimiter\">&quot;</span></span>\n    file.close\n  <span class=\"keyword\">end</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">prettify</span>(pathname)\n    (pathname.chomp <span class=\"constant\">File</span>.extname(pathname)).capitalize\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Next, let&#39;s create a class that keeps track of the <code>Quarterback</code>, <code>Receiver</code>, and\n<code>TeamOwner</code> commands. We can use the\n<a href=\"http://reefpoints.dockyard.com/2013/10/01/design-patterns-composite-pattern.html\"><strong>Composite</strong> pattern</a>\nto create this new class.</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\"># football.rb</span>\n\n<span class=\"keyword\">class</span> <span class=\"class\">CompositeCommand</span> &lt; <span class=\"constant\">BostonNarwin</span>\n  attr_accessor <span class=\"symbol\">:commands</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">initialize</span>\n    <span class=\"instance-variable\">@commands</span> = []\n  <span class=\"keyword\">end</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">add_command</span>(*args)\n    args.each { |arg| commands &lt;&lt; arg }\n  <span class=\"keyword\">end</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">execute</span>\n    commands.each { |command| command.execute }\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Now, we can kickoff some football commands!</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre></td>\n  <td class=\"code\"><pre>load 'football.rb'\n\nquarterback = Quarterback.new('boston.txt', 'I'm going to throw a perfect pass!')\n# =&gt; #&lt;Quarterback:0x007ff6f5c5c148\n     @action=&quot;Hut! Hut! Red 19! Red 19! Hike!&quot;,\n     @path=&quot;boston.txt&quot;,\n     @play=&quot;I'm going to throw a perfect pass!&quot;&gt;\n\nreceiver = Receiver.new('boston.txt', 'I'm going to catch the ball!')\n# =&gt; #&lt;Receiver:0x007ff6f5c949f8\n     @action=&quot;Run, run, run!!!&quot;,\n     @path=&quot;boston.txt&quot;,\n     @play=&quot;I'm going to catch the ball!&quot;&gt;\n\nteam_owner = TeamOwner.new('boston.txt', 'somerville.txt')\n# =&gt; #&lt;TeamOwner:0x007ff6f5ccd028\n     @action=&quot;We are moving the team from Boston to Somerville!&quot;,\n     @path=&quot;boston.txt&quot;,\n     @target=&quot;somerville.txt&quot;&gt;\n</pre></td>\n</tr></table>\n</div></div>\n<p>Great! Now we&#39;ll create an instance of the <code>CompositeCommand</code>, add\neach sub-command with <code>#add_command</code>, and then execute each command\nwith <code>#execute</code>.</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n</pre></td>\n  <td class=\"code\"><pre>command = CompositeCommand.new\n# =&gt; #&lt;CompositeCommand:0x007ff6f5b82948 @commands=[]&gt;\n\ncommand.add_command quarterback, receiver, team_owner\n# =&gt; [#&lt;Quarterback:0x007ff6f5c5c148\n     @action=&quot;Hut! Hut! Red 19! Red 19! Hike!&quot;,\n     @path=&quot;boston.txt&quot;,\n     @play=&quot;I'm going to throw a perfect pass!&quot;&gt;,\n     #&lt;Receiver:0x007ff6f5c949f8\n     @action=&quot;Run, run, run!!!&quot;,\n     @path=&quot;boston.txt&quot;,\n     @play=&quot;I'm going to catch the ball!&quot;&gt;,\n     #&lt;TeamOwner:0x007ff6f5ccd028\n     @action=&quot;We are moving the team from Boston to Somerville!&quot;,\n     @path=&quot;boston.txt&quot;,\n     @target=&quot;somerville.txt&quot;&gt;]\n\ncommand.execute\n# ...  Omitted for brevity ...\n\nexit\n</pre></td>\n</tr></table>\n</div></div>\n<p>Finally, let&#39;s list out the files in our current directory and view the contents\nof our recently created text file.</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n  <td class=\"code\"><pre>$ ls\n# =&gt; football.rb   somerville.txt\n\n$ less somerville.txt\n# =&gt; Quarterback: I'm going to throw a perfect pass!\n     Receiver: I'm going to catch the ball!\n     TeamOwner: We moved from Boston to Somerville!\n</pre></td>\n</tr></table>\n</div></div>\n<p>Wow! The <strong>Command</strong> pattern in action!</p>\n\n<h2>Discussion</h2>\n\n<p>The <strong>Command</strong> pattern suggests that we create objects that perform\nspecific tasks and actions. For our example, the <code>Quarterback</code> object\ncreated a file, the <code>Receiver</code> appended to the file, and the <code>TeamOwner</code>\nobject moved it. Each of the command objects completed their action\nthrough <code>CompositeCommand#execute</code>.</p>\n\n<p>Having one object, an instance of <code>CompositeCommand</code>, that executes all\nstored commands presents us with solutions ranging from simple file\nmanipulation to user triggered interaction. The <strong>Command</strong> pattern\nalso allows us to &quot;store&quot; and &quot;remember&quot; commands prior to and after\nexecution.</p>\n\n<p>Hope you enjoyed our example and go Boston Narwins!</p>\n","summary":"Exploring design patterns and their use cases","illustration":null,"illustration_alt":null,"tags":["design-patterns","ruby"],"shallow":false,"date":"2013-11-05T00:00:00Z"},{"id":"2013/10/22/vim-buffers","title":"Buffers, Windows, Tabs... Oh My! Part 1: Vim Buffers","dockyarder":"doug-yun","body":"<p>First off, <a href=\"http://boston.redsox.mlb.com\">GO SOX</a>!!!11</p>\n\n<p>Now that I&#39;ve reinforced my allegiance to America&#39;s favorite baseball team, let&#39;s\ntalk about Vim. In this series of posts, we&#39;ll explore buffers,\nwindows, and tabs.</p>\n\n<p>Today, our topic will be <em>buffers</em>, editable files that are\navailable in-memory.</p>\n\n<p>When you first open a file through a Vim session, you are creating and working\nin a buffer, typically through a window. For the sake of today&#39;s discussion,\nwe will consider working with multiple buffers through only one window, our\nviewport of the working buffer.</p>\n\n<h3>Let&#39;s open a buffer</h3>\n\n<p>We&#39;re going to setup an easy exercise for today&#39;s post. If you don&#39;t want to\nfollow along, feel free to try the exercise in your own project.</p>\n\n<p>Let&#39;s create a dummy directory and some of text files:</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n  <td class=\"code\"><pre>mkdir dummy &amp;&amp; cd dummy\necho 'The Red Sox rule!' &gt; redsox.txt &amp;&amp; echo 'Cardinals drool!' &gt; cardinals.txt\n</pre></td>\n</tr></table>\n</div></div>\n<p>Next, open up the <code>redsox.txt</code> file.</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>vim redsox.txt      # =&gt; The Red Sox rule!\n</pre></td>\n</tr></table>\n</div></div>\n<p>Congratulations, you&#39;re already using buffers!</p>\n\n<h3>Buffer indicators</h3>\n\n<p>Let&#39;s open the <code>cardinals.txt</code> file in a <em>hidden</em> buffer. We can accomplish\nthis through the current <code>redsox.txt</code> buffer by using <code>:badd</code> or <code>:bad</code>. Next, we&#39;ll\nlist out all buffers, hidden or active, with <code>:ls</code>.</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n  <td class=\"code\"><pre># Inside the current buffer, get into Vim's command mode and use the command `:badd`.\n# List all buffers with `:ls`.\n\n:badd candinals.txt     # 'badd' =&gt; 'Buffer ADD'\n                        # You can also use `:bad`\n:ls\n  ### =&gt;   1    %a   &quot;redsox.txt&quot;              line 1\n           2         &quot;cardinals.txt&quot;           line 1\n</pre></td>\n</tr></table>\n</div></div>\n<p>The <code>:ls</code> command returns information about each buffer: the unique buffer\nnumber, buffer indicators, file name, and the line number of your current\nposition within the file.</p>\n\n<ul>\n<li>Buffer number: A unique number to identify individual buffers.</li>\n<li>Buffer indicators:\n\n<ul>\n<li><code>%</code>: buffer in the current window</li>\n<li><code>#</code>: alternate buffer, which can be accessed by <code>CTRL-6</code></li>\n<li><code>a</code>: active buffer, loaded and visible</li>\n<li><code>h</code>: hidden buffer, loaded but not visible</li>\n<li><code>-</code>: a buffer that cannot be modified, <code>modifiable</code> off</li>\n<li><code>=</code>: a buffer that is readonly</li>\n<li><code>+</code>: a buffer that has been successfully modified</li>\n<li><code>x</code>: a buffer with read errors</li>\n<li><code></code>: if there is no buffer indicator, it signifies a buffer that has not been\nloaded yet</li>\n</ul></li>\n<li>Buffer name: The name of the file.</li>\n<li>Buffer line number: The current line number that the cursor is on.</li>\n</ul>\n\n<h3>Working with multiple buffers</h3>\n\n<p>As we can see, our <code>cardinals.txt</code> has yet to be loaded. Let&#39;s open it into\nour window and view our current buffers.</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n  <td class=\"code\"><pre>:e cardinals.txt   # =&gt; Cardinals drool!\n\n:ls\n  ### =&gt;   1    #    &quot;redsox.txt&quot;              line 1\n           2    %a   &quot;cardinals.txt&quot;           line 1\n</pre></td>\n</tr></table>\n</div></div>\n<p>Nice! We can see that our <code>redsox.txt</code> file is our alternate buffer. Let&#39;s switch\nto the <code>redsox.txt</code> by hitting <code>CTRL-6</code>.</p>\n\n<p>Now we&#39;ll create a new text file, <code>worldseries.txt</code>, write <code>World Series!</code> inside that file,\nand check out our list of buffers.</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n  <td class=\"code\"><pre>:e worldseries.txt   # Write &quot;World Series!&quot; inside the file and save it.\n:ls\n  ### =&gt;   1    #    &quot;redsox.txt&quot;              line 1\n           2         &quot;cardinals.txt&quot;           line 1\n           3    %a   &quot;worldseries.txt&quot;         line 1\n</pre></td>\n</tr></table>\n</div></div>\n<p>Our alternate buffer is the <code>redsox.txt</code> file. Remember, if we want to quickly\nswitch to the alternate buffer, we can use <code>CTRL-6</code>. What if we want to open the\n<code>cardinals.txt</code> into our current window?</p>\n\n<p>Well, we have a couple of options. From the <code>worldseries.txt</code> file, we can use the\nfollowing vim commands:</p>\n\n<ul>\n<li><code>:bp</code> :  Switch to the previous buffer</li>\n<li><code>:b2</code> :  Switch to buffer number 2\n\n<ul>\n<li><code>:b</code> : Takes a buffer number as an argument</li>\n</ul></li>\n</ul>\n\n<p>Go ahead and give it a try.</p>\n\n<p>Here are some other pertinent buffer commands:</p>\n\n<ul>\n<li><code>:bn</code> : Switch to the next buffer</li>\n<li><code>:ball</code> : Open all buffers into windows</li>\n<li><code>:brew</code> : Go back to the first buffer in the list - &quot;Buffer REWind&quot;</li>\n<li><code>:bd</code> : Delete the buffer - also takes buffer numbers as arguments\n\n<ul>\n<li><code>:bd 1 2 3</code> : Will remove buffer numbers 1, 2, and 3</li>\n<li><em>Note</em>: <code>:q</code> is not the same as <code>:bd</code>... try it and verify with <code>:ls</code>!</li>\n</ul></li>\n</ul>\n\n<h3>So what good are buffers?</h3>\n\n<p>To be honest, I just realized the power of buffers about a month ago.\nPreviously, thanks to a large monitor, I would have multtple windows\n- as many as 6-8 - open during one Vim session.\nMultiple windows are great, however, if I really needed to focus on a few\nfiles, I&#39;d have to close each insignificant file window.</p>\n\n<p>Nowadays, my workflow comprises of two or three windows, with multiple buffers in the background.\nThis has allowed me to rapidly move between files that I actively open and edit.</p>\n\n<h3>Remapping buffer commands</h3>\n\n<p>Here are some key remappings that speed up buffer movement:</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n</pre></td>\n  <td class=\"code\"><pre>&quot; ~/.vimrc (or wherever else you keep your .vimrc)\n\n&quot; Move to the previous buffer with &quot;gp&quot;\nnnoremap gp :bp&lt;CR&gt;\n\n&quot; Move to the next buffer with &quot;gn&quot;\nnnoremap gn :bn&lt;CR&gt;\n\n&quot; List all possible buffers with &quot;gl&quot;\nnnoremap gl :ls&lt;CR&gt;\n\n&quot; List all possible buffers with &quot;gb&quot; and accept a new buffer argument [1]\nnnoremap gb :ls&lt;CR&gt;:b\n</pre></td>\n</tr></table>\n</div></div>\n<p><em>Note</em>: Remapping <code>gp</code> will remove the Vim default functionality of <code>gp</code>.\nUse <code>:h gp</code> to read more about it.</p>\n\n<p>Hope that provides some insight into the capabilities of Vim buffers!\nIf there is anything you&#39;d like to add, please feel free and\ncomment in the discussion area. Thanks!</p>\n\n<ul>\n<li>[1] Special thanks to <a href=\"http://www.reddit.com/r/vim/comments/1p2a62/a_painless_tutorial_on_vim_buffers/ccxzq7e\">romainl</a>.</li>\n</ul>\n","summary":"A painless tutorial on Vim buffers","illustration":null,"illustration_alt":null,"tags":["vim","workflow"],"shallow":false,"date":"2013-10-22T00:00:00Z"},{"id":"2013/10/06/namespaced-pages","title":"Namespaced Pages","dockyarder":"brian-cardarella","body":"<h2>Simple Namespacing</h2>\n\n<p>We&#39;ve been using our <a href=\"https://github.com/dockyard/pages\">Pages</a> gem in\nnearly all of our projects for over a year now. Its been great but could\nonly support pages on the root. I just released <code>0.2.0</code> of the gem that\nnow supports namespacing:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre>namespace <span class=\"symbol\">:work</span> <span class=\"keyword\">do</span>\n  pages <span class=\"symbol\">:client_1</span>, <span class=\"symbol\">:client_2</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>This will give you the routes of <code>/work/client_1</code> and <code>/work/client_2</code>.\nYour views will go into <code>app/views/work/pages</code>. For more details see the\n<a href=\"https://github.com/dockyard/pages#namespacing\">README</a>.</p>\n\n<p>In a future release of <code>Pages</code> we plan on adding support automatic\npages. For example, you will no longer need to declare the pages in your\n<code>config/routes.rb</code> file. As long as the templates exist in the\n<code>app/views/pages</code> directory the route will happen automatically. In\naddition we will also add support for pages nested under different\nnamespaces, or accessible from certain authentication state. All in the\nname of serving up static page goodness!</p>\n","summary":"New functionality for the gem","illustration":null,"illustration_alt":null,"tags":["ruby","ruby-on-rails"],"shallow":false,"date":"2013-10-06T00:00:00Z"},{"id":"2013/10/01/design-patterns-composite-pattern","title":"Design Patterns: The Composite Pattern","dockyarder":"doug-yun","body":"<h2>Coffee Coffee</h2>\n\n<p>If you&#39;re anything like me, you&#39;ll agree that every morning needs to start\nout with a cup of coffee. And, if you&#39;re anything like me, you&#39;ll have\nat least three different coffee making apparatuses. And, if you&#39;re\nanything like me... you&#39;ll soon realize you may have an addiction.</p>\n\n<p>Joke aside, each coffee contraption requires a specific procedure\nto be completed in order to brew a cup of joe; each having multiple parts,\ntaking differing amounts of time, requiring various numbers of steps, etc.</p>\n\n<p>Our coffee making process can be described by a basic example\nof the <em>Composite</em> method pattern.</p>\n\n<h2>The Best Part of Waking Up is a Composite Pattern in Your Cup</h2>\n\n<p>We can start by thinking of each coffee maker and coffee related task as a <em>subclass</em> of\nour <code>CoffeeRoutine</code>. <code>CoffeeRoutine</code> will be known as the <em>component</em>, the base\nclass or interface that possesses the commonalities of simple and complex\nobjects. <code>CoffeeRoutine#time</code> is the common trait among all\ncoffee related classes.</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">class</span> <span class=\"class\">CoffeeRoutine</span>\n  attr_reader <span class=\"symbol\">:task</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">initialize</span>(task)\n    <span class=\"instance-variable\">@task</span> = task\n  <span class=\"keyword\">end</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">time</span>\n    <span class=\"float\">0.0</span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Next, we&#39;ll create a couple of <em>leaf</em> classes, which represent\nindivisble portions of our pattern. Here are a couple of <em>leaf</em> classes\nthat come to mind: <code>GrindCoffee</code> and <code>BoilWater</code>. These <em>leaf</em> classes are\nour most basic steps to making coffee.</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n22\n23\n24\n25\n26\n27\n28\n29\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">class</span> <span class=\"class\">GrindCoffee</span> &lt; <span class=\"constant\">CoffeeRoutine</span>\n  <span class=\"keyword\">def</span> <span class=\"function\">initialize</span>\n    <span class=\"keyword\">super</span> <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Grinding some coffee!</span><span class=\"delimiter\">'</span></span>\n  <span class=\"keyword\">end</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">time</span>\n    <span class=\"float\">0.5</span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n\n<span class=\"keyword\">class</span> <span class=\"class\">BoilWater</span> &lt; <span class=\"constant\">CoffeeRoutine</span>\n  <span class=\"keyword\">def</span> <span class=\"function\">initialize</span>\n    <span class=\"keyword\">super</span> <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Boiling some water!</span><span class=\"delimiter\">'</span></span>\n  <span class=\"keyword\">end</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">time</span>\n    <span class=\"float\">4.0</span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n\n<span class=\"keyword\">class</span> <span class=\"class\">AddCoffee</span> &lt; <span class=\"constant\">CoffeeRoutine</span>\n  <span class=\"keyword\">def</span> <span class=\"function\">initialize</span>\n    <span class=\"keyword\">super</span> <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Adding in the coffee!</span><span class=\"delimiter\">'</span></span>\n  <span class=\"keyword\">end</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">time</span>\n    <span class=\"float\">1.0</span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div><div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n  <td class=\"code\"><pre>g = GrindCoffee.new\n\ng.task    # =&gt; 'Grinding some coffee!'\ng.time    # =&gt; 0.5\n</pre></td>\n</tr></table>\n</div></div>\n<p>Now, we can get to the namesake of the pattern: the <em>composite</em> class. A\n<em>composite</em> class is a <em>component</em> that also contain\n<em>subcomponents</em>. <em>Composite</em> classes can be made up of smaller\n<em>composite</em> classes or <em>leaf</em> classes.</p>\n\n<p>Our various coffee making apparatuses can be thought of as <em>composites</em>.\nLet&#39;s check out the <code>FrenchPress</code> class:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n22\n23\n24\n25\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">class</span> <span class=\"class\">FrenchPress</span> &lt; <span class=\"constant\">CoffeeRoutine</span>\n  attr_reader <span class=\"symbol\">:task</span>, <span class=\"symbol\">:steps</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">initialize</span>(task)\n    <span class=\"keyword\">super</span> <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Using the French press to make coffee</span><span class=\"delimiter\">'</span></span>\n    <span class=\"instance-variable\">@steps</span> = []\n    add_step <span class=\"constant\">BoilWater</span>.new\n    add_step <span class=\"constant\">GrindCoffee</span>.new\n    add_step <span class=\"constant\">AddCoffee</span>.new\n  <span class=\"keyword\">end</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">add_step</span>(step)\n    steps &lt;&lt; step\n  <span class=\"keyword\">end</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">remove_step</span>(step)\n    steps.delete step\n  <span class=\"keyword\">end</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">time_required</span>\n    total_time = <span class=\"float\">0.0</span>\n    steps.each { |step| total_time += step.time }\n    total_time\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>However, we can simplify the <code>FrenchPress</code> class by pulling out the\n<em>composite</em> functionality into its own class.</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">class</span> <span class=\"class\">CompositeTasks</span> &lt; <span class=\"constant\">CoffeeRoutine</span>\n  attr_reader <span class=\"symbol\">:task</span>, <span class=\"symbol\">:steps</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">initialize</span>(task)\n    <span class=\"instance-variable\">@steps</span> = []\n  <span class=\"keyword\">end</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">add_step</span>(step)\n    steps &lt;&lt; step\n  <span class=\"keyword\">end</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">remove_step</span>(step)\n    steps.delete step\n  <span class=\"keyword\">end</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">time_required</span>\n    total_time = <span class=\"float\">0.0</span>\n    steps.each { |step| total_time += step.time }\n    total_time\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Now we can create <em>composite</em> coffee makers easily... They&#39;ll look\nsomething like this:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n22\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">class</span> <span class=\"class\">FrenchPress</span> &lt; <span class=\"constant\">CompositeTasks</span>\n  <span class=\"keyword\">def</span> <span class=\"function\">initialize</span>\n    <span class=\"keyword\">super</span> <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Using the FrenchPress to make coffee!!!</span><span class=\"delimiter\">'</span></span>\n    add_step <span class=\"constant\">GrindCoffee</span>.new\n    add_step <span class=\"constant\">BoilWater</span>.new\n    add_step <span class=\"constant\">AddCoffee</span>.new\n    <span class=\"comment\"># ... Omitted actual steps to make coffee from a French press ...</span>\n    <span class=\"comment\"># ... Imagine PressPlunger class has been defined already ...</span>\n    add_step <span class=\"constant\">PressPlunger</span>.new\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n\n<span class=\"keyword\">class</span> <span class=\"class\">DripMaker</span> &lt; <span class=\"constant\">CompositeTasks</span>\n  <span class=\"keyword\">def</span> <span class=\"function\">initialize</span>\n    <span class=\"keyword\">super</span> <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Using the DripMaker to make coffee!!!</span><span class=\"delimiter\">'</span></span>\n    add_step <span class=\"constant\">GrindCoffee</span>.new\n    add_step <span class=\"constant\">BoilWater</span>\n    add_step <span class=\"constant\">AddCoffee</span>.new\n    <span class=\"comment\"># ... Imagine PressStartButton class has been defined already ...</span>\n    add_step <span class=\"constant\">PressStartButton</span>.new\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Swell... now we can call the <code>FrenchPress</code> and <code>DripMaker</code> coffee makers.</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre></td>\n  <td class=\"code\"><pre>frenchpress = FrenchPress.new\n\n# =&gt; #&lt;FrenchPress:0x007f88fcf46410\n       @task=&quot;Using the FrenchPress to make coffee!!!&quot;,\n       @steps=\n         [#&lt;GrindCoffee:0x007f88fcf46370 @step=&quot;Grinding some coffee!&quot;&gt;,\n         #&lt;BoilWater:0x007f88fcf46320 @step=&quot;Boiling some water!&quot;&gt;]&gt;\n         #&lt;AddCoffee:0x007f88fcf46329 @step=&quot;Adding in the coffee!&quot;&gt;]&gt;\n         #&lt;PressPlunger:0x007f88fcf46098 @step=&quot;Pressing the plunger down!&quot;&gt;]&gt;\n\ndripmaker = DripMaker.new\n\n# =&gt; #&lt;DripMaker:0x137t88fcf57109\n       @task=&quot;Using the DripMaker to make coffee!!!&quot;,\n       @steps=\n         [#&lt;GrindCoffee:0x007f88fcf46370 @step=&quot;Grinding some coffee!&quot;&gt;,\n         #&lt;BoilWater:0x007f88fcf52520 @step=&quot;Boiling some water!&quot;&gt;]&gt;\n         #&lt;AddCoffee:0x007f88fcf46123 @step=&quot;Adding in the coffee!&quot;&gt;]&gt;\n         #&lt;PressStartButton:0x007f88fcf46432 @step=&quot;Pushing the start button!&quot;&gt;]&gt;\n</pre></td>\n</tr></table>\n</div></div>\n<p>Now we can also check the time required for each coffee maker.</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n  <td class=\"code\"><pre>frenchpress.time_required # =&gt; 12.4\ndripmaker.time_required   # =&gt; 8.5\n</pre></td>\n</tr></table>\n</div></div>\n<h2>Discussion</h2>\n\n<p>Implementing the <em>Composite</em> pattern is pretty simple.</p>\n\n<p>We create a <em>component</em> class that ties the numerous simple and\ncomplex characteristics together. In our example, <code>CoffeeRoutine</code>\ndefines an elementary method <code>#time</code> and each child class implements\nits own amount.</p>\n\n<p>Next, we create <em>leaf</em> classes, <code>AddCoffee</code>, <code>BoilWater</code>, and <code>GrindCoffee</code>,\nthat share the same characteristics with one another. Remember that it&#39;s the nature\nof <em>leaf</em> classes to be simple. If you happen across a <em>leaf</em> class that\ncould be broken up, it might potentially be a <em>composite</em> class in disguise.\nBreak up those actions into individual <em>leaf</em> classes and turn the original class\ninto a <em>composite</em>. All of our <em>leaf</em> classes had a <code>#time</code> method.</p>\n\n<p>The <em>composite</em> class handles all the subtasks, essentially using the child classes\nat its will. We can see that our two <em>composite</em> classes and their methods, <code>FrenchPress#time_required</code>\nand <code>DripMaker#time_required</code>. manipulate the method <code>#time</code> from the <em>leaf</em> classes.\nUltimately, our coffee makers are able to treat each step,\n<code>GrindCoffee</code>, <code>BoilWater</code> and <code>AddCoffee</code> uniformly.</p>\n\n<p>Hope this helps you with your morning routine!</p>\n","summary":"Exploring design patterns and their use cases","illustration":null,"illustration_alt":null,"tags":["design-patterns","ruby"],"shallow":false,"date":"2013-10-01T00:00:00Z"},{"id":"2013/09/26/vim-moving-lines-aint-hard","title":"Vim: Moving Lines Ain't Hard","dockyarder":"doug-yun","body":"<p>In the last post, we briefly discussed the power of the\n<a href=\"http://reefpoints.dockyard.com/2013/09/11/vim-staying-on-home-row-via-map.html\"><em>map</em> command</a>.\nIn today&#39;s post, we&#39;re going to use <em>map</em> again in order to move\nlines and blocks around.</p>\n\n<p>Let&#39;s use an example:\nOur goal is to move the <em>first line</em> to its proper location. From this:</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre>--- second line ---\n--- third line ---\n--- first line ---\n</pre></td>\n</tr></table>\n</div></div>\n<p>To this:</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre>--- first line ---\n--- second line ---\n--- third line ---\n</pre></td>\n</tr></table>\n</div></div>\n<h2>Delete, Then Paste</h2>\n\n<p>Here is one of the most common ways, it ain&#39;t pretty but it gets the job done.\nWe&#39;ll delete the desired line and paste it to the target location.</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n</pre></td>\n  <td class=\"code\"><pre>--- second line ---\n--- third line ---\n--- first line ---\n\n# Delete the &quot;first line&quot;, move to the &quot;second line&quot;, and paste the registered\n# &quot;first line&quot; above the &quot;second line&quot;.\n#\n# :3 --&gt; &lt;ENTER&gt; --&gt; dd --&gt; j --&gt; P\n#\n# or...\n#\n# :3d --&gt; &lt;ENTER&gt; --&gt; :2P --&gt; &lt;ENTER&gt;\n</pre></td>\n</tr></table>\n</div></div>\n<h2>I Like the Way You Move</h2>\n\n<p>The second way, use the <em>move</em> command with <code>:m</code>. I like this method a lot, as it\nrequires fewer keystrokes. It does require line numbers though. When using\nabsolute line numbers, the destination will be below the line number you specify,\nso use <code>:m0</code> to move to the top of the file.\nTry using\n<a href=\"http://jeffkreeftmeijer.com/2013/vims-new-hybrid-line-number-mode/\">hybrid mode</a>.</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n</pre></td>\n  <td class=\"code\"><pre>--- second line ---\n--- third line ---\n--- first line ---\n\n# Move your cursor on the &quot;first line&quot; (the third line), use the *move* command and\n# pass your desired line number as an argument. Hit enter.\n#\n# :3 --&gt; &lt;ENTER&gt; --&gt; :m0 --&gt; &lt;ENTER&gt;\n#\n# or...\n#\n# :3m0 --&gt; &lt;ENTER&gt;\n</pre></td>\n</tr></table>\n</div></div>\n<h2>Lazy Moving</h2>\n\n<p>Now getting to the <em>map</em> command, I&#39;ve found this pretty handy when\nI need to move a line or block of lines a couple of lines upward or downward.</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n</pre></td>\n  <td class=\"code\"><pre>&quot; In your ~/.vimrc\n&quot;\n&quot; Normal mode\nnnoremap &lt;C-j&gt; :m .+1&lt;CR&gt;==\nnnoremap &lt;C-k&gt; :m .-2&lt;CR&gt;==\n\n&quot; Insert mode\ninoremap &lt;C-j&gt; &lt;ESC&gt;:m .+1&lt;CR&gt;==gi\ninoremap &lt;C-k&gt; &lt;ESC&gt;:m .-2&lt;CR&gt;==gi\n\n&quot; Visual mode\nvnoremap &lt;C-j&gt; :m '&gt;+1&lt;CR&gt;gv=gv\nvnoremap &lt;C-k&gt; :m '&lt;-2&lt;CR&gt;gv=gv\n</pre></td>\n</tr></table>\n</div></div>\n<p>Now you can move lines by holding <em>CTRL</em> and <em>j</em> (for up a line) or\n<em>k</em> (for down a line).</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n  <td class=\"code\"><pre>--- second line ---\n--- third line ---\n--- first line ---\n\n# Move to the &quot;first line&quot;, hold &lt;CTRL&gt; and move up twice.\n#\n# :3 --&gt; &lt;ENTER&gt; --&gt; &lt;CTRL&gt; + kk\n</pre></td>\n</tr></table>\n</div></div>\n<p>Now let&#39;s move a block of lines:</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n</pre></td>\n  <td class=\"code\"><pre>--- fourth line ---\n--- fifth line ---\n--- first line ---\n--- second line ---\n--- third line ---\n\n# Move to the &quot;first line&quot;.\n# Select the &quot;first line&quot;, &quot;second line&quot;, and the &quot;third line&quot; with Visual mode.\n# Hit CTRL and move upwards twice.\n#\n# :3 -- &lt;ENTER&gt; --&gt; &lt;SHIFT&gt; + V --&gt; jj --&gt; &lt;CTRL&gt; + kk\n</pre></td>\n</tr></table>\n</div></div>\n<h2>Other Ways</h2>\n\n<p>There are plenty of other tricks that move around lines in Vim. The preceding\nexamples were just a few that I employ everyday. If you&#39;ve got something cool to\nshare, please let me know!</p>\n","summary":"Quick ways to move lines","illustration":null,"illustration_alt":null,"tags":["vim","workflow"],"shallow":false,"date":"2013-09-26T00:00:00Z"},{"id":"2013/09/11/vim-staying-on-home-row-via-map","title":"Vim: Staying on Home Row via Map","dockyarder":"doug-yun","body":"<p>Here at DockYard, the majority of us are using Vim. I don&#39;t want to\nwrite about the benefits of using this sweet editor, as that would take too long,\nbut instead, I&#39;d like to share a couple of my favorite mappings for\nescaping and saving files.</p>\n\n<h2>Vanilla Vim: Escaping and Saving</h2>\n\n<p>Escaping out to <em>Normal</em> mode from the other modes in Vim is straightforward:\nsimply hit the <code>Esc</code> key.\nSaving files is accomplished by, from <code>Normal</code> mode, pressing <code>:w</code> and then <code>Enter</code>.</p>\n\n<h2>So... What&#39;s the Problem?</h2>\n\n<p>During a session, especially when I&#39;m writing large pieces of text,\nI&#39;d find myself in a repetitive rut:</p>\n\n<ul>\n<li>I just typed out a couple of sentences and want to save my progress</li>\n<li>I&#39;d remove my left hand from home row to hit the <code>Esc</code> key</li>\n<li>Saving the file required me, once again to leave home row, to hit <code>:w</code>\nand then the <code>Enter</code> or the <code>Return</code> key</li>\n<li>To continue on, I&#39;d press <code>i</code> and type along</li>\n<li>Repeat, repeat, repeat...</li>\n</ul>\n\n<p>See where I&#39;m getting at?</p>\n\n<h2>Let&#39;s Talk About Map</h2>\n\n<p>Before we review and\n<a href=\"http://www.flickr.com/search/?q=pasta\">copy-pasta</a>\nthe portion of my <code>.vimrc</code>, let&#39;s briefly go over the very basics of the\npertinent map commands.\nYou can find the entire <a href=\"http://vimdoc.sourceforge.net/htmldoc/map.html\">map documentation here</a>\nor by typing <code>:help map</code> within a Vim session.</p>\n\n<p>Protip: To open help texts into a full buffer, <code>:h map | only</code> or to open them in a separate tab <code>:tab h map</code>.</p>\n\n<h3>Recursive Map</h3>\n\n<p>First, we&#39;re going to talk about <em>recursive</em> map commands. A <em>recursive</em>\ncommand will transform one result to another result, if there is another\nbinding to that key. An example can be found at the <code>.vimrc</code> below.</p>\n\n<p>Here are the basic <em>recursive</em> map commands.</p>\n\n<ul>\n<li><code>map</code>  - command to transform the operation of typed keys within <em>ALL</em> modes</li>\n</ul>\n\n<p>You can prepend the first letter of the desired mode to <code>map</code>.</p>\n\n<ul>\n<li><code>nmap</code> - transform the operation of typed keys within <em>Normal</em>\nmode</li>\n<li><code>imap</code> - transform the operations of typed keys within\n<em>Insert</em> mode</li>\n<li><code>vmap</code> - transform the operations of typed keys within\n<em>Visual</em> and <em>Select</em> mode</li>\n</ul>\n\n<p>For example, if I had this within my <code>.vimrc</code>:</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n</pre></td>\n  <td class=\"code\"><pre>&quot; ~/.vimrc\n&quot;\n&quot; Note: double quotes signifies comments\n\nnmap 0 gg\nimap n N\n\n&quot; Time for a little recursive map\nimap d D\nimap D wat\n</pre></td>\n</tr></table>\n</div></div>\n<p>Since <code>0</code> is mapped to <code>gg</code> within <em>Normal</em> mode, I&#39;ll be sent to the\ntop of the file by pressing <code>0</code>.\nMoreover, while in <em>Insert</em> mode, every character <code>n</code> that I type will turn into <code>N</code>.\nLastly, because of the recursive mapping, typing <code>d</code> in <em>Insert</em> mode\nwill return <code>wat</code>. You can think of it as something like: <code>d</code> =&gt; <code>D</code> =&gt;\n<code>wat</code>.</p>\n\n<p>Thankfully, there&#39;s a <em>non-recursive</em> map.</p>\n\n<h3>Non-recursive Map</h3>\n\n<p><em>Non-recursive</em> map commands are signified by adding <code>nore</code> after the\n mode modifier.</p>\n\n<ul>\n<li><code>nnoremap</code> - non-recursive map for <em>Normal</em> mode</li>\n<li><code>inoremap</code> - non-recursive map for <em>Insert</em> mode</li>\n<li><code>vnoremap</code> - non-recursive map for <em>Visual</em> and <em>Select</em> mode</li>\n</ul>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n  <td class=\"code\"><pre>&quot; ~/.vimrc\n\ninoremap c C\ninoremap C nope\n</pre></td>\n</tr></table>\n</div></div>\n<p>Now, in <em>Insert</em> mode, if we type <code>c</code>, we will return <code>C</code>; the transformation of\n<code>c</code> to <code>nope</code> will not occur.</p>\n\n<h2>Enter the .vimrc</h2>\n\n<p>Now that we got the basics out of the way, here is an example of my\n<code>.vimrc</code>.</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n  <td class=\"code\"><pre>&quot; ~/.vimrc\n&quot; *** The Two Hand system ***\n&quot;\n&quot; &lt;Cr&gt; signifies the &quot;return&quot; key\n\ninoremap ;a &lt;Esc&gt;\ninoremap ;d &lt;Esc&gt;:update&lt;Cr&gt;\ninoremap ;f &lt;C-O&gt;:update&lt;Cr&gt;\nnnoremap ;f :update&lt;CR&gt;\n</pre></td>\n</tr></table>\n</div></div>\n<p>I&#39;m using <code>:update</code> here, which is &quot;like <code>:write</code>, but only write when the buffer has been\nmodified.&quot;</p>\n\n<p>Let&#39;s go over these mappings.</p>\n\n<p>The first one, <code>inoremap ;a &lt;Esc&gt;</code> maps the <em>semi-colon</em> and <em>a</em> key\ntogether when in <em>Insert</em> mode. By pressing <code>;</code> and then <code>a</code> immediately afterwards, we mimic\nthe functionality of the <em>Escape</em> key.</p>\n\n<p>The second map, <code>inoremap ;d &lt;Esc&gt;:update&lt;Cr&gt;</code> maps the <em>semi-colon</em> and the <em>d</em> key.\nPressing <code>;</code> and then <code>d</code> immediately afterwards returns the sequence of:</p>\n\n<ul>\n<li>From <em>Insert</em> mode, escape to <em>Normal</em> mode</li>\n<li>Type <code>:</code> to get inside the <em>Command</em> mode, and type the <code>update</code>\ncommand</li>\n<li>Complete the sequence by &quot;hitting&quot; <em>Return</em>, thus saving the file</li>\n</ul>\n\n<p>The third map command, <code>inoremap ;f &lt;C-O&gt;:update&lt;Cr&gt;</code>, allows us to\ntype <code>;</code> and then <code>f</code> to return:</p>\n\n<ul>\n<li>From <em>Insert</em> mode, escape out to <em>Normal</em> with <code>&lt;C-O&gt;</code>, which allows\nus to escape out for <em>ONE</em> command.</li>\n<li>Type <code>:</code> to get inside <em>Command</em> mode, and then type <code>udpate</code>. This is\nour one command for <code>&lt;C-O&gt;</code></li>\n<li>&quot;Hit&quot; the <em>Return</em>, thus saving the file</li>\n<li>We&#39;re back in <em>Insert</em> mode, thanks to <code>&lt;C-O&gt;</code></li>\n</ul>\n\n<p>Finally, the <code>nnoremap ;f :update&lt;CR&gt;</code> mapping means by typing <code>;</code> and\nthen <code>f</code> in <em>Normal</em> mode, it will result in:</p>\n\n<ul>\n<li>Since, we&#39;re already in <em>Normal</em> mode, we get into <em>Command</em> mode by\ntyping <code>:</code></li>\n<li>Type the <code>update</code> command</li>\n<li>&quot;Hit&quot; the <em>Return</em> key, and save the file</li>\n<li>We remain in <em>Normal</em> mode</li>\n</ul>\n\n<p>The snippet below restricts these commands to your right hand.</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n  <td class=\"code\"><pre>&quot; ~/.vimrc\n&quot; *** The Right Hand system ***\n\ninoremap ;l &lt;Esc&gt;\ninoremap ;k &lt;Esc&gt;:update&lt;Cr&gt;\ninoremap ;j &lt;C-O&gt;:update&lt;Cr&gt;\nnnoremap ;j :update&lt;CR&gt;\n</pre></td>\n</tr></table>\n</div></div>\n<p>As you can see, I kept <code>;</code> as a prefix to my map commands. This\nconveniently keeps me at homerow. I&#39;ve played with mapping everything\nwith my right hand, but it just didn&#39;t feel &quot;right&quot; (apologies for the\nbad pun).</p>\n\n<p>Overall, this snippet makes me happy and I believe this will make your\nday as well. If there are some other tricks\nconcerning escaping and saving files, please let me know in the\ncomments! Thanks!</p>\n","summary":"Map commands for quick escapes and saves","illustration":null,"illustration_alt":null,"tags":["vim","workflow"],"shallow":false,"date":"2013-09-11T00:00:00Z"},{"id":"2013/09/06/postgres_ext-adds-rank-and-common-table-expressions","title":"Postgres_ext adds rank and common table expressions","dockyarder":"dan-mcclain","body":"<p>This week, I released <a href=\"https://github.com/dockyard/postgres_ext\">postgres_ext</a> 2.1.0, which includes\nActiveRecord::Relation methods to simplify queries that require the use\nof <a href=\"http://www.postgresql.org/docs/current/static/queries-with.html\">Common Table\nExpressions</a>\n(CTEs) and the <a href=\"http://www.postgresql.org/docs/9.2/static/functions-window.html\"><code>rank()</code> windowing\nfunction</a>.</p>\n\n<h2>Common Table Expressions</h2>\n\n<p>In a sentence, CTEs allow you to define a temporary table to be used in\na larger query. Let&#39;s look at an example:</p>\n<div class=\"highlight SQL \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n  <td class=\"code\"><pre>WITH scores_for_game <span class=\"keyword\">AS</span> (\n<span class=\"class\">SELECT</span> *\n<span class=\"keyword\">FROM</span> scores\n<span class=\"keyword\">WHERE</span> game_id = <span class=\"integer\">1</span>\n)\n<span class=\"class\">SELECT</span> *\n<span class=\"keyword\">FROM</span> scores_for_game\n</pre></td>\n</tr></table>\n</div></div>\n<p>In the above, somewhat arbitrary, example, we create a temporary table\nof <code>scores_for_game</code> which we then select from. CTEs allow you to\norganize your more complex queries, and can be really helpful in certain\ncases.</p>\n\n<p>We can make the same SQL call in ActiveRecord with postgres_ext.</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre><span class=\"constant\">Score</span>.from_cte(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">scores_for_game</span><span class=\"delimiter\">'</span></span>, <span class=\"constant\">Score</span>.where(<span class=\"key\">game_id</span>: <span class=\"integer\">1</span>))\n</pre></td>\n</tr></table>\n</div></div>\n<p>We can also query against the CTE expression by chaining off the\nresulting ActiveRecord::Relation</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n  <td class=\"code\"><pre><span class=\"constant\">Score</span>.from_cte(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">scores_for_game</span><span class=\"delimiter\">'</span></span>,\n  <span class=\"constant\">Score</span>.where(<span class=\"key\">game_id</span>: <span class=\"integer\">1</span>)).where(<span class=\"key\">user_id</span>: <span class=\"integer\">1</span>)\n</pre></td>\n</tr></table>\n</div></div>\n<p>would generate the following:</p>\n<div class=\"highlight SQL \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n  <td class=\"code\"><pre>WITH scores_for_game <span class=\"keyword\">AS</span> (\n<span class=\"class\">SELECT</span> *\n<span class=\"keyword\">FROM</span> scores\n<span class=\"keyword\">WHERE</span> game_id = <span class=\"integer\">1</span>\n)\n<span class=\"class\">SELECT</span> *\n<span class=\"keyword\">FROM</span> scores_for_game\n<span class=\"keyword\">WHERE</span> scores_for_game.user_id = <span class=\"integer\">1</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>You can also include CTEs in your normal queries to join against by\nusing <code>with</code></p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre><span class=\"constant\">Score</span>.with(<span class=\"key\">my_games</span>: <span class=\"constant\">Game</span>.where(<span class=\"key\">id</span>: <span class=\"integer\">1</span>)).joins(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">JOIN my_games ON scores.game_id = my_games.id</span><span class=\"delimiter\">'</span></span>)\n</pre></td>\n</tr></table>\n</div></div>\n<p>will generate the following SQL:</p>\n<div class=\"highlight SQL \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n  <td class=\"code\"><pre>WITH my_games <span class=\"keyword\">AS</span> (\n<span class=\"class\">SELECT</span> games.*\n<span class=\"keyword\">FROM</span> games\n<span class=\"keyword\">WHERE</span> games.id = <span class=\"integer\">1</span>\n)\n<span class=\"class\">SELECT</span> *\n<span class=\"keyword\">FROM</span> scores\n<span class=\"keyword\">JOIN</span> my_games\n<span class=\"keyword\">ON</span> scores.games_id = my_games.id\n</pre></td>\n</tr></table>\n</div></div>\n<h2>Rank</h2>\n\n<p>PostgreSQL provides a <code>rank</code> windowing function, which will take into\naccount ties when ranking results. You would add rank to your\nprojection, like the following example:</p>\n<div class=\"highlight SQL \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n  <td class=\"code\"><pre><span class=\"class\">SELECT</span> scores.*, rank() <span class=\"keyword\">OVER</span> (<span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> scores.points <span class=\"directive\">DESC</span>)\n<span class=\"keyword\">FROM</span> scores\n</pre></td>\n</tr></table>\n</div></div>\n<p>The results set will return ordered by the rank, which is determined the\norder passed into the <code>rank</code>&#39;s <code>OVER</code>. In the above example, the scores\nwould be ranked by their scores descending, so highest score first. If\nthere was a tie at first place between two scores, they would both\nranked 1, and the next result would be ranked <code>3</code>. We can achieve the\nsame in ActiveRecord with postgres_ext:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre><span class=\"constant\">Score</span>.ranked(<span class=\"key\">points</span>: <span class=\"symbol\">:desc</span>)\n<span class=\"comment\"># or</span>\n<span class=\"constant\">Score</span>.ranked(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">points desc</span><span class=\"delimiter\">'</span></span>)\n</pre></td>\n</tr></table>\n</div></div>\n<p>Rank will rank independently of any sort order applied to the query, so\nyou could have your scores ranked by points, but then ordered by their\ncreation time.</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre><span class=\"constant\">Score</span>.ranked(<span class=\"key\">points</span>: <span class=\"symbol\">:desc</span>).order(<span class=\"symbol\">:created_at</span>)\n</pre></td>\n</tr></table>\n</div></div>\n<p>will generate the following query:</p>\n<div class=\"highlight sql \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre><span class=\"class\">SELECT</span> scores.*, rank() <span class=\"keyword\">OVER</span> (<span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> scores.points <span class=\"directive\">DESC</span>)\n<span class=\"keyword\">FROM</span> scores\n<span class=\"keyword\">ORDER</span> <span class=\"keyword\">BY</span> scores.created_at <span class=\"directive\">ASC</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Also, if you apply a sort order to your relation, and want to sort by\nit, you do not have to tell ranked what order you&#39;d like to use, as it\nwill reuse the order. </p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre><span class=\"constant\">Score</span>.ranked.order(<span class=\"key\">points</span>: <span class=\"symbol\">:desc</span>)\n</pre></td>\n</tr></table>\n</div></div>\n<p>One thing to watch out for if you use <code>ranked</code> without an explicit\norder and want to call <a href=\"http://api.rubyonrails.org/classes/ActiveRecord/FinderMethods.html#method-i-first\"><code>first</code></a>\noff your relation, if the results of the\nrelation have yet to be retrieved, the first will use your table&#39;s\nprimary key for an <code>ORDER BY</code> statement on the query. This has already\nbitten us before we discovered the behavior of <code>first</code>. To avoid this\nbehavior in <code>first</code>, use\n<a href=\"http://api.rubyonrails.org/classes/ActiveRecord/FinderMethods.html#method-i-take\"><code>take</code></a>\nwhich does not use any implied order.</p>\n\n<p>We&#39;ve been using CTEs and rank on one of our client projects, and it&#39;s\nalready cleaned up the <code>from_sql</code> queries we were previously\nusing. Let us know if you hit any snags, or have any suggestions on how\nelse we can make complex SQL queries easier to call from ActiveRecord!\nWe only implement the <code>rank</code> windowing function right now, but plan to\nadd the others shortly.</p>\n","summary":"In postgres_ext 2.1, complex queries get much easier","illustration":null,"illustration_alt":null,"tags":["ruby-on-rails","gems","postgres_ext","postgresql"],"shallow":false,"date":"2013-09-06T00:00:00Z"},{"id":"2013/09/04/computed_properties_in_ember_js","title":"Computed Properties in Ember.Js","dockyarder":"alex-navasardyan","body":"<p>Note: Short version of this post is a part of <a href=\"http://emberjs.com/guides/object-model/computed-properties/\">Ember.Js\nGuides</a>.</p>\n\n<h2>What Are Computed Properties?</h2>\n\n<p>In a nutshell, it&#39;s a property whose value is computed the first time\nit&#39;s asked for. You can define the computed property as a function and\nwhen someone asks for it, Ember will automatically invoke the function\nand treat the return value like value of the property.</p>\n\n<p>Here&#39;s a very well-known example:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n</pre></td>\n  <td class=\"code\"><pre>App.Person = Ember.Object.extend({\n  <span class=\"key\">firstName</span>: <span class=\"predefined-constant\">null</span>,\n  <span class=\"key\">lastName</span>: <span class=\"predefined-constant\">null</span>,\n  <span class=\"function\">fullName</span>: <span class=\"keyword\">function</span>() {\n    <span class=\"keyword\">return</span> <span class=\"local-variable\">this</span>.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">firstName</span><span class=\"delimiter\">'</span></span>) + <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\"> </span><span class=\"delimiter\">'</span></span> + <span class=\"local-variable\">this</span>.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">lastName</span><span class=\"delimiter\">'</span></span>);\n  }.property(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">firstName</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">lastName</span><span class=\"delimiter\">'</span></span>)\n});\n\n<span class=\"keyword\">var</span> ironMan = Person.create({\n  <span class=\"key\">firstName</span>: <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">Tony</span><span class=\"delimiter\">&quot;</span></span>,\n  <span class=\"key\">lastName</span>:  <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">Stark</span><span class=\"delimiter\">&quot;</span></span>\n});\n\nironMan.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">fullName</span><span class=\"delimiter\">'</span></span>);\n<span class=\"comment\">// &quot;Tony Stark&quot;</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>The code above defines a computed property <code>fullName</code> by calling\n<code>property()</code> on the function with two dependencies <code>firstName</code> and\n<code>lastName</code> and whenever it gets called, it returns <code>firstName</code> + <code>lastName</code>.</p>\n\n<h2>Inception</h2>\n\n<p>Let&#39;s take a look at another example. Say we want to add a description\ncomputed property to <code>App.Person</code>. It will aggregate other properties like\n<code>fullName</code>, <code>age</code>, <code>country</code>:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n22\n23\n</pre></td>\n  <td class=\"code\"><pre>App.Person = Ember.Object.extend({\n  <span class=\"key\">firstName</span>: <span class=\"predefined-constant\">null</span>,\n  <span class=\"key\">lastName</span>: <span class=\"predefined-constant\">null</span>,\n  <span class=\"key\">age</span>: <span class=\"predefined-constant\">null</span>,\n  <span class=\"key\">country</span>: <span class=\"predefined-constant\">null</span>,\n  <span class=\"function\">fullName</span>: <span class=\"keyword\">function</span>() {\n    <span class=\"keyword\">return</span> <span class=\"local-variable\">this</span>.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">firstName</span><span class=\"delimiter\">'</span></span>) + <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\"> </span><span class=\"delimiter\">'</span></span> + <span class=\"local-variable\">this</span>.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">lastName</span><span class=\"delimiter\">'</span></span>);\n  }.property(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">firstName</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">lastName</span><span class=\"delimiter\">'</span></span>),\n  <span class=\"function\">description</span>: <span class=\"keyword\">function</span>() {\n    <span class=\"keyword\">return</span> <span class=\"local-variable\">this</span>.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">fullName</span><span class=\"delimiter\">'</span></span>) + <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">; Age: </span><span class=\"delimiter\">'</span></span> +\n           <span class=\"local-variable\">this</span>.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">age</span><span class=\"delimiter\">'</span></span>) + <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">; Country: </span><span class=\"delimiter\">'</span></span> +\n           <span class=\"local-variable\">this</span>.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">country</span><span class=\"delimiter\">'</span></span>);\n  }.property(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">fullName</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">age</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">country</span><span class=\"delimiter\">'</span></span>)\n});\n\n<span class=\"keyword\">var</span> captainAmerica = Person.create({\n  <span class=\"key\">fullName</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Steve Rogers</span><span class=\"delimiter\">'</span></span>,\n  <span class=\"key\">age</span>: <span class=\"integer\">80</span>,\n  <span class=\"key\">country</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">USA</span><span class=\"delimiter\">'</span></span>\n});\n\ncaptainAmerica.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">description</span><span class=\"delimiter\">'</span></span>);\n<span class=\"comment\">// &quot;Steve Rogers; Age: 80; Country: USA&quot;</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Notice that you can use an existing computed property as a dependency for a\nnew one.</p>\n\n<h2>Caching</h2>\n\n<p>By default, all computed properties are cached. That means that once you\nrequested the value of computed property (called <code>get</code> on it), it&#39;s going\nto compute and cache its value:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n  <td class=\"code\"><pre>captainAmerica.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">description</span><span class=\"delimiter\">'</span></span>);\n<span class=\"comment\">// computes the value and returns &quot;Steve Rogers; Age: 80; Country: USA&quot;</span>\ncaptainAmerica.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">description</span><span class=\"delimiter\">'</span></span>);\n<span class=\"comment\">// returns cached &quot;Steve Rogers; Age: 80; Country: USA&quot;</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>A computed property gets recomputed when any of the properties it depends on change:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n  <td class=\"code\"><pre>captainAmerica.set(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">country</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">United States of America</span><span class=\"delimiter\">'</span></span>);\ncaptainAmerica.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">description</span><span class=\"delimiter\">'</span></span>); <span class=\"comment\">// computes the value and returns&quot;Steve Rogers; Age: 80; Country: United States of America&quot;</span>\n</pre></td>\n</tr></table>\n</div></div>\n<h2>Read Only</h2>\n\n<p>This property is <code>false</code> by default. You won&#39;t be able to set the value of\nthe computed property if you call <code>readOnly</code> on it:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n  <td class=\"code\"><pre>App.Person = Ember.Object.extend({\n  <span class=\"function\">description</span>: <span class=\"keyword\">function</span>() {\n    <span class=\"comment\">// implementation</span>\n  }.property(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">fullName</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">age</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">country</span><span class=\"delimiter\">'</span></span>).readOnly()\n});\n\n<span class=\"keyword\">var</span> captainAmerica = Person.create();\ncaptainAmerica.set(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">description</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">hero</span><span class=\"delimiter\">'</span></span>);\n<span class=\"comment\">// &quot;Cannot Set: description on: &lt;(unknown mixin):ember133&gt;&quot;</span>\n</pre></td>\n</tr></table>\n</div></div>\n<h2>Alternative syntax for defining Computed Properties</h2>\n\n<p>This code:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n  <td class=\"code\"><pre>App.Person = Ember.Object.extend({\n  <span class=\"key\">firstName</span>: <span class=\"predefined-constant\">null</span>,\n  <span class=\"key\">lastName</span>: <span class=\"predefined-constant\">null</span>,\n  <span class=\"key\">fullName</span>: Ember.computed(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">firstName</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">lastName</span><span class=\"delimiter\">'</span></span>, <span class=\"keyword\">function</span>() {\n    <span class=\"keyword\">return</span> <span class=\"local-variable\">this</span>.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">firstName</span><span class=\"delimiter\">'</span></span>) + <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\"> </span><span class=\"delimiter\">'</span></span> + <span class=\"local-variable\">this</span>.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">lastName</span><span class=\"delimiter\">'</span></span>);\n  })\n});\n</pre></td>\n</tr></table>\n</div></div>\n<p>does exactly the same thing as this code:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n  <td class=\"code\"><pre>App.Person = Ember.Object.extend({\n  <span class=\"key\">firstName</span>: <span class=\"predefined-constant\">null</span>,\n  <span class=\"key\">lastName</span>: <span class=\"predefined-constant\">null</span>,\n  <span class=\"function\">fullName</span>: <span class=\"keyword\">function</span>() {\n    <span class=\"keyword\">return</span> <span class=\"local-variable\">this</span>.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">firstName</span><span class=\"delimiter\">'</span></span>) + <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\"> </span><span class=\"delimiter\">'</span></span> + <span class=\"local-variable\">this</span>.get(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">lastName</span><span class=\"delimiter\">'</span></span>);\n  }.property(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">firstName</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">lastName</span><span class=\"delimiter\">'</span></span>)\n});\n</pre></td>\n</tr></table>\n</div></div>\n<p>with the difference that the first example works if you disable <a href=\"http://emberjs.com/api/#property_EXTEND_PROTOTYPES\">Ember&#39;s\nprototype extension</a>.</p>\n\n<h2>How are Computed Properties different from Observers and Bindings?</h2>\n\n<p>The concept of <code>observer</code> is pretty simple. You have something that you want to track the change of. You add an observer to it, so next time it changes, a certain event is going to be fired notifying you that that something has changed.</p>\n\n<p>There are two types of observers: <code>before</code> (observesBefore) and <code>after</code> (observes). When observer event (callback) is fired, it&#39;s called with two arguments: <code>obj</code> and <code>keyName</code>. It doesn&#39;t pass the value of the property to the event (callback). The reason is because the property you&#39;re watching might be lazily computed.</p>\n\n<p><code>Observers</code> are used by CP internally to invalidate CP&#39;s cache when its dependency keys were changed. Observers (like CPs) don&#39;t use runloop magic (fired &quot;right away&quot;).</p>\n\n<p><code>Observers</code> are not going to fire if the value is unchanged from before (changing existing <code>lastName</code> from <code>Stark</code> to <code>Stark</code> won&#39;t trigger the observer callback).</p>\n\n<p><code>Bindings</code> is an internal concept that is not meant to be used. I&#39;m not saying you can&#39;t, it&#39;s better not to. Typically, you don&#39;t need to use it in your application, using CP is plenty enough.</p>\n\n<p><code>Bindings</code> are meant to keep a property of two objects in sync. Their update (sync) happens through run loop, so there might be a period of time when two objects have the same property with different values and only by the end of a <code>sync</code> queue those values are going to be the same.</p>\n\n<p>For example, in Ember those two objects are controller and view (any time a controller&#39;s property changes, view&#39;s property changes as well).</p>\n\n<h2>What do I use and when?</h2>\n\n<p><strong>Computed properties</strong> are good for combining other properties or doing\ntransformations on the property.</p>\n\n<p><strong>Observers</strong> are good for tracking changes of a property and reacting to\nthem. Observers should contain behaviour that reacts to the change.</p>\n\n<p><strong>Bindings</strong> are used to make sure that the properties from the different objects\nare in sync. They are rarely used and most of the times can be replaced\nwith computed properties.</p>\n\n<h2>Futher reading</h2>\n\n<p>You can read more about Computed Properties and Ember&#39;s Object Model\nover\n<a href=\"http://emberjs.com/guides/object-model/computed-properties/\">here</a>.\nHappy Coding!</p>\n","summary":"Computed Properties magic explained","illustration":null,"illustration_alt":null,"tags":["ember"],"shallow":false,"date":"2013-09-04T00:00:00Z"},{"id":"announcement/2013/09/04/alex-navasardyan-is-a-dockyarder","title":"Alex Navasardyan is a DockYarder!","dockyarder":"brian-cardarella","body":"<p><img src=\"/images/alex-navasardyan.png\" alt=\"Alex\"></p>\n\n<p>Alex has been friend for a while now, I got to know him when I started\nattending the <a href=\"www.meetup.com/Boston-Ember-js/\">Boston Ember meetup</a>.\nAlex has been a very active in the Ember.js community and helped with\nthe 1.0 release last week as well as\n<a href=\"http://emberjs.com/list-view/\">Ember.ListView</a></p>\n\n<p>We&#39;re very dedicated to the future of Ember.js and with Alex on board\nwe&#39;re well on our way to building out one of the best teams around.</p>\n\n<p><a href=\"http://twitter.com/twokul\">Follow Alex on Twitter</a></p>\n","summary":"Our first fulltime Ember.js dev","illustration":null,"illustration_alt":null,"tags":["announcement","office"],"shallow":false,"date":"2013-09-04T00:00:00Z"},{"id":"2013/08/23/announcing-postgres_ext-version-1-0-and-2-0","title":"Announcing Postgres_ext version 1.0 and 2.0","dockyarder":"dan-mcclain","body":"<p>Two versions of PostgresExt have been released today.</p>\n\n<h2>1.0.0 (and the 1-0-stable branch)</h2>\n\n<p>The <a href=\"https://github.com/dockyard/postgres_ext/tree/v1.0.0\">1.0.0</a>\n version is the first production release of PostgresExt. It\nsupports Rails 3.2.x, adding in both data type and advanced querying\nsupport for ActiveRecord and Arel.</p>\n\n<h2>2.0.0</h2>\n\n<p>I have also released version <a href=\"https://github.com/dockyard/postgres_ext/tree/v2.0.0\">2.0.0</a>,\nwhich supports ActiveRecord and Arel 4.0.x. Most of the 1.0.0 code\nis gone from 2.0.0, since Rails 4.0.0 supports all the data types\nthat PostgresExt added to Rails 3.2.x.</p>\n\n<h2>The Future</h2>\n\n<p>I&#39;m focusing on Rails 4.0.0 for all future features of PostgresExt. I\nwill gladly pull in additional features for 1.0.0, but Rails 3.2.x is no\nlonger the primary focus of PostgresExt. Maintenance on 1.0.0 will be\nminimal, since <a href=\"http://weblog.rubyonrails.org/2013/2/24/maintenance-policy-for-ruby-on-rails/\">Rails 3.2.x will no longer be receiving releases for bug\nfixes</a>,\nbut pull requests for bug fixes would be graciously accepted.</p>\n","summary":"Today, I released not 1 but 2 versions of PostgresExt","illustration":null,"illustration_alt":null,"tags":["ruby-on-rails","gems","postgres_ext","postgresql"],"shallow":false,"date":"2013-08-23T00:00:00Z"},{"id":"2013/08/20/design-patterns-observer-pattern","title":"Design Patterns: The Observer Pattern","dockyarder":"doug-yun","body":"<p>Note: We won&#39;t be going over the Ruby\nmodule\n<a href=\"http://ruby-doc.org/stdlib-2.0/libdoc/observer/rdoc/Observable.html\"><em>Observable</em></a>.\nInstead, we&#39;ll building out the pattern ourselves.</p>\n\n<h2>Your First Day at the NSA</h2>\n\n<p>Welcome to the National Security Agency, <a href=\"http://www.forodecostarica.com/attachments/201136d1337091462-los-gringos-se-burlan-de-nuestro-pais-agent-smith.jpg\">Agent\nSmith</a>.\nYou have quite an impressive background, and we believe your &quot;go-getter&quot;\nattitude will instill a new kind of vigor within the organization.</p>\n\n<p>Your cubicle is down to the left... here are some NDAs for\nyou to fill out. I&#39;ll swing by your desk in the afternoon and pick them\nup from you later. Oh, and before I forget, here is your first assignment.</p>\n\n<p>Go get &#39;em, tiger!</p>\n\n<h2>The First Assignment</h2>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n22\n23\n24\n25\n26\n27\n28\n29\n</pre></td>\n  <td class=\"code\"><pre>Agent Smith\nSpook First Class\n[REDACTED]\nNSA                                                     08-20-[REDACTED]\n\n                     Operation [REDACTED] Observers\n\nWelcome, Agent Smith:\n\nBluntly, we'd like to track everyone's emails.\n\nAttached are two documents.\n\nThe first document will show you the basic structure of a typical email,\nand the second document will provide you a basic profile of a suspicious\nperson.\n\nIf there are any questions, please reach me at [REDACTED].\n\nBest of luck,\n\n\n\n\n\nAgent [REDACTED]\n[REDACTED]\n[REDACTED]\nNSA\n</pre></td>\n</tr></table>\n</div></div><div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\"># Document 1:</span>\n<span class=\"comment\"># Basic structure of an email</span>\n\n<span class=\"keyword\">module</span> <span class=\"class\">Email</span>\n  extend <span class=\"predefined-constant\">self</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">send</span>(subject, sender, receiver)\n    puts <span class=\"string\"><span class=\"delimiter\">%Q[</span><span class=\"content\">\n      Subject: </span><span class=\"inline\"><span class=\"inline-delimiter\">#{</span>subject<span class=\"inline-delimiter\">}</span></span><span class=\"content\">\n      From:    </span><span class=\"inline\"><span class=\"inline-delimiter\">#{</span>sender<span class=\"inline-delimiter\">}</span></span><span class=\"content\">@example.com\n      To:      </span><span class=\"inline\"><span class=\"inline-delimiter\">#{</span>receiver<span class=\"inline-delimiter\">}</span></span><span class=\"content\">@example.com\n      Date:    </span><span class=\"inline\"><span class=\"inline-delimiter\">#{</span><span class=\"constant\">Time</span>.now.asctime<span class=\"inline-delimiter\">}</span></span><span class=\"content\">\n    </span><span class=\"delimiter\">]</span></span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div><div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\"># Document 2:</span>\n<span class=\"comment\"># Characteristics of a suspicious person</span>\n\n<span class=\"keyword\">class</span> <span class=\"class\">Person</span>\n  include <span class=\"constant\">Email</span>\n  attr_reader <span class=\"symbol\">:name</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">initialize</span>(name)\n    <span class=\"instance-variable\">@name</span> = name\n  <span class=\"keyword\">end</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">send_email</span>(subject, receiver)\n    <span class=\"constant\">Email</span>.send(subject, name, receiver)\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>As we look through the <code>Email</code> module, we see that it contains\n<code>Email.send</code> which takes three arguments: <code>subject</code>, <code>sender</code>, and\n<code>receiver</code>.</p>\n\n<p>Gazing at the suspicious <code>Person</code> class, we see that it includes the\n<code>Email</code> module. <code>Person#send_email</code> takes two parameters: a subject\nand a receiver. <code>Person#name</code> will stand in as the sender of the email.</p>\n\n<p>Hypothetically, let&#39;s see how a suspicious person would send an email:</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n  <td class=\"code\"><pre>bill = Person.new 'Bill'\nbill.send_email 'Fishing Trip', 'Fred'\n  # =&gt;\n      Subject: Fishing Trip\n      From:    Bill@example.com\n      To:      Fred@example.com\n      Date:    Wed Aug 16 20:35:09 2006\n</pre></td>\n</tr></table>\n</div></div>\n<p>Hmm... as you sit in your cubicle, you ponder the numerous possible ways of\ntracking emails. You won&#39;t need anything too complicated, just\nsomething to kick off a notification once an email has been sent.</p>\n\n<p>Volia! You realize you can use the <em>Observer</em> pattern!</p>\n\n<h2>The Subject and its Observers</h2>\n\n<p>First, let&#39;s start off by creating two <em>observer</em> classes,\n<code>Alert</code> and <code>Agent</code> classes.</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">class</span> <span class=\"class\">Alert</span>\n  <span class=\"keyword\">def</span> <span class=\"function\">gotcha</span>(person)\n    puts <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">!!! ALERT: </span><span class=\"inline\"><span class=\"inline-delimiter\">#{</span>person.name.upcase<span class=\"inline-delimiter\">}</span></span><span class=\"content\"> SENT AN EMAIL !!!</span><span class=\"delimiter\">&quot;</span></span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n\n<span class=\"keyword\">class</span> <span class=\"class\">Agent</span>\n  <span class=\"keyword\">def</span> <span class=\"function\">gotcha</span>(person)\n    puts <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">!!! TIME TO DETAIN </span><span class=\"inline\"><span class=\"inline-delimiter\">#{</span>person.name.upcase<span class=\"inline-delimiter\">}</span></span><span class=\"content\"> !!!</span><span class=\"delimiter\">&quot;</span></span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Next, let&#39;s create a <code>Subject</code> module.</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">module</span> <span class=\"class\">Subject</span>\n  attr_reader <span class=\"symbol\">:observers</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">initialize</span>\n    <span class=\"instance-variable\">@observers</span> = []\n  <span class=\"keyword\">end</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">add_observer</span>(*observers)\n    observers.each { |observer| <span class=\"instance-variable\">@observers</span> &lt;&lt; observer }\n  <span class=\"keyword\">end</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">delete_observer</span>(*observers)\n    observers.each { |observer| <span class=\"instance-variable\">@observers</span>.delete(observer) }\n  <span class=\"keyword\">end</span>\n\n  private\n\n  <span class=\"keyword\">def</span> <span class=\"function\">notify_observers</span>\n    observers.each { |observer| observer.gotcha(<span class=\"predefined-constant\">self</span>) }\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Here within the <code>Subject#initialize</code>, we create an empty array which\nwill contain a list of <em>observers</em>. <code>Subject#add_observer</code> simply pushes\nour desired <em>observers</em> into the array.</p>\n\n<p>Finally, we can alter the suspicious <code>Person</code> class, which will act as\nthe <em>subject</em> class. Let&#39;s include the <code>Subject</code> module now.</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">class</span> <span class=\"class\">Person</span>\n  include <span class=\"constant\">Email</span>, <span class=\"constant\">Subject</span>\n  attr_reader <span class=\"symbol\">:name</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">initialize</span>(name)\n    <span class=\"comment\"># 'super' requires a parentheses because we're calling</span>\n    <span class=\"comment\"># super on the superclass, 'Subject'</span>\n    <span class=\"keyword\">super</span>()\n    <span class=\"instance-variable\">@name</span> = name\n  <span class=\"keyword\">end</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">send_email</span>(subject, receiver)\n    <span class=\"constant\">Email</span>.send(subject, name, receiver)\n    notify_observers\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p><code>Subject#notify_observers</code> calls <code>#gotcha</code> on each <em>observer</em>, which\ninforms each <em>observer</em> that <code>Person#send_email</code> has been kicked off.</p>\n\n<p>Now let&#39;s give it a whirl...</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n</pre></td>\n  <td class=\"code\"><pre>alert = <span class=\"constant\">Alert</span>.new\nagent = <span class=\"constant\">Agent</span>.new\n\nbill = <span class=\"constant\">Person</span>.new <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Bill</span><span class=\"delimiter\">'</span></span>\n\nbill.add_observer alert, agent   <span class=\"comment\"># Bill now has two observers watching him</span>\n\nbill.send_email <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Fishing Trip</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Fred</span><span class=\"delimiter\">'</span></span>\n  <span class=\"comment\"># =&gt;</span>\n      <span class=\"key\">Subject</span>: <span class=\"constant\">Fishing</span> <span class=\"constant\">Trip</span>\n      <span class=\"key\">From</span>:    <span class=\"constant\">Bill</span><span class=\"instance-variable\">@example</span>.com\n      <span class=\"key\">To</span>:      <span class=\"constant\">Fred</span><span class=\"instance-variable\">@example</span>.com\n      <span class=\"key\">Date</span>:    <span class=\"constant\">Wed</span> <span class=\"constant\">Aug</span> <span class=\"integer\">16</span> <span class=\"integer\">20</span>:<span class=\"integer\">35</span>:<span class=\"integer\">09</span> <span class=\"integer\">2006</span>\n\n!!! <span class=\"key\">ALERT</span>: <span class=\"constant\">BILL</span> <span class=\"constant\">SENT</span> <span class=\"constant\">AN</span> <span class=\"constant\">EMAIL</span> !!!\n!!! <span class=\"constant\">TIME</span> <span class=\"constant\">TO</span> <span class=\"constant\">DETAIN</span> <span class=\"constant\">BILL</span> !!!\n</pre></td>\n</tr></table>\n</div></div>\n<p>Perfect, it works! Now we can start protecting our freedom!</p>\n\n<h2>Discussion</h2>\n\n<p>In our example above, we have two <em>observers</em>, the <code>Alert</code> and <code>Agent</code>\nclasses, and a <em>subject</em>, <code>Person</code>. By creating the <code>Subject</code> module,\nany instance of <code>Person</code> now informs and updates any <em>observer</em> through\n<code>#notify_observers</code>, ultimately removing any implicit coupling from <code>Alert</code> and\n<code>Agent</code>.</p>\n\n<p>There are a few similarities between the <em>Observer</em> and\n<a href=\"http://reefpoints.dockyard.com/2013/07/25/design-patterns-strategy-pattern.html\"><em>Strategy</em></a>\npatterns. Both patterns employ an object (the Observer&#39;s <em>subject</em> and\nthe Strategy&#39;s <em>context</em>) that makes calls to another object (the\nObserver&#39;s <em>observer</em> or Strategy&#39;s <em>strategy</em>). The difference between\nthe two patterns is the purpose and use case. The <em>Strategy</em> pattern\nrelies on the <em>strategy</em> to do the work, while the <em>Observer</em> pattern\ninforms the <em>observers</em> of what is going on with the <em>subject</em>.</p>\n\n<p>Hope you enjoyed this short example, thanks for reading!</p>\n","summary":"NSA Edition: Exploring design patterns and their use cases","illustration":null,"illustration_alt":null,"tags":["design-patterns","ruby"],"shallow":false,"date":"2013-08-20T00:00:00Z"},{"id":"2013/08/05/testing-context-validations","title":"Testing Context Validations","dockyarder":"dan-mcclain","body":"<h2>Quick Refresher on ContextValidation</h2>\n\n<p>A few months ago, Brian released the <a href=\"http://reefpoints.dockyard.com/ruby/2013/05/09/context-validations.html\">ContextValidations gem</a>.\nContextValidations moves your model validations to the controller,\nallowing you to vary your validations by context, rather than relying on\nconditional validations.</p>\n\n<h2>Let&#39;s validate our user</h2>\n\n<p>We have a user model, that requires a password and a username when a\nuser signs up. They can change their username and password, but if they\ncan leave the password blank when updating their account, it will retain\nthe old password. Whenever they enter a password , it must be 9\ncharacters or greater. We&#39;re going to ignore the actual implementation\nof the password saving scheme and password confirmation in this example.\nAlso, this example ignores setting up the test helper for <a href=\"https://github.com/bcardarella/valid_attribute\">valid_attribute</a>\nand MiniTest::Spec.</p>\n\n<h3>Implementing the Tests and Validations in the Model</h3>\n\n<p>To test the above requirements model validations, we&#39;d do the following:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre></td>\n  <td class=\"code\"><pre>describe <span class=\"constant\">OldUser</span> <span class=\"keyword\">do</span>\n  describe <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">new user</span><span class=\"delimiter\">'</span></span> <span class=\"keyword\">do</span>\n    subject { <span class=\"constant\">OldUser</span>.new <span class=\"key\">password</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">password_to_confirm</span><span class=\"delimiter\">'</span></span> }\n\n    it { must have_valid(<span class=\"symbol\">:username</span>).when(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">bob</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">test1234</span><span class=\"delimiter\">'</span></span>) }\n    it { wont have_valid(<span class=\"symbol\">:username</span>).when(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"delimiter\">'</span></span>, <span class=\"predefined-constant\">nil</span>) }\n    it { must have_valid(<span class=\"symbol\">:password</span>).when(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">validpassword1234</span><span class=\"delimiter\">'</span></span>) }\n    it { wont have_valid(<span class=\"symbol\">:password</span>).when(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"delimiter\">'</span></span>, <span class=\"predefined-constant\">nil</span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">tooshort</span><span class=\"delimiter\">'</span></span>) }\n  <span class=\"keyword\">end</span>\n\n  describe <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">existing user</span><span class=\"delimiter\">'</span></span> <span class=\"keyword\">do</span>\n    subject { old_users(<span class=\"symbol\">:example</span>) }\n\n    it { must have_valid(<span class=\"symbol\">:username</span>).when(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">bob</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">test1234</span><span class=\"delimiter\">'</span></span>) }\n    it { wont have_valid(<span class=\"symbol\">:username</span>).when(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"delimiter\">'</span></span>, <span class=\"predefined-constant\">nil</span>) }\n    it { must have_valid(<span class=\"symbol\">:password</span>).when(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"delimiter\">'</span></span>, <span class=\"predefined-constant\">nil</span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">validpassword1234</span><span class=\"delimiter\">'</span></span>) }\n    it { wont have_valid(<span class=\"symbol\">:password</span>).when(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">tooshort</span><span class=\"delimiter\">'</span></span>) }\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>And here is the implementation of the model:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">class</span> <span class=\"class\">OldUser</span> &lt; <span class=\"constant\">ActiveRecord</span>::<span class=\"constant\">Base</span>\n  attr_accessor <span class=\"symbol\">:password</span>\n  validates <span class=\"symbol\">:username</span>, <span class=\"key\">presence</span>: <span class=\"predefined-constant\">true</span>\n  validates <span class=\"symbol\">:password</span>, <span class=\"key\">presence</span>: <span class=\"predefined-constant\">true</span>, <span class=\"key\">if</span>: <span class=\"symbol\">:new_record?</span>\n  validates <span class=\"symbol\">:password</span>, <span class=\"key\">length</span>: { <span class=\"key\">minimum</span>: <span class=\"integer\">9</span> }, <span class=\"key\">allow_blank</span>: <span class=\"predefined-constant\">true</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<h3>Implementing the Tests and Validations in the Controller with ContextValidations</h3>\n\n<p>We&#39;ve been using ContextValidations with our client work since its\nrelease and realized we could unit test the controller to test the\nvalidations.</p>\n\n<p>Our unit tests for the controller are here:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n</pre></td>\n  <td class=\"code\"><pre>describe <span class=\"constant\">UsersController</span> <span class=\"keyword\">do</span>\n  describe <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">#create</span><span class=\"delimiter\">'</span></span> <span class=\"keyword\">do</span>\n    subject { <span class=\"constant\">User</span>.new(<span class=\"key\">validations</span>: validations_for(<span class=\"symbol\">:create</span>)) }\n\n    it { must have_valid(<span class=\"symbol\">:username</span>).when(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">bob</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">test1234</span><span class=\"delimiter\">'</span></span>) }\n    it { wont have_valid(<span class=\"symbol\">:username</span>).when(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"delimiter\">'</span></span>, <span class=\"predefined-constant\">nil</span>) }\n    it { must have_valid(<span class=\"symbol\">:password</span>).when(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">validpassword1234</span><span class=\"delimiter\">'</span></span>) }\n    it { wont have_valid(<span class=\"symbol\">:password</span>).when(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"delimiter\">'</span></span>, <span class=\"predefined-constant\">nil</span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">tooshort</span><span class=\"delimiter\">'</span></span>) }\n  <span class=\"keyword\">end</span>\n\n  describe <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">#update</span><span class=\"delimiter\">'</span></span> <span class=\"keyword\">do</span>\n    subject { <span class=\"constant\">User</span>.new(<span class=\"key\">validations</span>: validations_for(<span class=\"symbol\">:update</span>)) }\n\n    it { must have_valid(<span class=\"symbol\">:username</span>).when(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">bob</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">test1234</span><span class=\"delimiter\">'</span></span>) }\n    it { wont have_valid(<span class=\"symbol\">:username</span>).when(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"delimiter\">'</span></span>, <span class=\"predefined-constant\">nil</span>) }\n    it { must have_valid(<span class=\"symbol\">:password</span>).when(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"delimiter\">'</span></span>, <span class=\"predefined-constant\">nil</span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">validpassword1234</span><span class=\"delimiter\">'</span></span>) }\n    it { wont have_valid(<span class=\"symbol\">:password</span>).when(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">tooshort</span><span class=\"delimiter\">'</span></span>) }\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Note the use of <code>validations_for</code>. It is a MiniTest\nhelper method defined by ContextValidations, which looks up the name\nof the controller from the describe block, creates an instance of it,\nand retrieves the validations for the context passed in. This prevents\nyou from needing to create your own instance and calling <code>validations</code>\non it. The resulting tests end up looking very similar to what your\nmodel tests would look like.</p>\n\n<p>Our model implementation is very light:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">class</span> <span class=\"class\">User</span> &lt; <span class=\"constant\">ActiveRecord</span>::<span class=\"constant\">Base</span>\n  include <span class=\"constant\">ContextValidations</span>::<span class=\"constant\">Model</span>\n\n  attr_accessor <span class=\"symbol\">:password</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>And our validations are defined in the controller:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">class</span> <span class=\"class\">UsersController</span> &lt; <span class=\"constant\">ApplicationController</span>\n  include <span class=\"constant\">ContextValidations</span>::<span class=\"constant\">Controller</span>\n\n  private\n\n  <span class=\"keyword\">def</span> <span class=\"function\">base_validations</span>\n    validates <span class=\"symbol\">:username</span>, <span class=\"key\">presence</span>: <span class=\"predefined-constant\">true</span>\n    validates <span class=\"symbol\">:password</span>, <span class=\"key\">length</span>: { <span class=\"key\">minimum</span>: <span class=\"integer\">9</span> }, <span class=\"key\">allow_blank</span>: <span class=\"predefined-constant\">true</span>\n  <span class=\"keyword\">end</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">create_validations</span>\n    validates <span class=\"symbol\">:password</span>, <span class=\"key\">presence</span>: <span class=\"predefined-constant\">true</span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>All of the examples are part of <a href=\"https://github.com/dockyard/testing_context_validations\">this repository</a>.</p>\n\n<h2>Wrapping it up</h2>\n\n<p>As you can see, writing the validation tests for the controller are\nalmost identical to writing them for the model. There are a few\ndifferences in setting up the subject for the tests, but the only major\ndifference is that you are testing the controller instead of the model.\nIf you have any feedback on the tests we came up with, feel free to let\nus know!</p>\n","summary":"We moved your model validations to your controller, now we're going to help you test them","illustration":null,"illustration_alt":null,"tags":["ruby-on-rails","gems","context-validation","testing"],"shallow":false,"date":"2013-08-05T00:00:00Z"},{"id":"2013/07/29/putting-things-next-to-things-with-susy","title":"Putting things next to things with Susy","dockyarder":"angelo-simeoni","body":"<p>I&#39;ve often lamented that one of the most challenging things to do on the front end is to put things next to other things. Things on top of things? Easy. Things by themselves? Piece of cake. This thing next to that thing? Things just got complicated.</p>\n\n<p>Should you roll your own layout, coming up with and refining conventions, browser testing to make sure everything still works? Do you rely on a front-end framework and all of the cluttered, confusing markup that comes going from that route? </p>\n\n<p>What about something different? This is where Susy saves the day.</p>\n\n<h2>The little framework that can</h2>\n\n<p>Susy is a grid framework for Compass. With Susy, you simply define your grid settings and start laying things out. If you want to come back and adjust your grid later, that&#39;s totally fine. Susy will recalculate all your layouts.</p>\n<div class=\"highlight css \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n  <td class=\"code\"><pre><span class=\"error\">$</span><span class=\"tag\">total-columns</span>: <span class=\"float\">12</span>\n<span class=\"error\">$</span><span class=\"tag\">column-width</span>: <span class=\"float\">4em</span>\n<span class=\"error\">$</span><span class=\"tag\">gutter-width</span>: <span class=\"float\">1em</span>\n<span class=\"error\">$</span><span class=\"tag\">grid-padding</span>: <span class=\"error\">$</span><span class=\"tag\">gutter-width</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Two main mixins do the bulk of the lifting. These are &#39;container&#39; and &#39;span-columns&#39;. Container is used to define the container of the grid. Span-columns is applied to elements within a container context. The syntax is easy.</p>\n<div class=\"highlight css \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n  <td class=\"code\"><pre><span class=\"class\">.page</span>\n  +<span class=\"tag\">container</span>\n  <span class=\"tag\">article</span>\n    +<span class=\"error\">s</span><span class=\"error\">p</span><span class=\"error\">a</span><span class=\"error\">n</span><span class=\"error\">-</span><span class=\"error\">c</span><span class=\"error\">o</span><span class=\"error\">l</span><span class=\"error\">u</span><span class=\"error\">m</span><span class=\"error\">n</span><span class=\"error\">s</span>(<span class=\"float\">8</span>, <span class=\"float\">12</span>)\n  <span class=\"tag\">aside</span>\n    +<span class=\"error\">s</span><span class=\"error\">p</span><span class=\"error\">a</span><span class=\"error\">n</span><span class=\"error\">-</span><span class=\"error\">c</span><span class=\"error\">o</span><span class=\"error\">l</span><span class=\"error\">u</span><span class=\"error\">m</span><span class=\"error\">n</span><span class=\"error\">s</span>(<span class=\"float\">4</span> <span class=\"tag\">omega</span>, <span class=\"float\">12</span>)\n</pre></td>\n</tr></table>\n</div></div>\n<p>This makes &#39;.page&#39; the grid container. The article takes up eight of twelve columns, the aside the final (omega) four of twelve columns.</p>\n\n<p>Susy really shines at figuring stuff out on its own. Say I wanted to have two columns of different widths with different padding for each column, both nested within the article above?</p>\n<div class=\"highlight css \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n  <td class=\"code\"><pre><span class=\"tag\">article</span>\n  +<span class=\"error\">s</span><span class=\"error\">p</span><span class=\"error\">a</span><span class=\"error\">n</span><span class=\"error\">-</span><span class=\"error\">c</span><span class=\"error\">o</span><span class=\"error\">l</span><span class=\"error\">u</span><span class=\"error\">m</span><span class=\"error\">n</span><span class=\"error\">s</span>(<span class=\"float\">8</span>, <span class=\"float\">12</span>)\n  <span class=\"class\">.one</span>\n    +<span class=\"error\">s</span><span class=\"error\">p</span><span class=\"error\">a</span><span class=\"error\">n</span><span class=\"error\">-</span><span class=\"error\">c</span><span class=\"error\">o</span><span class=\"error\">l</span><span class=\"error\">u</span><span class=\"error\">m</span><span class=\"error\">n</span><span class=\"error\">s</span>(<span class=\"float\">3</span>, <span class=\"float\">7</span>, <span class=\"float\">1em</span>)\n  <span class=\"class\">.two</span>\n    +<span class=\"error\">s</span><span class=\"error\">p</span><span class=\"error\">a</span><span class=\"error\">n</span><span class=\"error\">-</span><span class=\"error\">c</span><span class=\"error\">o</span><span class=\"error\">l</span><span class=\"error\">u</span><span class=\"error\">m</span><span class=\"error\">n</span><span class=\"error\">s</span>(<span class=\"float\">4</span> <span class=\"tag\">omega</span>, <span class=\"float\">7</span>, <span class=\"class\">.5em</span>)\n</pre></td>\n</tr></table>\n</div></div>\n<p>Where did the seven columns come from? Susy doesn&#39;t care. They are within the context of the article. Susy will figure out the math and make seven columns. The third option is the column padding. Susy will do the math there too. Thanks, Susy!</p>\n\n<h2>Susy, breakpoints and you</h2>\n\n<p>Susy is made to build responsive grids. The default layout is called &#39;magic&#39;. It&#39;s a fixed width layout that fluidly scales if the viewport is smaller than the width of the grid. You can also opt for a fully fluid layout, or a static layout for pixel precision.</p>\n\n<p>Any of these layouts can be further modified with the +at-breakpoint mixin. This mixin makes accessing media queries within the context of our grid simple and straightforward.</p>\n<div class=\"highlight css \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre><span class=\"class\">.one</span>, <span class=\"class\">.two</span>\n  +<span class=\"error\">a</span><span class=\"error\">t</span><span class=\"error\">-</span><span class=\"error\">b</span><span class=\"error\">r</span><span class=\"error\">e</span><span class=\"error\">a</span><span class=\"error\">k</span><span class=\"error\">p</span><span class=\"error\">o</span><span class=\"error\">i</span><span class=\"error\">n</span><span class=\"error\">t</span>(<span class=\"float\">30em</span>)\n    +<span class=\"error\">s</span><span class=\"error\">p</span><span class=\"error\">a</span><span class=\"error\">n</span><span class=\"error\">-</span><span class=\"error\">c</span><span class=\"error\">o</span><span class=\"error\">l</span><span class=\"error\">u</span><span class=\"error\">m</span><span class=\"error\">n</span><span class=\"error\">s</span>(<span class=\"float\">7</span>, <span class=\"float\">7</span>, <span class=\"class\">.5em</span>)\n</pre></td>\n</tr></table>\n</div></div>\n<h2>\u0010The one true grid</h2>\n\n<p>Everything Susy does is within context of a grid. You can  define multiple grids, and nest these grids inside one another. You can define abritrary values within any context. Many useful features, such as push, pull, and bleed are there to make life even easier.</p>\n\n<p>With all of this power comes some responsiblity. As with any tool, Susy just does what you ask it to do. It cannot explain  why your layout isn&#39;t working. If you try to put too many things inside a grid, your layout will break. I&#39;d recommend taking Susy for a spin. It&#39;s really easy to <a href=\"http://susy.oddbird.net/guides/getting-started/\">get started</a>.</p>\n","summary":"The little grid framework that can","illustration":null,"illustration_alt":null,"tags":["design"],"shallow":false,"date":"2013-07-29T00:00:00Z"},{"id":"2013/07/25/design-patterns-strategy-pattern","title":"Design Patterns: The Strategy Pattern","dockyarder":"doug-yun","body":"<h2>Walls are sooooo last week...</h2>\n\n<p>In our last post, we discussed the <em><a href=\"http://reefpoints.dockyard.com/ruby/2013/07/10/design-patterns-template-pattern.html\">Template\nMethod</a></em>\npattern and its benefits, finding it most useful when we need to simply shape\nbehavior of <em>subclasses</em>. However, due to the reliance on <em>inheritance</em>,\nthere are a couple of limitations to this pattern:</p>\n\n<ul>\n<li>Subclasses are tightly bound to a superclass or baseclass</li>\n<li>Runtime flexibility is hindered</li>\n<li>Only a portion of the desired alogrithm is varied</li>\n</ul>\n\n<p>Thankfully, there is another design pattern that resolves these\nproblems: the <em>Strategy</em> pattern.</p>\n\n<h2>Summertime and the Livin&#39; is Easy</h2>\n\n<h3>Hot dogs, hamburgers, and veggie patties</h3>\n\n<p>It&#39;s the middle of July, and there&#39;s no better time to throw a day\nparty. Our pals are bringing the tasty beverages, so we just need to prepare the food.</p>\n\n<p>We&#39;ll first create a superclass <code>Food</code> that will delagate <code>#type</code> to its\nsubclasses: <code>HotDog</code>, <code>Hamburger</code>, and <code>VeggiePatty</code>. Notice that this\nis the <em><a href=\"http://reefpoints.dockyard.com/ruby/2013/07/10/design-patterns-template-pattern.html\">Template\nMethod</a></em>\npattern in action.</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n22\n23\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">class</span> <span class=\"class\">Food</span>\n  <span class=\"keyword\">def</span> <span class=\"function\">type</span>\n    raise <span class=\"constant\">NotImplementedError</span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Ask the subclass</span><span class=\"delimiter\">'</span></span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n\n<span class=\"keyword\">class</span> <span class=\"class\">HotDog</span> &lt; <span class=\"constant\">Food</span>\n  <span class=\"keyword\">def</span> <span class=\"function\">type</span>\n    <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">hot dogs</span><span class=\"delimiter\">'</span></span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n\n<span class=\"keyword\">class</span> <span class=\"class\">Hamburger</span> &lt; <span class=\"constant\">Food</span>\n  <span class=\"keyword\">def</span> <span class=\"function\">type</span>\n    <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">hamburgers</span><span class=\"delimiter\">'</span></span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n\n<span class=\"keyword\">class</span> <span class=\"class\">VeggiePatty</span> &lt; <span class=\"constant\">Food</span>\n  <span class=\"keyword\">def</span> <span class=\"function\">type</span>\n    <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">veggie patties</span><span class=\"delimiter\">'</span></span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Now, let&#39;s get the grill ready.</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">class</span> <span class=\"class\">Grill</span>\n  attr_accessor <span class=\"symbol\">:food</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">initialize</span> food\n    <span class=\"instance-variable\">@food</span> = food\n  <span class=\"keyword\">end</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">grilling</span>\n    <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">Grilling the </span><span class=\"inline\"><span class=\"inline-delimiter\">#{</span>food.type<span class=\"inline-delimiter\">}</span></span><span class=\"content\">!</span><span class=\"delimiter\">&quot;</span></span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Nice. Now let&#39;s get grilling! We&#39;ll start with some hot dogs.</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n  <td class=\"code\"><pre>grill = <span class=\"constant\">Grill</span>.new(<span class=\"constant\">HotDog</span>.new)\ngrill.grilling <span class=\"comment\"># =&gt; &quot;Grilling the hot dogs!&quot;</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Oh watch out, these dogs are almost done... time to throw on the\nhamburger and veggie patties.</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n  <td class=\"code\"><pre>grill.food = <span class=\"constant\">Hamburger</span>.new\ngrill.grilling <span class=\"comment\"># =&gt; &quot;Grilling the hamburgers!&quot;</span>\n\ngrill.food = <span class=\"constant\">VeggiePatty</span>.new\ngrill.grilling <span class=\"comment\"># =&gt; &quot;Grilling the veggie patties!&quot;</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Wasn&#39;t that easy? We were able to switch out items without\ncreating a new class of <code>Grill</code>.</p>\n\n<h2>Discussion</h2>\n\n<h3>Strategies and Context</h3>\n\n<p>The <em>Strategy</em> pattern employs <em>strategies</em>, objects of which\npossess identical behavior. Our grill party relies on <em>strategies</em> to\ntell us what <code>#type</code> of food they were. It&#39;s important that all strategy objects\nhave the same responsiblity and support the same interface, which in our case\nwas <code>grill.grilling</code>.</p>\n\n<p>The <code>Grill</code> class is our <em>context</em> class, the operator of the\n<em>strategies</em>, which uses the <code>HotDog#type</code>, <code>Hamburger#type</code>, and\n<code>VeggiePatty#type</code> interchangeably.</p>\n\n<p>Through our contrived example, we see the immediate benefits of this\ndesign pattern:</p>\n\n<ul>\n<li><em>Separation of concerns</em></li>\n<li><em>Strategies</em> at runtime</li>\n</ul>\n\n<p>We&#39;ve achieved <em>separation of concerns</em> by designating the <code>#type</code>\nmethod as our desired set of <em>strategies</em>. <code>HotDog</code>, <code>Hamburger</code> and\n<code>VeggiePatty</code>  are unaware of our implementation of <code>Grill#grilling</code>.</p>\n\n<p>As for runtime flexibility, we&#39;re able to switch out the items up on the\ngrill.</p>\n\n<h3>Special Patties: Lambdas</h3>\n\n<p>As we&#39;re grilling our hamburger and veggies patties, a last minute guest\narrives, and she has brought some bacon, jalape\u00f1os, and onions.\nLet&#39;s make some custom patties, but avoid creating more subclasses of\n<code>Food</code>. What could we do here?</p>\n\n<p>A quick and awesome solution would be to use <em>lambdas</em>!</p>\n\n<p>Since we expect our <em>strategies</em> to return <code>Strings</code> for food <code>#type</code>,\nwe can create a <em>lambda</em> which will behave just like the other strategy\nobjects and return a <code>String</code>.</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre><span class=\"constant\">CUSTOMPATTY</span> = lambda { |type| <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"inline\"><span class=\"inline-delimiter\">#{</span>type<span class=\"inline-delimiter\">}</span></span><span class=\"delimiter\">&quot;</span></span> }\n</pre></td>\n</tr></table>\n</div></div>\n<p>Next, let&#39;s get back to our <code>Grill</code> class and alter the class a little\nbit.</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">class</span> <span class=\"class\">Grill</span>\n  attr_accessor <span class=\"symbol\">:food</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">initialize</span> food\n    <span class=\"instance-variable\">@food</span> = food\n  <span class=\"keyword\">end</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">grilling</span>\n    <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">Grilling the </span><span class=\"inline\"><span class=\"inline-delimiter\">#{</span>print_food<span class=\"inline-delimiter\">}</span></span><span class=\"content\">!</span><span class=\"delimiter\">&quot;</span></span>\n  <span class=\"keyword\">end</span>\n\n  private\n\n  <span class=\"keyword\">def</span> <span class=\"function\">print_food</span>\n    food_is_string? ? food : food.type\n  <span class=\"keyword\">end</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">food_is_string?</span>\n    food.is_a? <span class=\"constant\">String</span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Since we know the <em>strategies</em> are <code>Strings</code>, we&#39;ve created two\n<code>private</code> methods, <code>#print_food</code> and <code>#food_is_string</code>.\n<code>#food_is_string</code> will check if <code>Grill</code> has received a\n<code>String</code> or not, and <code>#print_food</code> will handle <em>lambdas</em> or <em>classes</em> of\nfood.</p>\n\n<p>Now let&#39;s try grilling some hot dogs and custom patties!</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n</pre></td>\n  <td class=\"code\"><pre>jalape\u00f1os = <span class=\"constant\">CUSTOMPATTY</span>.call <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">spicy jalape\u00f1os patties</span><span class=\"delimiter\">'</span></span>\nbacon = <span class=\"constant\">CUSTOMPATTY</span>.call <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">greasy, yummy bacon patties</span><span class=\"delimiter\">'</span></span>\n\ngrill = <span class=\"constant\">Grill</span>.new jalape\u00f1os\ngrill.grilling <span class=\"comment\"># =&gt; &quot;Grilling the spicy jalape\u00f1os patties!&quot;</span>\n\ngrill.food = bacon\ngrill.grilling <span class=\"comment\"># =&gt; &quot;Grilling the greasy, yummy bacon patties!&quot;</span>\n\ngrill.food = <span class=\"constant\">HotDog</span>.new\ngrill.grilling <span class=\"comment\"># =&gt; &quot;Grilling the hot dogs!&quot;</span>\n</pre></td>\n</tr></table>\n</div></div>\n<h3>Mmm-mmmm... That is a tasty burger.</h3>\n\n<p>The <em>Strategy</em> pattern is a delagation-based design pattern, and shares\nsome similarities with the <em>Template Method</em> pattern. However, instead\nof depending so heavily on inheiritance between a superclass and\nsubclasses to use our target algorithm, we take our algorithm and\nconsider it as a separate object. As long as we remember the\nrelationship between the <em>strategies</em> and the <em>context</em>, we earn real\nadvantages over the <em>Template Method</em>, as seen in our custom patty\nexample.</p>\n\n<p>I hope you had fun at our day party, and we&#39;ll next explore the\n<em>Observer</em> pattern.</p>\n","summary":"Exploring design patterns and their use cases","illustration":null,"illustration_alt":null,"tags":["design-patterns","ruby"],"shallow":false,"date":"2013-07-25T00:00:00Z"},{"id":"ruby/2013/07/10/design-patterns-template-pattern","title":"Design Patterns: The Template Method Pattern","dockyarder":"doug-yun","body":"<h2>Introduction</h2>\n\n<p>As the field of software development grows, we developers are\ncontinuously trying to catch up with the latest technologies.\nFortunately, the craft of writing maintainable code is language\nagnostic, and in this series of blogposts, we&#39;ll focus on a powerful set of\ntimeless tools: <em>Design Patterns</em>.</p>\n\n<p>I highly recommend Russ Olsen&#39;s book <a href=\"http://designpatternsinruby.com/\">Design\nPatterns in Ruby</a>. Our series\nwill draw inspiration from it and is brief in comparison. So if you\nenjoy these posts (and I hope you do!), the book will be a great\ninvestment.</p>\n\n<p>We&#39;ll explore various design patterns and learn\nwhen to apply them. Our topic for today will be the <em>Template Method</em>\npattern, the simplest design pattern.</p>\n\n<h2>Our First Day in Construction</h2>\n\n<h3>The Right Tools</h3>\n\n<p>Quite simply, design patterns are just tools that help us construct software. However,\njust like tools, we need to use the correct and proper one for the task. We\ncould use a hammer on screws, but we&#39;d damage the wood planks and using a\npower drill will be much more efficient. Before using any one of the numerous design patterns, it is\ncrucial to understand the problem we wish to solve.</p>\n\n<p><em>It is incorrect to use a particular design pattern on the wrong\ntype of problem</em>. In other words, it is in poor practice to use a\nparticular design pattern on a problem that does not require the\naforementioned design pattern.</p>\n\n<h3>Let&#39;s Build Some Walls</h3>\n\n<p>Today, we&#39;ve been asked by our foreman to build a couple of walls. All\nthe walls will share the same dimensions and will be made from the same\nmaterial (for this construction project, our foreman has given us an\n&quot;easy&quot; set of requirements).</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\"># Blueprints for Wall</span>\nrequire <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">minitest/autorun</span><span class=\"delimiter\">'</span></span>\n\ndescribe <span class=\"constant\">Wall</span> <span class=\"keyword\">do</span>\n  let(<span class=\"symbol\">:wall</span>) { <span class=\"constant\">Wall</span>.new }\n\n  it <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">should state its dimensions</span><span class=\"delimiter\">'</span></span> <span class=\"keyword\">do</span>\n    wall.dimensions.must_equal <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">I am 30ft. long and 20ft. wide!</span><span class=\"delimiter\">'</span></span>\n  <span class=\"keyword\">end</span>\n\n  it <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">should be made from brick</span><span class=\"delimiter\">'</span></span> <span class=\"keyword\">do</span>\n    wall.made_from.must_equal <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">I am made from brick!</span><span class=\"delimiter\">'</span></span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>What a nice boss, he&#39;s handed us the blueprints!\nNow it&#39;s just up to us to build out the <code>Wall</code>.</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">class</span> <span class=\"class\">Wall</span>\n  <span class=\"keyword\">def</span> <span class=\"function\">dimensions</span>\n    <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">I am 30ft. long and 20ft. wide!</span><span class=\"delimiter\">'</span></span>\n  <span class=\"keyword\">end</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">made_from</span>\n    <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">I am made from brick!</span><span class=\"delimiter\">'</span></span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Nice! Our tests pass, everybody is happy, and we&#39;re off to lunch!</p>\n\n<h3>A Hammer or a Nailgun?</h3>\n\n<p>Coming back to the site, our foreman has informed us that we need more\nwalls. &quot;That&#39;s a piece of cake,&quot; we reply, recalling how easy it was to\nbuild out the <code>Wall</code>.</p>\n\n<p>&quot;Not so fast,&quot; our foreman retorts. We&#39;re given new blueprints with\ndifferent wall requirements.</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n22\n23\n24\n25\n26\n27\n28\n29\n<strong>30</strong>\n31\n32\n33\n34\n35\n36\n37\n38\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\"># Blueprints for a BrickWall</span>\ndescribe <span class=\"constant\">BrickWall</span> <span class=\"keyword\">do</span>\n  let(<span class=\"symbol\">:brick_wall</span>) { <span class=\"constant\">BrickWall</span>.new }\n\n  it <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">should state its dimensions</span><span class=\"delimiter\">'</span></span> <span class=\"keyword\">do</span>\n    brick_wall.dimensions.must_equal <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">I am 30ft. long and 20ft. wide!</span><span class=\"delimiter\">'</span></span>\n  <span class=\"keyword\">end</span>\n\n  it <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">should be made from brick</span><span class=\"delimiter\">'</span></span> <span class=\"keyword\">do</span>\n    brick_wall.made_from.must_equal <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">I am made from brick!</span><span class=\"delimiter\">'</span></span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n\n<span class=\"comment\"># Blueprints for a ConcreteWall</span>\ndescribe <span class=\"constant\">ConcreteWall</span> <span class=\"keyword\">do</span>\n  let(<span class=\"symbol\">:concrete_wall</span>) { <span class=\"constant\">ConcreteWall</span>.new }\n\n  it <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">should state its dimensions</span><span class=\"delimiter\">'</span></span> <span class=\"keyword\">do</span>\n    concrete_wall.dimensions.must_equal <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">I am 30ft. long and 20ft. wide!</span><span class=\"delimiter\">'</span></span>\n  <span class=\"keyword\">end</span>\n\n  it <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">should be made from concrete</span><span class=\"delimiter\">'</span></span> <span class=\"keyword\">do</span>\n    concrete_wall.made_from.must_equal <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">I am made from concrete!</span><span class=\"delimiter\">'</span></span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n\n<span class=\"comment\"># Blueprints for a WoodWall</span>\ndescribe <span class=\"constant\">WoodWall</span> <span class=\"keyword\">do</span>\n  let(<span class=\"symbol\">:wood_wall</span>) { <span class=\"constant\">WoodWall</span>.new }\n\n  it <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">should state its dimensions</span><span class=\"delimiter\">'</span></span> <span class=\"keyword\">do</span>\n    wood_wall.dimensions.must_equal <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">I am 10ft. long and 20ft. wide!</span><span class=\"delimiter\">'</span></span>\n  <span class=\"keyword\">end</span>\n\n  it <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">should be made from wood</span><span class=\"delimiter\">'</span></span> <span class=\"keyword\">do</span>\n    wood_wall.made_from.must_equal <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">I am made from wood!</span><span class=\"delimiter\">'</span></span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Hmm... A couple of ideas run through our heads. We could follow the initial <code>Wall</code> class and\ndefine each method, hardcoding each string output, for the <code>BrickWall</code>, <code>ConcreteWall</code>, and <code>WoodWall</code>\nclasses. That seems like an okay idea, but we&#39;d have to hard code each\ninstance method. What if our house requires a dozen different types of walls?</p>\n\n<h3>Open That Toolbox!</h3>\n\n<p>Sipping on our after-lunch coffee, we realize that we&#39;ve got a tool right\nfor the job, the <em>Template Method</em> pattern.</p>\n\n<p>In the <em>Template Method</em> pattern, the creation of a <em>skeletal class</em> will\nserve as the basis for various <em>subclasses</em> or <em>concrete classes</em>. Within the <em>skeletal class</em>\nthere are <em>abstract methods</em>, which in turn, will be overridden by the\nmethods of <em>subclasses</em>. Essentially, we&#39;ll define a <code>Wall</code> class (our\n<em>skeletal class</em>) and its <em>subclasses</em>, <code>BrickWall</code>, <code>ConcreteWall</code>, and\n<code>WoodWall</code>.</p>\n\n<p>Going over the blueprints, we notice that the three different classes of\nwalls each contain the methods <code>#dimensions</code> and <code>#made_from</code>, which\nresult in slighty different strings. With this knowledge, let&#39;s\ncreate our <code>Wall</code> class and its subclasses.</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n22\n23\n24\n25\n26\n27\n28\n29\n<strong>30</strong>\n31\n32\n33\n34\n35\n36\n37\n38\n39\n<strong>40</strong>\n41\n42\n43\n44\n45\n46\n47\n48\n49\n<strong>50</strong>\n51\n52\n53\n54\n55\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">class</span> <span class=\"class\">Wall</span>\n  <span class=\"keyword\">def</span> <span class=\"function\">dimensions</span>\n    <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">I am </span><span class=\"inline\"><span class=\"inline-delimiter\">#{</span>length<span class=\"inline-delimiter\">}</span></span><span class=\"content\">ft. long and </span><span class=\"inline\"><span class=\"inline-delimiter\">#{</span>width<span class=\"inline-delimiter\">}</span></span><span class=\"content\">ft. wide!</span><span class=\"delimiter\">&quot;</span></span>\n  <span class=\"keyword\">end</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">made_from</span>\n    <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">I am made from </span><span class=\"inline\"><span class=\"inline-delimiter\">#{</span>material<span class=\"inline-delimiter\">}</span></span><span class=\"content\">!</span><span class=\"delimiter\">&quot;</span></span>\n  <span class=\"keyword\">end</span>\n\n  private\n\n  <span class=\"keyword\">def</span> <span class=\"function\">length</span>\n    <span class=\"integer\">30</span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n\n<span class=\"keyword\">class</span> <span class=\"class\">BrickWall</span> &lt; <span class=\"constant\">Wall</span>\n  private\n\n  <span class=\"keyword\">def</span> <span class=\"function\">width</span>\n    <span class=\"integer\">20</span>\n  <span class=\"keyword\">end</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">material</span>\n    <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">brick</span><span class=\"delimiter\">'</span></span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n\n<span class=\"keyword\">class</span> <span class=\"class\">ConcreteWall</span> &lt; <span class=\"constant\">Wall</span>\n  private\n\n  <span class=\"keyword\">def</span> <span class=\"function\">width</span>\n    <span class=\"integer\">20</span>\n  <span class=\"keyword\">end</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">material</span>\n    <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">concrete</span><span class=\"delimiter\">'</span></span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n\n<span class=\"keyword\">class</span> <span class=\"class\">WoodWall</span> &lt; <span class=\"constant\">Wall</span>\n  private\n\n  <span class=\"keyword\">def</span> <span class=\"function\">length</span>\n    <span class=\"integer\">10</span>\n  <span class=\"keyword\">end</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">width</span>\n    <span class=\"integer\">20</span>\n  <span class=\"keyword\">end</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">material</span>\n    <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">wood</span><span class=\"delimiter\">'</span></span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<h2>Discussion</h2>\n\n<h3>Hook Methods</h3>\n\n<p>Within the <code>Wall</code> class we have defined a private method called <code>#length</code>\nbecause we see that <code>BrickWall</code> and <code>ConcreteWall</code> share the same\nlength. As for the <code>WoodWall</code> class, we simply overwrite the <code>#length</code>\nand give it a value of <code>10</code>. These are examples of <em>Hook Methods</em>.</p>\n\n<p><em>Hook Methods</em> serve two purposes:</p>\n\n<ol>\n<li>Override the skeletal implementation and define something new</li>\n<li>Or, accept the default implementation</li>\n</ol>\n\n<p>Please note that the default implemetation, within the skeletal class, does\nnot necessarily need to define a method. For example, we could have had:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">class</span> <span class=\"class\">Wall</span>\n\n  ...\n\n  private\n\n  <span class=\"keyword\">def</span> <span class=\"function\">length</span>\n    raise <span class=\"constant\">NotImplementedError</span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Sorry, you have to override length</span><span class=\"delimiter\">'</span></span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n\n<span class=\"keyword\">class</span> <span class=\"class\">BrickWall</span> &lt; <span class=\"constant\">Wall</span>\n  private\n\n  ...\n\n  <span class=\"keyword\">def</span> <span class=\"function\">length</span>\n    <span class=\"integer\">30</span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>In the example above, the <code>#length</code> method within the <code>Wall</code> class\nserved as a placeholder for the <code>#length</code> for the <code>BrickWall</code>, it&#39;s\n<em>concrete class</em>. Essentially, <em>hook methods</em> inform all <em>concrete\nclasses</em> that the method may require an override. If the base\nimplementation is undefined the subclasses must define the <em>hook\nmethods</em>.</p>\n\n<h2>Those Are Some Nice Walls</h2>\n\n<p>Our foreman is delighted with the results and we&#39;re going to call it a\nday. As we can see, using the <em>Template Method</em> pattern is not difficult\nat all. We first defined a base class, within which we defined necessary\n<em>hook methods</em> to be overridden by our <em>subclasses</em>. Of course, this\nparticular design pattern does not solve every conceivable problem, but\nhelps keep our code clean by the use of inheritance.</p>\n\n<p>Next we&#39;ll be discussing the <em>Strategy</em> method pattern. Stay tuned!</p>\n","summary":"Exploring design patterns and their use cases","illustration":null,"illustration_alt":null,"tags":["ruby","design-patterns"],"shallow":false,"date":"2013-07-10T00:00:00Z"},{"id":"office/2013/07/09/first-month-at-dockyard","title":"First Month at DockYard","dockyarder":"marin-abernethy","body":"<p>I came to the programming party a little late in my <a href=\"http://www.trincoll.edu/Pages/default.aspx\">college</a> career, \nonly having a year and a half of classroom experience under my belt. Due\nto my limited CS background, I was rather anxious to start work at a\nweb development startup, fearing my qualifications were not up to par.\nHowever, my feelings of inadequacy quickly subsided after starting at\nDockYard! I was welcomed by a comfortable learning environment and an\natmosphere of positivity and productivity. My coworkers are very\napproachable and always willing to answer my questions. Because of\nDockYard&#39;s intimate size I am able to see all sides of the business, and\nget to know everyone in the office.</p>\n\n<p>It has now been a month since I began working and already I feel I am\nlight-years ahead of where I started. My nerves have been replaced by an\neagerness to continue learning and grow as a developer. The amount of\ninformation that has been thrown my way is rather overwhelming. I have\nalready pored through 6 books, including: <a href=\"http://pragprog.com/book/rails32/agile-web-development-with-rails-3-2\">Agile Web Development with\nRails</a> by Sam Ruby and, <a href=\"http://jsninja.com/\">Secrets of the JavaScript Ninja</a> by John Resig, in\naddition to other readings on <a href=\"http://coffeescript.org\">CoffeeScript</a>, version control (<a href=\"http://git-scm.com\">git</a>), and\n<a href=\"http://en.wikipedia.org/wiki/User_story\">user stories</a>. Not to mention my introduction to vim and all the commands\nthat accompany it. While I cannot claim all of the information has\nstuck, the exposure will surely breed understanding. I have learned that\nit isn&#39;t about having all the answers, but the efficiency of finding\nthem that is important.</p>\n\n<p>In addition to all the reading, I have worked on a small side project: a\nsimple blog site (my introduction to <a href=\"http://en.wikipedia.org/wiki/Test-driven_development\">test-driven\ndevelopment</a>) that I\nrebuilt 3 times, each time adding more features. The saying, &quot;repetition\nis the mother of all learning&quot;, has certainly resonated with me after\nthis exercise.  Also <a href=\"http://en.wikipedia.org/wiki/Pair_programming\">pair programming</a> with others in the office has also\nbeen extremely helpful, giving me an idea of the day-to-day. Overall, I\nfeel lucky to be at DockYard in the midst of the growing field of web\ndevelopment. Already I can say my experience has been invaluable and I\nthoroughly look forward to the rest of the summer.</p>\n","summary":"Our summer intern shares her thoughts on her first month with us","illustration":null,"illustration_alt":null,"tags":["office","intern"],"shallow":false,"date":"2013-07-09T00:00:00Z"},{"id":"announcement/2013/07/08/steven-trevathan-is-a-dockyarder","title":"Steven Trevathan is a DockYarder","dockyarder":"brian-cardarella","body":"<p><img src=\"/images/steven-trevathan.jpg\" alt=\"Steven\"></p>\n\n<p>I&#39;m very happy to announce today that DockYard has joined forces with\nBoston design firm Dobot! Leader designer Steven Trevathan has come on\nas a partner and Creative Director (until we come up with a title he\nprefers) of DockYard.</p>\n\n<p>This is a huge step forward for us. While we have had in-house designers\nwe have been actually leaning on Steven from time to time for our\nconcept design needs. Now with Steven coming on as part of our team he\nwill focus on building out the design side of DockYard and putting\ntogether a formal concept design process for us.</p>\n\n<p><a href=\"http://twitter.com/strevat\">Follow Steven on Twitter</a></p>\n","summary":"DockYard absorbs Dobot!","illustration":null,"illustration_alt":null,"tags":["announcement","office"],"shallow":false,"date":"2013-07-08T00:00:00Z"},{"id":"announcement/2013/07/08/logan-faerber-is-a-dockyarder","title":"Logan Faerber is a DockYarder","dockyarder":"brian-cardarella","body":"<p><img src=\"/images/logan-faerber.jpg\" alt=\"Logan\">\nAlong with his other fellow Dobot-er we welcome Logan Faerber to the\nDockYard team today!</p>\n\n<p>Logan is a <a href=\"http://www.loganfaerber.com/\">kick ass illustrator</a> who\nhas done work for New York Life, Dynamo Labs, CareShare, CustomMade,\n<a href=\"http://www.biowarestore.com/garrus-screenprint-poster.html\">Bioware</a>,\nand <a href=\"http://www.archaia.com/archaia-titles/hawken-genesis/\">Archaia</a>.</p>\n\n<p>Logan has been working out of our office for the last few months and we\nare excited to have his unique talents at DockYard.</p>\n\n<p><a href=\"http://twitter.com/loganfaerber\">Follow Logan on Twitter</a></p>\n","summary":"DockYard absorbs Dobot!","illustration":null,"illustration_alt":null,"tags":["announcement","office"],"shallow":false,"date":"2013-07-08T00:00:00Z"},{"id":"announcement/2013/07/08/dockyard-acquires-dobot","title":"DockYard Acquires Dobot","dockyarder":"brian-cardarella","body":"<p>Today I&#39;m very happy to announce that we have acquired local design firm\n<a href=\"http://dobotdo.com\">Dobot</a>, its two partners Steven &amp; Logan have joined us full-time.\nThis is a huge move for DockYard, and a simple one for Dobot (they have\nbeen working out of our office for the past few months so they don&#39;t\nactually need to move anywhere).</p>\n\n<p><img src=\"/images/acquire.gif\" alt=\"DockYard acquires Dobot\"></p>\n\n<p>Please see the announcement for <a href=\"http://reefpoints.dockyard.com/announcement/2013/07/08/steven-trevathan-is-a-dockyarder.html\">Steven\nTrevathan</a>\nand the announcement for <a href=\"http://reefpoints.dockyard.com/announcement/2013/07/08/logan-faerber-is-a-dockyarder.html\">Logan\nFaerber</a>.</p>\n","summary":"Joining forces","illustration":null,"illustration_alt":null,"tags":["announcement","business","office"],"shallow":false,"date":"2013-07-08T00:00:00Z"},{"id":"announcement/2013/07/01/sean-hussey-is-a-dockyarder","title":"Sean Hussey is a DockYarder","dockyarder":"brian-cardarella","body":"<p><img src=\"/images/hussey.png\" alt=\"Sean Hussey\">\nToday is the first day for Sean Hussey at DockYard. He has been\ncontracting with us for the past few months and I was finally able to\nlock him down recently. Sean and I have known one another for years as\nhe hired me for my first Ruby job at\n<a href=\"http://global.rakuten.com/en/\">RakutenUSA</a>. He brings years of Sr.\nlevel Ruby experience to our team.</p>\n","summary":"We snag one of the tallest guys in Ruby","illustration":null,"illustration_alt":null,"tags":["announcement","office"],"shallow":false,"date":"2013-07-01T00:00:00Z"},{"id":"ruby/2013/06/28/introducing-destroyed_at","title":"Introducing destroyed_at","dockyarder":"michael-dupuis","body":"<p><a href=\"https://github.com/dockyard/destroyed_at\">See the project on GitHub</a></p>\n\n<p>We&#39;ve found that more and more clients are requesting &quot;undestroy&quot;\nfunctionality in their apps. We recently extracted this common pattern into a gem\nwe&#39;re calling <a href=\"https://github.com/dockyard/destroyed_at\">DestroyedAt</a>, an ActiveRecord mixin that makes un-destroying records\nsimple.</p>\n\n<p>By\nsetting the datetime of the <code>#destroyed_at</code> field of your record, you can\nmark records as destroyed, without actually deleting them. By default, the\nmodel in which you <code>include DestroyedAt</code> is scoped to only include\nrecords that have not been destroyed. So something like\n<code>User.all</code> will only return <code>User</code>s with <code>#destroyed_at</code> values of <code>nil</code>;\nand <code>User.unscoped.all</code> will return all <code>User</code> records.</p>\n\n<p>When you want to bring a\nrecord back, simply call <code>#undestroy</code> on the instance and its\n<code>#destroyed_at</code> will be set to <code>nil</code>.</p>\n\n<p>We&#39;ve baked a bunch of other functionality in as well, including\nundestroy callbacks. For the full rundown, head over to <a href=\"https://github.com/dockyard/destroyed_at\">DestroyedAt&#39;s\nGitHub page</a> .</p>\n","summary":"An ActiveRecord mixin for safe destroys","illustration":null,"illustration_alt":null,"tags":["ruby","ruby-on-rails","gems"],"shallow":false,"date":"2013-06-28T00:00:00Z"},{"id":"announcement/2013/06/19/michael-dupuis-is-a-dockyarder","title":"Michael Dupuis is a DockYarder","dockyarder":"brian-cardarella","body":"<p><img src=\"/images/dupuis.jpg\" alt=\"Michael\">\nRecently we added another great mind to the DockYard team: Michael\nDupuis. Mike joins our Boston office and has already been busy building\nout client apps in Ruby on Rails and Ember.js for us! He also comes with\nsome design chops. Welcome Mike!</p>\n","summary":"Grow baby grow!","illustration":null,"illustration_alt":null,"tags":["announcement","office"],"shallow":false,"date":"2013-06-19T00:00:00Z"},{"id":"announcement/2013/06/19/marin-abernethy-is-a-dockyarder","title":"Marin Abernethy is a DockYarder","dockyarder":"brian-cardarella","body":"<p><img src=\"/images/abernethy.jpg\" alt=\"Marin\">\nMarin comes to us as from Trinity College for the summer. We&#39;ve been\noverwhelming her with Ruby, Linux, SQL, JavaScript, and VIM. She&#39;s\nexcelled and we&#39;re excited to see what she can accomplish over the\nremainder of the summer.</p>\n","summary":"Our first developer intern","illustration":null,"illustration_alt":null,"tags":["announcement","office","intern"],"shallow":false,"date":"2013-06-19T00:00:00Z"},{"id":"ember/2013/05/09/tildes-ember-training","title":"Tilde's Ember Training","dockyarder":"dan-mcclain","body":"<p>A couple weeks ago, Yehuda Katz and Tom Dale of <a href=\"http://tilde.io\">Tilde</a> ran\ntheir 3-day <a href=\"http://www.tilde.io/training/\">Introduction to Ember.js Training</a>\nat <a href=\"http://bocoup.com/\">Bocoup</a> here in Boston. I, along with Amanda,\nDoug and Chris, attended the training.</p>\n\n<h2>Format</h2>\n\n<p>Throughout the training, attendees were building a simplified Rdio/Spotify clone\nusing Ember. It was broken up into a series of exercises, which built\nupon each other. The exercises were test driven, each having set of QUnit tests that defined the\nexercise. Before each exercise, Tom and Yehuda would explain and demo\nthe concepts via slides and JSBin.</p>\n\n<h3>Day 1</h3>\n\n<p>Day 1 was spent outlining the core concepts of\n<a href=\"http://handlebarsjs.com\">Handlebars</a> and Ember. We\nstarted with Handlebars, which is what Ember uses as its templating\nlanguage. After covering the basics of Handlebars, we learned about how\n<a href=\"http://emberjs.com/guides/routing/\">Ember handles routing and outlets</a>.\nAfter we finished routing, we moved onto creating Handlebars helper\nfunctions.</p>\n\n<h3>Day 2</h3>\n\n<p>On day 2, we started off with\n<a href=\"http://emberjs.com/guides/controllers/\">Ember controllers</a> and how they\nserve as proxy objects for the model of your current resource. After\ncontrollers, we covered\n<a href=\"http://emberjs.com/guides/object-model/computed-properties/\">computed properties</a>.\n<a href=\"http://emberjs.com/guides/views/\">Views</a> followed computed properties,\nthen we wrapped up the day with creating custom controls with Ember and\nHandlebars.</p>\n\n<h3>Day 3</h3>\n\n<p>Once we had built the majority of the app, we had a couple more\nexercises that built upon all the exercise we had completed. Tom and\nYehuda also went over how we would use\n<a href=\"http://eviltrout.com/2013/03/23/ember-without-data.html\">Ajax requests to pull in data from a remote source with Promises</a>.\nAfter wrapping up the remainder of the exercises, we covered how the\n<a href=\"http://stackoverflow.com/questions/13597869/what-is-ember-runloop-and-how-does-it-work\">Ember Run Loop works</a>,\nand discussed approaches to testing Ember applications.</p>\n\n<h2>Feedback</h2>\n\n<p>Yehuda and Tom provided a great balance of not-to-dense information,\nuseful demos and exercises. They did a great job of, what Tom stated as,\n&quot;Providing a sufficient level of confusion&quot; in the exercises. Before\neach exercise, they would provide all the information needed for the\nexercise, but would not give you a list of steps to complete the task.\nYou may struggle a bit, but they answer any questions you would\nhave during the exercise. This would help the attendees actually learn\nthe concepts, rather than just copy/paste a set of code and modify it\nhere and there and have it work. I, personally, felt that this worked\nreally well.</p>\n\n<p>I have worked on a couple side project with Ember before taking this\ntraining, and had a very shallow understanding of some of the concepts.\nComing out of this training, I feel I have a great place to start building\nEmber apps. I really fleshed out my understanding of Ember and am really\nexcited about the technology. I am planning on using it for\nany upcoming side projects, to really explore it further. </p>\n","summary":"We sent a group of developers to the Ember.js training that Tilde taught at Bocoup Loft","illustration":null,"illustration_alt":null,"tags":["ember","training"],"shallow":false,"date":"2013-05-09T00:00:00Z"},{"id":"ruby/2013/05/09/context-validations","title":"Context Validations","dockyarder":"brian-cardarella","body":"<p>I just released a new <a href=\"https://github.com/dockyard/context_validations\">gem called ContextValidations</a></p>\n\n<p>ContextValidations allows you to set validations on the instance of\nActiveRecord models. Any class-level validations you have already set\nin your models are ignored. You may be asking yourself &quot;Whaaaaaat?&quot; so\nlet&#39;s look into why.</p>\n\n<h2>Conditional Validations Are A Smell</h2>\n\n<p>When applications grow in complexity the validation models required to\nsupport them usually grow too. Eventually you will have to &quot;work around&quot;\nthe validations with conditionals that rely upon state flags. In some\ncases you end up writing empty model objects for use with your forms to\navoid the mess that conditional validations introduce.</p>\n\n<p>The problem here is that the model is defining a single set of\nvalidations but the model needs to absorb different sets of data under\ndifferent circumstances. Imagine you have a user account that where\ndepending upon how the users get to your app will depend upon what data\nthey need to provide. You might also be importing data from an external\nincomplete data set. Do you set these records aside into another table\nuntil the records are claimed and the user can complete registration? Or\ndo you allow the records to save and have the model enter a state of\n<code>unclaimed</code> to avoid authentication until <code>claimed</code>? You could just\navoid the validations all together but you definitely don&#39;t want to\nallow records that don&#39;t have the most basic of identifying information\nsuch as <code>email</code> or <code>username</code> to be saved.</p>\n\n<p>You can imagine with this scenario the current solution with Rails is\neither a very complex and messy validation model or breaking things out\ninto other models and having a strategy to reconciling that at a later\npoint in time.</p>\n\n<h2>Context Matters</h2>\n\n<p>I have come to believe that defining a monolithic validation set in your\nmodel is the wrong way to go. Context matters. If I am an admin I should\nbe able to write data to a record that might not be acceptable to a\nregular user. Even the simple case of not requiring a password unless\nthe record is new.</p>\n\n<h3>Controllers Are the Context</h3>\n\n<p>I believe the rule of &quot;Fat Model, Skinny Controller&quot; has conditioned\nRails developers to never ever put anything more than a few lines of\ncode into your controllers. For the most part this is a good trend. But\nas we have seen with <a href=\"https://github.com/rails/strong_parameters\">Strong Parameters</a> \nthere are circumstances where adding a few more lines to our controllers\nisn&#39;t going to end the world. I submit the case is also true for\nvalidations. The controller is the context in which the user is\ninteracting with the data. Going back to the admin example, you most\nlikely have a <code>UsersController</code> and an <code>Admin::UsersController</code> defined.\nTwo controllers, same data. Different contexts. Not only should you\nallow mass assignment to the models differently for each context but\nwhat is considered &quot;valid data&quot; should also be different.</p>\n\n<h2>Context Validations</h2>\n\n<p>To handle this need I have just released\n<a href=\"https://github.com/dockyard/context_validations\">ContextValidations</a>.\nThe goals of this gem are simple:</p>\n\n<ol>\n<li>Maintain simplicity</li>\n<li>Enable instance level validations</li>\n<li>Don&#39;t deviate from exisitng Rails validations</li>\n<li>Backwards compatibility with 3rd party libraries</li>\n</ol>\n\n<p>Before I dive into each one let&#39;s see how a set of validations might be\napplied in a controller</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n22\n23\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">class</span> <span class=\"class\">UsersController</span> &lt; <span class=\"constant\">ApplicationController</span>\n  include <span class=\"constant\">ContextValidations</span>::<span class=\"constant\">Controller</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">create</span>\n    <span class=\"instance-variable\">@user</span> = <span class=\"constant\">User</span>.new(user_params)\n    <span class=\"instance-variable\">@user</span>.validations = validations(<span class=\"symbol\">:create</span>)\n    <span class=\"keyword\">if</span> <span class=\"instance-variable\">@user</span>.save\n      <span class=\"comment\"># happy path</span>\n    <span class=\"keyword\">else</span>\n      <span class=\"comment\"># sad path</span>\n    <span class=\"keyword\">end</span>\n  <span class=\"keyword\">end</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">base_validations</span>\n    validates <span class=\"symbol\">:first_name</span>, <span class=\"symbol\">:last_name</span> <span class=\"symbol\">:email</span>, <span class=\"symbol\">:presence</span> =&gt; <span class=\"predefined-constant\">true</span>\n    validates <span class=\"symbol\">:email</span>, <span class=\"symbol\">:uniqueness</span> =&gt; <span class=\"predefined-constant\">true</span>, <span class=\"symbol\">:format</span> =&gt; <span class=\"constant\">EmailFormat</span>\n    validates <span class=\"symbol\">:password</span>, <span class=\"symbol\">:confirmation</span> =&gt; <span class=\"predefined-constant\">true</span>\n  <span class=\"keyword\">end</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">create_validations</span>\n    validates <span class=\"symbol\">:password</span>, <span class=\"symbol\">:presence</span> =&gt; <span class=\"predefined-constant\">true</span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<h3>Maintain Simplicity</h3>\n\n<p>At this point some of you are probably thinking <a href=\"http://rhnh.net/2012/12/03/form-objects-in-rails\">Form Objects</a>.\nPerhaps in the end, Form Objects will be the real answer for what I\nstrive for. But right now I don&#39;t see a justification for the increase\nin complexity. <code>ContextValidations</code> has attempted to keep the complexity\nas low as possible while still allowing for flexibility. The\n<code>ContextValidations::Controller</code> module can be mixed into any object,\nnot just controllers. Let&#39;s say you had a <a href=\"http://stevelorek.com/service-objects.html\">Service Object</a></p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">class</span> <span class=\"class\">UserService</span>\n  include <span class=\"constant\">ContextValidations</span>::<span class=\"constant\">Controller</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">initialize</span>(params)\n    <span class=\"instance-variable\">@params</span> = params\n  <span class=\"keyword\">end</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">create</span>\n    <span class=\"instance-variable\">@user</span> = <span class=\"constant\">User</span>.new(create_params)\n    <span class=\"instance-variable\">@user</span> = validations(<span class=\"symbol\">:create</span>)\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>At this point the code looks identitly to the controller example from\nabove. The validations are accessible anywhere, from any object.</p>\n\n<h3>Instance level validations</h3>\n\n<p>The real key here is that the instance of the model is able to declare\nwhat its validations are rather than the class. To that end you must\nmixin the <code>ContextValidations::Model</code> module into any model you want to\nuse <code>ContextValidations</code></p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">class</span> <span class=\"class\">User</span> &lt; <span class=\"constant\">ActiveRecord</span>::<span class=\"constant\">Base</span>\n  include <span class=\"constant\">ContextValidations</span>::<span class=\"constant\">Model</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>This mixin will do several things to you <code>ActiveRecord</code> model</p>\n\n<ol>\n<li><p>A <code>#validations</code> setter and getter is added. The default for\n<code>#validations</code> is an empty array. When any arrays are assigned they are\nwrapped in an array and falttened out.</p></li>\n<li><p>The <code>:validate</code> callbacks are completed removed. This allows the\nmodel to accept validations set on the class by 3rd party libraries but\nthese validations will never run.</p></li>\n<li><p>The <code>#run_validations!</code> protected method is overwritten to run\nthrough the instance level validations instead of running the\n<code>:validate</code> callback.</p></li>\n</ol>\n\n<h3>Don&#39;t deviate from exisitng Rails validations</h3>\n\n<p>The only difference from writing your validations now is they are\nwritten on the instance. The <code>#validates</code> method functions exactly the\nsame way. You can still pass conditional validations if you&#39;d like but I\nwouldn&#39;t recommend it.</p>\n\n<h3>Backwards compatibility with 3rd party libraries</h3>\n\n<p>As mentioned above we don&#39;t want your Rails app to crash if 3rd party\nlibraries are declaring regular Rails validations in your models. They\nare just ignored.</p>\n\n<h2>Moving forward</h2>\n\n<p>There are a few directions things could move in. I still haven&#39;t come\nup with a simple way to test <code>ContextValidations</code>. There will also be\nvalidations that are always used regardless of the context. I don&#39;t\nthink it makes sense to constantly rewrite these validations. One\npossibility would be to consider the class validations the\n<code>base_validations</code> that are always run then you can declare context\nvalidations on the instance. This might cause issues with 3rd party\nlibraries that are using conditional validations. But, we could easily\nget around that by ignoring any class level validations that have\nconditionals on them.</p>\n\n<p>I am eager to get feedback on this. I am sure this might cause some\nfriction as it moves outside of the comfort zone for many Rails devs but\nnow I am happy with the direction.</p>\n","summary":"An alternative to the normal Rails validations","illustration":null,"illustration_alt":null,"tags":["ruby","ruby-on-rails","gems"],"shallow":false,"date":"2013-05-09T00:00:00Z"},{"id":"design/2013/04/26/thoughts-on-designing-responsive-websites","title":"Thoughts on Designing Responsive Websites","dockyarder":"amanda-cheung","body":"<p>Things I have learned about the design process of making responsive websites:</p>\n\n<h4>Design Mobile First</h4>\n\n<p>Why do I like to design for narrower screen sizes first? Because it places emphasis on hierarchy and content organization. It prioritizes making decisions about organizing the content of the site, which of course is the most important part! (Take a look at some of <a href=\"http://karenmcgrane.com/category/content-strategy/\">Karen McGrane&#39;s stuff</a> if you want to read more about content strategy) Which sections make the most sense near each other? Does the layout order make it easy for a user to find what she or he is looking for? Imagine how disjointed it could be for a mobile user if the content groupings didn&#39;t flow in context among each other. Figuring all this out before moving on to designing wider screen sizes can be very helpful. Everything can&#39;t be shoved <a href=\"http://iampaddy.com/lifebelow600/\">&quot;above the fold&quot;</a> in mobile. Say goodbye to hearing that everything is important!</p>\n\n<h4>Don&#39;t Fight the Web, Work With It!</h4>\n\n<p>Think ahead about how design elements are going to be implemented during initial design stages. Can it be written out of CSS? Maybe some elements can&#39;t be, but let&#39;s keep those to a minimal. With all the fancy CSS3 things we can do now, we shouldn&#39;t have to open up Photoshop to make design edits. In the way that form should follow function, allow implementation to inform design. This is not an argument against <a href=\"http://sachagreif.com/flat-pixels/\">skeuomorphism</a>, but it just so happens that flatter designs tend to be more web-friendly. Sorry, pirate scrolls. Not sorry.</p>\n\n<h4>Get in the Browser ASAP</h4>\n\n<p>After laying out a few basic wireframes, I like to jump right into HTML and CSS (or really, <a href=\"http://haml.info/\">HAML</a> and <a href=\"http://sass-lang.com/\">SASS</a>). Whether you start on paper, Illustrator, or Photoshop, the design won&#39;t look like how it&#39;s really going to look until it&#39;s in the browser. It makes more sense for me to get right in to iterations while seeing how layouts are behaving at different screen sizes. I find myself doing a lot of trial and error because I can never be sure of what may or may not work. If I think of a possible solution, I try it out. If it doesn&#39;t work better than what I had, I&#39;ll revert it and try something else. The majority of my designing and problem-solving happens in the browser now where I can shrink and expand the width of the window to see how everything is coming together. For me, getting right into this <a href=\"http://en.wikipedia.org/wiki/Iterative_design\">iterative design</a> process beats out creating thorough mockups that will only represent so little of the &quot;final product&quot;.</p>\n\n<p>There&#39;s a lot of stuff to know so the best way to learn is to dive right in!</p>\n","summary":"What I've learned by making a few responsive websites - Part 1","illustration":null,"illustration_alt":null,"tags":["design"],"shallow":false,"date":"2013-04-26T00:00:00Z"},{"id":"ruby/2013/04/04/we-are-hiring-for-an-emberjs-dev","title":"We are hiring for a fulltime Ember.js developer","dockyarder":"brian-cardarella","body":"<p>We are looking for an Ember.js Developer. Our ideal\ncandidate:</p>\n\n<ul>\n<li>Work on cutting-edge Ember.js applications</li>\n<li>Passionate about new HTML/JavaScript technologies</li>\n<li>Has experience building complex client side applications</li>\n<li>Some backend experience would be nice</li>\n<li>Some database experience would be nice</li>\n<li>Enjoys contributing to open source, writing blog posts, giving talks</li>\n<li>Willing to live in Boston (we can relocate for the right candidate)</li>\n</ul>\n\n<p>Our current tech stack:</p>\n\n<ul>\n<li><a href=\"http://rubyonrails.org\">Ruby on Rails</a></li>\n<li><a href=\"http://emberjs.com\">Ember.js</a></li>\n<li><a href=\"http://postgresql.com\">PostgreSQL</a></li>\n<li><a href=\"http://coffeescript.org\">CoffeeScript</a></li>\n<li>Most of our apps deploy to <a href=\"http://heroku.com\">Heroku</a>, if not then\nto <a href=\"http://linode.com\">Linode</a></li>\n</ul>\n\n<p><a href=\"https://dockyard.com\">DockYard</a> is a Boston-based consultancy that always wants to work with\nthe best people and the best technology. We are committed to Ember.js as\na client side framework. We help organize the Boston <a href=\"http://www.meetup.com/Boston-Ember-js\">Ember.js\nmeetup</a> and\nI recently spoke at <a href=\"http://embercamp.com\">Ember Camp in San Francisco</a>. We are already <a href=\"https://github.com/dockyard/ember-builds\">building\ntools around Ember.js</a> and hope to continue to improve and build new ones\nin the upcoming years.</p>\n\n<p>Please email <a href=\"mailto:contact@dockyard.com\">contact@dockyard.com</a> with\nall relevant information on why you would be an ideal candidate for a\nfulltime Ember.js developer.</p>\n","summary":"Work at DockYard building Ember.js apps!","illustration":null,"illustration_alt":null,"tags":["ruby","ember","javascript","office","jobs"],"shallow":false,"date":"2013-04-04T00:00:00Z"},{"id":"ruby/2013/03/29/running-postgresql-9-2-on-travis-ci","title":"Running PostgreSQL 9.2 on Travis-CI","dockyarder":"dan-mcclain","body":"<p>I spent most of yesterday trying to get PostgreSQL 9.2 running <a href=\"http://travis-ci.org\">Travis-CI</a>.\nAfter almost 30 attempts, I successfully tested <a href=\"https://github.com/dockyard/postgres_ext\">postgres_ext</a> against PostgreSQL 9.2.</p>\n\n<p>Here is the final <code>before_script</code> needed to install PostgreSQL 9.2.</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n</pre></td>\n  <td class=\"code\"><pre>before_script:\n  - sudo /etc/init.d/postgresql stop\n  - sudo cp /etc/postgresql/9.1/main/pg_hba.conf ./\n  - sudo apt-get remove postgresql postgresql-9.1 -qq --purge\n  - source /etc/lsb-release\n  - echo &quot;deb http://apt.postgresql.org/pub/repos/apt/ $DISTRIB_CODENAME-pgdg main&quot; &gt; pgdg.list\n  - sudo mv pgdg.list /etc/apt/sources.list.d/\n  - wget --quiet -O - http://apt.postgresql.org/pub/repos/apt/ACCC4CF8.asc | sudo apt-key add -\n  - sudo apt-get update\n  - sudo apt-get -o Dpkg::Options::=&quot;--force-confdef&quot; -o Dpkg::Options::=&quot;--force-confnew&quot; install postgresql-9.2 postgresql-contrib-9.2 -qq\n  - sudo /etc/init.d/postgresql stop\n  - sudo cp ./pg_hba.conf /etc/postgresql/9.2/main\n  - sudo /etc/init.d/postgresql start\n</pre></td>\n</tr></table>\n</div></div>\n<h2>Step by step explanation</h2>\n\n<h3>Out with the old</h3>\n\n<p>Currently, Travis-CI has PostgreSQL 9.1 installed with a passwordless <code>postgres</code> superuser role. We first stop the current user by calling\n<code>sudo /etc/init.d/postgresql stop</code>. We also want to copy the current <code>pg_hba.conf</code>, since we can reuse it with PostgreSQL 9.2 to disable the need\nfor a password for the <code>postgres</code> role. We then remove the currently installed version via <code>sudo apt-get remove postgresql postgresql-9.1 -qq --purge</code>.</p>\n\n<h3>Add the apt.postgresql.org repositories</h3>\n\n<p><a href=\"http://postgresql.org\">Postgresql.org</a> maintains Debian and Ubuntu packages of the current PostgreSQL 8.3, 8.4, 9.0, 9.1 and 9.2 builds at\n<a href=\"http://apt.postgresql.org\">apt.postgresql.org</a> (<a href=\"https://wiki.postgresql.org/wiki/Apt\">more\ninformation</a>). Since Travis-CI\nworkers run Ubuntu, we can leverage these packages. We first load the\nUbuntu distribution environment variables via <code>source /etc/lsb-release</code>.\nUsing the <code>$DISTRIB_CODENAME</code> variable, we can set up the pgdg.list file\nthat we will add to the apt-get sources list directory. We do so with\nthe following command:</p>\n<div class=\"highlight text \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n  <td class=\"code\"><pre>echo &quot;deb http://apt.postgresql.org/pub/repos/apt/ $DISTRIB_CODENAME-pgdg main&quot; &gt; pgdg.list\nsudo mv pgdg.list /etc/apt/sources.list.d/\n</pre></td>\n</tr></table>\n</div></div>\n<p>The last thing we have to do before we can start installing the 9.2 is\nto import postgresql.org&#39;s apt key via</p>\n<div class=\"highlight text \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>wget --quiet -O - http://apt.postgresql.org/pub/repos/apt/ACCC4CF8.asc | sudo apt-key add -\n</pre></td>\n</tr></table>\n</div></div>\n<h3>In with the new</h3>\n\n<p>After we update our package listing via <code>sudo apt-get update</code>, we can\ninstall <code>postgresql-9.2</code> and <code>postgresql-contrib-9.2</code> (needed for the\nPostgreSQL extensions) via:</p>\n<div class=\"highlight text \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>sudo apt-get -o Dpkg::Options::=&quot;--force-confdef&quot; -o Dpkg::Options::=&quot;--force-confnew&quot; install postgresql-9.2 postgresql-contrib-9.2 -qq\n</pre></td>\n</tr></table>\n</div></div>\n<p>We need the <code>Dpkg::Options</code> to automatically resolve any configuration\nfile conflicts left behind by 9.1 (even though we purge the files, for\nsome reason the <code>/etc/init.d/postgresql</code> file gets left behind). Without\nthe <code>Dpkg::Options</code>, apt-get will raise a user prompt that will hang the\nTravis-CI build.</p>\n\n<p>At this point, we have a vanilla install of PostgreSQL 9.2, which will\nprompt for a password for the <code>postgres</code> role. We then need to stop the\nserver, replace the 9.2 <code>pg_hba.conf</code> with the custom Travis-CI one we\ncopied earlier, then restart the server:</p>\n<div class=\"highlight text \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre>sudo /etc/init.d/postgresql stop\nsudo cp ./pg_hba.conf /etc/postgresql/9.2/main\nsudo /etc/init.d/postgresql start\n</pre></td>\n</tr></table>\n</div></div>\n<p>At this point, you can use any other <code>before_script</code> commands you were\npreviously using to create your database.</p>\n\n<h2>Conclusion</h2>\n\n<p>After a decent amount of trial and error, I arrived at the above\n<code>before_script</code> to install PostgreSQL 9.2. I am currently adding support\nfor <a href=\"http://www.postgresql.org/docs/9.2/static/rangetypes.html\">ranges</a>\nto postgres<em>ext, which was added in 9.2. You should be able use this\n`before</em>script` to add 9.2 to your Travis-CI builds.</p>\n","summary":"Test your gem against the latest PostgreSQL version (or an older one)","illustration":null,"illustration_alt":null,"tags":["ruby","postgresql"],"shallow":false,"date":"2013-03-29T00:00:00Z"},{"id":"ember/2013/03/27/body-class-tags-in-ember","title":"Adding route specific body class tags in Ember","dockyarder":"brian-cardarella","body":"<p>Our <a href=\"http://twitter.com/cssboy\">designer</a> likes to use body class tags\ndepending upon the context of the app he is designing. We&#39;re currently\nbuilding an Ember app and this is how I got it working:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n</pre></td>\n  <td class=\"code\"><pre>Ember.Route.reopen({\n  <span class=\"function\">activate</span>: <span class=\"keyword\">function</span>() {\n    <span class=\"keyword\">var</span> cssClass = <span class=\"local-variable\">this</span>.toCssClass();\n    <span class=\"comment\">// you probably don't need the application class</span>\n    <span class=\"comment\">// to be added to the body</span>\n    <span class=\"keyword\">if</span> (cssClass != <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">application</span><span class=\"delimiter\">'</span></span>) {\n      Ember.<span class=\"predefined\">$</span>(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">body</span><span class=\"delimiter\">'</span></span>).addClass(cssClass);\n    }\n  },\n  <span class=\"function\">deactivate</span>: <span class=\"keyword\">function</span>() {\n    Ember.<span class=\"predefined\">$</span>(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">body</span><span class=\"delimiter\">'</span></span>).removeClass(<span class=\"local-variable\">this</span>.toCssClass());\n  },\n  <span class=\"function\">toCssClass</span>: <span class=\"keyword\">function</span>() {\n    <span class=\"keyword\">return</span> <span class=\"local-variable\">this</span>.routeName.replace(<span class=\"regexp\"><span class=\"delimiter\">/</span><span class=\"content\">\\.</span><span class=\"delimiter\">/</span><span class=\"modifier\">g</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">-</span><span class=\"delimiter\">'</span></span>).dasherize();\n  }\n});\n</pre></td>\n</tr></table>\n</div></div>","summary":"For design!","illustration":null,"illustration_alt":null,"tags":["ember","javascript","design"],"shallow":false,"date":"2013-03-27T00:00:00Z"},{"id":"ruby/2013/03/26/concurrent-indexes-in-postgresql-for-rails-4-and-postgres_ext","title":"Concurrent Indexes in PostgreSQL for Rails 4 and Postgres_ext","dockyarder":"dan-mcclain","body":"<p>PostgreSQL allows you to <a href=\"http://www.postgresguide.com/performance/indexes.html#create-index-concurrently\">create your indexes\nconcurrently</a>\nso that your table isn&#39;t locked as the index builds. This allows you to\navoid taking a performance hit when adding a new index to a large table.\nYesterday, I submitted a <a href=\"https://github.com/rails/rails/pull/9923\">pull request to\nRails</a> that as merged in this\nmorning that allows you to add concurrent indexes through the\n<code>add_index</code> method in your migrations. To create an index concurrently,\nyou add the <code>algorithm: :concurrently</code> option to the <code>add_index</code> call</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>add_index <span class=\"symbol\">:table</span>, <span class=\"symbol\">:column</span>, <span class=\"key\">algorithm</span>: <span class=\"symbol\">:concurrently</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>A side effect of this commit is that it also enables the <code>algorithm</code>\noption for MySQL too, so MySQL users can create indexes using <code>DEFAULT</code>,\n<code>INPLACE</code> or <code>COPY</code> algorithm when creating indexes.</p>\n\n<h2>Postgres_ext gains concurrent index support as well</h2>\n\n<p>This morning I added support for concurrent indexes to\n<a href=\"https://github.com/dockyard/postgres_ext\">postgres_ext</a> as well, using\nthe same syntax as the Rails 4 example above. The 0.3.0 version of\npostgres_ext was released, which contains this, and a <a href=\"https://github.com/dockyard/postgres_ext/blob/master/CHANGELOG.md#030\">slew of other\nimprovements as\nwell</a>.\nOne thing to note, the <code>index_type</code> option for <code>add_index</code> has been\nrenamed to <code>using</code> to match Rails 4.</p>\n\n<p>If you have any features you want to see in postgres_ext or have any\nissues, <a href=\"https://github.com/dockyard/postgres_ext/issue\">open an issue</a>!</p>\n","summary":"Prevent new indexes from locking up your tables","illustration":null,"illustration_alt":null,"tags":["ruby","ruby-on-rails","postgresql"],"shallow":false,"date":"2013-03-26T00:00:00Z"},{"id":"ruby/2013/03/25/igata","title":"Igata","dockyarder":"brian-cardarella","body":"<p><a href=\"https://github.com/dockyard/igata\">View the code</a></p>\n\n<p><a href=\"http://igata.io\">Try it out!</a></p>\n\n<p>A year and a half ago I started thinking about a product I wanted to\nbuild. I am a big fan of Heroku and I felt something missing from their\neco-system was an App Store. Similar to the WordPress Theme Store. This\nHeroku App Store would allow developers to create fully realized\napplications and sell them to non developers. The person on the\npurchasing side wouldn&#39;t even need to know about Heroku. We built this\nproduct over the past year, got the &quot;thumbs up&quot; from Heroku, finally got bored with the idea of launching it, and\nare now open sourcing it for all to see. I will go into the challenges we\nfaced as a consulting firm building a product and why we decided to give\nthis away rather than &quot;go for it&quot;.</p>\n\n<h2>Concept to reality</h2>\n\n<p>The concept was simple: App Store for Heroku. I built the original app\ncode in May of 2012. I would say about 50% of the app was completed in a\nweek. However, what I quickly learned is that balancing consulting a\nproduct development is not easy. Quickly development on Igata turned\ninto a see-saw. A day of work here and there in between contracts. It\nbecame very difficult to stay focused and keep interested in the\nproject. But I believed it was one that could do well if positioned\nproperly. The idea of proving an additional revenue stream to Heroku\nalso felt like a good challenge.</p>\n\n<p>I let the app sit for a few months while we were working on a very large\ncontract over the summer. Then the Rails Rumble came and I was a judge,\nI saw an app called <a href=\"https://deploybutton.com\">Deploy Button</a> and I\nfreaked out. This was essentially what we had already built but without\nthe purchasing aspect. I emailed my team and told them we weren&#39;t taking\nany more contracts until we finished Igata. This proved to not work very\nwell in reality. As a Rails consultancy we are not cheap but you don&#39;t\nrealize just how expensive you are until there is no money coming in. So\nwe went back on contract and shelved Igata, again. I kept coming back to\nit every so often. Finally I decided to open source it.</p>\n\n<h2>Validation</h2>\n\n<p>It wasn&#39;t until I made the decision to open source Igata that I started\nto get some validation of the concept. I was very secretive about the\napp as I figured if Heroku found out about it, and liked the idea, they\nwould just toss a few devs at it for a week or two and come out with an\n&quot;official&quot; app store. But now that I was going to OSS is fuck it, I&#39;ll\ntell everybody! I told a few friends that work at Heroku and in the end\nit was foolish of me to worry about that sort of thing. Several people\nencouraged me not to open source and just finish and release. So I went\nto Waza (Heroku&#39;s Conference) and met with a few people from Heroku&#39;s\nPartner program, once I showed them the app they loved it.</p>\n\n<p>I came home a few weeks ago, pumped to finish the app.</p>\n\n<h2>Back to Open Sourcing</h2>\n\n<p>I wouldn&#39;t say doubt began to creep back in, just more that I really\ndidn&#39;t like the idea of what would come of Heroku if it it was a\nsuccess. Maintaining an app store and building it out really doesn&#39;t\ninterest me at all. I had a choice: shit or get off the pot. I&#39;ve now\ndecided to get off the pot.</p>\n\n<p>I&#39;m happy to go into more details on what our business model would have\nbeen in another post if people are interested. The app itself is about\n95% complete. There were some changes to the payment system we would\nmake. But overall I&#39;m happy with what we built considering the very\ndisrupted development schedule on it. I hope this app can serve someone\nwell.</p>\n","summary":"We built an App Store for Heroku, got bored with it, and now open sourced it","illustration":null,"illustration_alt":null,"tags":["ruby","products","business"],"shallow":false,"date":"2013-03-25T00:00:00Z"},{"id":"ember/2013/03/21/capybara-and-unique-labels","title":"Fixing Capybara 2.0 and Labels","dockyarder":"brian-cardarella","body":"<p>I love Capybara, it makes integration testing a breeze. However, one of\nthe decisions made for Capybara 2.0 confuses an annoys me. In Capybara\n1.x you could do the following:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n  <td class=\"code\"><pre>fill_in <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Password</span><span class=\"delimiter\">'</span></span>, <span class=\"symbol\">:with</span> =&gt; <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">123456</span><span class=\"delimiter\">'</span></span>\nfill_in <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Password confirmation</span><span class=\"delimiter\">'</span></span>, <span class=\"symbol\">:with</span> =&gt; <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">123456</span><span class=\"delimiter\">'</span></span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>And everything worked. In Capybara 2.0 this does not work. Capybara will\nnotice two labels that contain &#39;Password&#39; and complain about an\nambiguous locator. The suggested work around is to attach meta data to\nthe input element and use that for the selector. There are two reasons\nwhy I don&#39;t like this. First, I am doing Ember development now and I\nhave no control of the ID, it is generated by the framework. Second, I\nbelieve that the integration test should be recreating the steps (as\nmuch as possible) as if a user were actually using the app. Something\nlike:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n  <td class=\"code\"><pre>fill_in <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">[data-name=&quot;password&quot;]</span><span class=\"delimiter\">'</span></span>, <span class=\"symbol\">:with</span> =&gt; <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">123456</span><span class=\"delimiter\">'</span></span>\nfill_in <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">[data-name=&quot;password_confirmation&quot;]</span><span class=\"delimiter\">'</span></span>, <span class=\"symbol\">:with</span> =&gt; <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">123456</span><span class=\"delimiter\">'</span></span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Doesn&#39;t sit right with me. Users are looking at the text, not the selectors.\nI get that apps have the ability to show different languages but that doesn&#39;t conern me, I don&#39;t need\nto test if the Rails <code>i18n</code> works or not. I just care about asserting the happy and sad\npaths in my app.</p>\n\n<p>So, to fix this problem simply add the\nfollowing code into your <code>test_helper.rb</code></p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">module</span> <span class=\"class\">XPath::HTML</span>\n  protected\n\n  <span class=\"keyword\">def</span> <span class=\"function\">locate_field</span>(xpath, locator)\n    locate_field = xpath[attr(<span class=\"symbol\">:id</span>).equals(locator) | attr(<span class=\"symbol\">:name</span>).equals(locator) | attr(<span class=\"symbol\">:placeholder</span>).equals(locator) | attr(<span class=\"symbol\">:id</span>).equals(anywhere(<span class=\"symbol\">:label</span>)[string.n.equals(locator)].attr(<span class=\"symbol\">:for</span>))]\n    locate_field += descendant(<span class=\"symbol\">:label</span>)[string.n.contains(locator)].descendant(xpath)\n    locate_field[~attr(<span class=\"symbol\">:disabled</span>)]\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>And you should be all set!</p>\n","summary":"Capybara is broken, they refused to fix. Here is the monkey patch","illustration":null,"illustration_alt":null,"tags":["ember","testing"],"shallow":false,"date":"2013-03-21T00:00:00Z"},{"id":"announcement/2013/03/19/mike-sager-joins-dockyard","title":"Mike Sager Joins DockYard","dockyarder":"brian-cardarella","body":"<p><img src=\"/images/mike-sager.png\" alt=\"Sager\"></p>\n\n<p>I&#39;m very happy to announce that Mike Sager has joined DockYard! Sager\nand I met while working on The Campaign That Shall Not Be Named (it was\na very &quot;special&quot; one in MA) we kept in touch on and off after that until\nwe recently worked together on a project for the AFL-CIO.</p>\n\n<p>Sager brings an intimate knowledge of the progressive political tech\narena. DockYard is already making a great name for itself with political\ntech and NPOs and we&#39;re looking forward to the klout that Sager will\nbring to the table.</p>\n\n<p>While not yet &quot;official&quot; we will soon be opening an office in\nWashington, DC. Sager and Chris Gill will be running this office and we\nare looking to hire Rails developers that have experience building apps\nin politics. <a href=\"mailto:contact@dockyard.com\">Join us!</a></p>\n","summary":"Sager!!!!!","illustration":null,"illustration_alt":null,"tags":["announcement","office"],"shallow":false,"date":"2013-03-19T00:00:00Z"},{"id":"ember/2013/02/21/ember-easy-form","title":"Introducing Ember-EasyForm","dockyarder":"brian-cardarella","body":"<p><a href=\"https://github.com/dockyard/ember-easyForm\">View the project on GitHub</a></p>\n\n<p>One of the more tedious tasks in Ember is writing forms. It is not\nuncommon to have to write something like so:</p>\n<div class=\"highlight handlebars \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n</pre></td>\n  <td class=\"code\"><pre><span class=\"tag\">&lt;form&gt;</span>\n  <span class=\"tag\">&lt;div</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">input string</span><span class=\"delimiter\">&quot;</span></span><span class=\"tag\">&gt;</span>\n    <span class=\"tag\">&lt;label</span> <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">bindAttr</span> <span class=\"attribute-name\">for</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">firstNameField.field_id</span><span class=\"delimiter\">&quot;</span></span><span class=\"inline-delimiter\">}}</span></span><span class=\"tag\">&gt;</span>First name<span class=\"tag\">&lt;/label&gt;</span>\n    <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">view</span> <span class=\"attribute-name\">Ember.TextField</span> <span class=\"attribute-name\">valueBinding</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">firstName</span><span class=\"delimiter\">'</span></span> <span class=\"attribute-name\">name</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">first_name</span><span class=\"delimiter\">'</span></span> <span class=\"attribute-name\">viewName</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">firstNameField</span><span class=\"delimiter\">'</span></span><span class=\"inline-delimiter\">}}</span></span>\n  <span class=\"tag\">&lt;/div&gt;</span>\n  <span class=\"tag\">&lt;div</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">input string</span><span class=\"delimiter\">&quot;</span></span><span class=\"tag\">&gt;</span>\n    <span class=\"tag\">&lt;label</span> <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">bindAttr</span> <span class=\"attribute-name\">for</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">lastNameField.field_id</span><span class=\"delimiter\">&quot;</span></span><span class=\"inline-delimiter\">}}</span></span><span class=\"tag\">&gt;</span>Last name<span class=\"tag\">&lt;/label&gt;</span>\n    <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">view</span> <span class=\"attribute-name\">Ember.TextField</span> <span class=\"attribute-name\">valueBinding</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">firstName</span><span class=\"delimiter\">'</span></span> <span class=\"attribute-name\">name</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">last_name</span><span class=\"delimiter\">'</span></span> <span class=\"attribute-name\">viewName</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">lastNameField</span><span class=\"delimiter\">'</span></span><span class=\"inline-delimiter\">}}</span></span>\n  <span class=\"tag\">&lt;/div&gt;</span>\n  <span class=\"tag\">&lt;div</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">input string</span><span class=\"delimiter\">&quot;</span></span><span class=\"tag\">&gt;</span>\n    <span class=\"tag\">&lt;label</span> <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">bindAttr</span> <span class=\"attribute-name\">for</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">ageField.field_id</span><span class=\"delimiter\">&quot;</span></span><span class=\"inline-delimiter\">}}</span></span><span class=\"tag\">&gt;</span>Age<span class=\"tag\">&lt;/label&gt;</span>\n    <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">view</span> <span class=\"attribute-name\">Ember.TextField</span> <span class=\"attribute-name\">valueBinding</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">age</span><span class=\"delimiter\">'</span></span> <span class=\"attribute-name\">name</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">age</span><span class=\"delimiter\">'</span></span> <span class=\"attribute-name\">viewName</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">ageField</span><span class=\"delimiter\">'</span></span><span class=\"inline-delimiter\">}}</span></span>\n  <span class=\"tag\">&lt;/div&gt;</span>\n  <span class=\"tag\">&lt;input</span> <span class=\"attribute-name\">type</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">submit</span><span class=\"delimiter\">&quot;</span></span> <span class=\"attribute-name\">value</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">Submit</span><span class=\"delimiter\">&quot;</span></span><span class=\"tag\">&gt;</span>\n<span class=\"tag\">&lt;/form&gt;</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>And this is just a very simple form, but what if we could write this:</p>\n<div class=\"highlight handlebars \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n  <td class=\"code\"><pre><span class=\"inline\"><span class=\"inline-delimiter\">{{#</span><span class=\"attribute-name\">formFor</span> <span class=\"attribute-name\">controller</span><span class=\"inline-delimiter\">}}</span></span>\n  <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">input</span> <span class=\"attribute-name\">firstName</span><span class=\"inline-delimiter\">}}</span></span>\n  <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">input</span> <span class=\"attribute-name\">lastName</span><span class=\"inline-delimiter\">}}</span></span>\n  <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">input</span> <span class=\"attribute-name\">age</span><span class=\"inline-delimiter\">}}</span></span>\n  <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">submit</span><span class=\"inline-delimiter\">}}</span></span>\n<span class=\"inline\"><span class=\"inline-delimiter\">{{/</span><span class=\"attribute-name\">formFor</span><span class=\"inline-delimiter\">}}</span></span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>That is <em>much</em> more concise! We pass the <code>controller</code> as the context to\nthe <code>formFor</code> Handlebars helper. Then we can simply call <code>input</code> for\neach property we want.</p>\n\n<p>By default <code>EasyForm</code> will use text fields for the rendered input.\nHowever, in certain cases it will attempt to properly set the <code>type</code>. If\nthe property contains <code>email</code> the <code>type</code> will be set to <code>email</code> or of\nthe property contains <code>password</code> the <code>type</code> will be set to <code>password</code>.\nYou can override this and set the type yourself:</p>\n<div class=\"highlight handlebars \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre><span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">input</span> <span class=\"attribute-name\">code</span> <span class=\"attribute-name\">type</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">hidden</span><span class=\"delimiter\">&quot;</span></span><span class=\"inline-delimiter\">}}</span></span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Currently the only other input type supported is <code>textarea</code>, you can\ncreate one with:</p>\n<div class=\"highlight handlebars \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre><span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">input</span> <span class=\"attribute-name\">bio</span> <span class=\"attribute-name\">as</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">text</span><span class=\"delimiter\">&quot;</span></span><span class=\"inline-delimiter\">}}</span></span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>I plan on adding support for the other input types such as <code>select</code> in\nthe next few weeks.</p>\n\n<h2>Validations</h2>\n\n<p>This implementation has basic support for property validations.\nCurrently it works with <code>ember-data-validations</code> but that project might\nget rolled into a larger Ember Object Validation effort and at that time\nI will change <code>ember-easyForm</code> to support whatever that is.</p>\n\n<p>Validations will fire on <code>onFocusOut</code> for each input and will render\ninto a <code>&lt;span class=&quot;error&quot;&gt;</code> element associated with the given input.</p>\n\n<p>If your model doesn&#39;t have validations this behavior will be ignored.</p>\n\n<h2>Form Submit</h2>\n\n<p>The <code>submit</code> helper will render a submit input but you can just write\none yourself if you wish. The <code>onSubmit</code> action for the wrapping <code>form</code>\nelement will do the following:</p>\n\n<ol>\n<li>Attempt to validate for object. If validations are not supported it\nwill go to step 3.</li>\n<li>If validations fail form submit is interrupted and errors are\nrendered. If not go to step 3.</li>\n<li>The view for the <code>form</code> element will attempt to call a <code>submit</code>\naction on the controller. This is an action that you need to supply\nyourself:</li>\n</ol>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n  <td class=\"code\"><pre>App.NewUserController = Ember.ObjectController.extend({\n  <span class=\"function\">submit</span>: <span class=\"keyword\">function</span>() {\n    <span class=\"comment\">// handle form submit here</span>\n  }\n});\n</pre></td>\n</tr></table>\n</div></div>\n<h2>More to come!</h2>\n\n<p>This is very close to what I recently (and briefly) showed at\n<a href=\"http://www.embercamp.com\">EmberCamp</a>\nlast week. I hope to continue to build this project into a form builder\nthat evrerybody will be happy to use. <a href=\"https://github.com/dockyard/ember-easyForm/issues\">Please feel free to propose new\nidea in the issues for this project on GitHub</a></p>\n","summary":"A SimpleForm-like FormBuilder for Ember","illustration":null,"illustration_alt":null,"tags":["ember","javascript","ember-libraries"],"shallow":false,"date":"2013-02-21T00:00:00Z"},{"id":"ember/2013/01/10/building-an-ember-app-with-rails-api-part-3","title":"Building an Ember app with RailsAPI - Part 3","dockyarder":"brian-cardarella","body":"<p><strong>This article was last updated on May 28, 2013 and reflects the state\n of Ember (1.0.0-rc4) and the latest build of Ember Data (0.13) as of\nthat date.</strong></p>\n\n<p><a href=\"https://github.com/bcardarella/ember-railsapi\">Fork the project on Github!</a></p>\n\n<p><a href=\"http://ember-rails-api.herokuapp.com/\">Use the app live on Heroku</a></p>\n\n<p>In <a href=\"/ember/2013/01/07/building-an-ember-app-with-rails-api-part-1.html\">Part 1</a> I showed you how to setup a <code>Rails-API</code> app for Ember.</p>\n\n<p>In <a href=\"/ember/2013/01/09/building-an-ember-app-with-rails-api-part-2.html\">Part 2</a> I showed you the basics of building an Ember app, reading from a backend API and displaying that information.</p>\n\n<p>Today we&#39;re going to do some coding on the Rails side and the Ember side to add Creating, Updating, and Destroying records.</p>\n\n<h2>Part 3 - The Big Finish</h2>\n\n<p>In <a href=\"http://reefpoints.dockyard.com/ember/2013/01/07/building-an-ember-app-with-rails-api-part-1.html\">Part 1</a> we setup the backend using <a href=\"https://github.com/rails-api/rails-api/\">Rails API</a>. In <a href=\"http://reefpoints.dockyard.com/ember/2013/01/09/building-an-ember-app-with-rails-api-part-2.html\">Part 2</a> we built out the basics of an Ember app, reading from a remote data source and displaying that data. Now we&#39;re going to add the ability to Create, Update, and Destroy that data. This part will be a mix of Ember and Rails code.</p>\n\n<p><em>Note: If you have been following along that <a href=\"http://reefpoints.dockyard.com/ember/2013/01/09/building-an-ember-app-with-rails-api-part-2.html\">Part 2</a> was recently updated to reflect new changes to the Ember Router, you will need to go back and update your code. Absolute make sure to update your ember.js and ember-data.js dependencies as they have been updated on the github repo</em></p>\n\n<h3>Create</h3>\n\n<p>Let&#39;s start by adding a <code>Create</code> button to our index page:</p>\n<div class=\"highlight handlebars \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre><span class=\"inline\"><span class=\"inline-delimiter\">{{#</span><span class=\"attribute-name\">linkTo</span> <span class=\"error\">'</span><span class=\"attribute-name\">users.new</span><span class=\"error\">'</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">btn btn-primary</span><span class=\"delimiter\">'</span></span><span class=\"inline-delimiter\">}}</span></span>Create<span class=\"inline\"><span class=\"inline-delimiter\">{{/</span><span class=\"attribute-name\">linkTo</span><span class=\"inline-delimiter\">}}</span></span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>We need to add the proper route so the index page doesn&#39;t blow up. While we&#39;re in here we&#39;ll add the <code>edit</code> route as well.</p>\n<div class=\"highlight coffeescript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n  <td class=\"code\"><pre>App.Router.map -&gt;\n  @resource 'users', -&gt;\n    @route 'new'\n    @route 'edit',\n      path: '/:user_id/edit'\n    @route 'show',\n      path: '/:user_id'\n</pre></td>\n</tr></table>\n</div></div>\n<p>And now we can add the <code>UsersNewRoute</code></p>\n<div class=\"highlight coffeescript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n  <td class=\"code\"><pre>App.UsersNewRoute = App.UsersRoute.extend\n  model: -&gt;\n    App.User.createRecord()\n  setupController: (controller, model) -&gt;\n    controller.set('content', model)\n</pre></td>\n</tr></table>\n</div></div>\n<p>Don&#39;t be fooled by the <code>createRecord()</code> call. This will not write anything to the backend. This call is simply used to create a new model. Now let&#39;s create the template <code>app/assets/javascripts/templates/users/new.hbs</code></p>\n<div class=\"highlight handlebars \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n</pre></td>\n  <td class=\"code\"><pre><span class=\"tag\">&lt;h1&gt;</span>Create <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">fullName</span><span class=\"inline-delimiter\">}}</span></span><span class=\"tag\">&lt;/h1&gt;</span>\n<span class=\"tag\">&lt;form&gt;</span>\n  <span class=\"tag\">&lt;fieldset&gt;</span>\n    <span class=\"tag\">&lt;div&gt;</span>\n      <span class=\"tag\">&lt;label</span> <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">bindAttr</span> <span class=\"attribute-name\">for</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">firstNameField.elementId</span><span class=\"delimiter\">&quot;</span></span><span class=\"inline-delimiter\">}}</span></span><span class=\"tag\">&gt;</span>First Name<span class=\"tag\">&lt;/label&gt;</span>\n      <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">view</span> <span class=\"attribute-name\">Ember.TextField</span> <span class=\"attribute-name\">valueBinding</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">firstName</span><span class=\"delimiter\">'</span></span> <span class=\"attribute-name\">name</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">first_name</span><span class=\"delimiter\">'</span></span> <span class=\"attribute-name\">viewName</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">firstNameField</span><span class=\"delimiter\">'</span></span><span class=\"inline-delimiter\">}}</span></span>\n    <span class=\"tag\">&lt;/div&gt;</span>\n    <span class=\"tag\">&lt;div&gt;</span>\n      <span class=\"tag\">&lt;label</span> <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">bindAttr</span> <span class=\"attribute-name\">for</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">lastNameField.elementId</span><span class=\"delimiter\">'</span></span><span class=\"inline-delimiter\">}}</span></span><span class=\"tag\">&gt;</span>Last Name<span class=\"tag\">&lt;/label&gt;</span>\n      <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">view</span> <span class=\"attribute-name\">Ember.TextField</span> <span class=\"attribute-name\">valueBinding</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">lastName</span><span class=\"delimiter\">'</span></span> <span class=\"attribute-name\">name</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">last_name</span><span class=\"delimiter\">'</span></span> <span class=\"attribute-name\">viewName</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">lastNameField</span><span class=\"delimiter\">'</span></span><span class=\"inline-delimiter\">}}</span></span>\n    <span class=\"tag\">&lt;/div&gt;</span>\n    <span class=\"tag\">&lt;div&gt;</span>\n      <span class=\"tag\">&lt;label</span> <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">bindAttr</span> <span class=\"attribute-name\">for</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">quoteField.elementId</span><span class=\"delimiter\">'</span></span><span class=\"inline-delimiter\">}}</span></span><span class=\"tag\">&gt;</span>Quote<span class=\"tag\">&lt;/label&gt;</span>\n      <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">view</span> <span class=\"attribute-name\">Ember.TextArea</span> <span class=\"attribute-name\">valueBinding</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">quote</span><span class=\"delimiter\">'</span></span> <span class=\"attribute-name\">name</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">quote</span><span class=\"delimiter\">'</span></span> <span class=\"attribute-name\">viewName</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">quoteField</span><span class=\"delimiter\">'</span></span><span class=\"inline-delimiter\">}}</span></span>\n    <span class=\"tag\">&lt;/div&gt;</span>\n    <span class=\"tag\">&lt;a</span> <span class=\"attribute-name\">href</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">#</span><span class=\"delimiter\">'</span></span> <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">action</span> <span class=\"attribute-name\">save</span><span class=\"inline-delimiter\">}}</span></span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">btn btn-success</span><span class=\"delimiter\">'</span></span><span class=\"tag\">&gt;</span>Create<span class=\"tag\">&lt;/a&gt;</span>\n  <span class=\"tag\">&lt;/fieldset&gt;</span>\n<span class=\"tag\">&lt;/form&gt;</span>\n<span class=\"tag\">&lt;div</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">page-header</span><span class=\"delimiter\">'</span></span><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/div&gt;</span>\n\n<span class=\"tag\">&lt;a</span> <span class=\"attribute-name\">href</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">#</span><span class=\"delimiter\">'</span></span> <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">action</span> <span class=\"attribute-name\">cancel</span><span class=\"inline-delimiter\">}}</span></span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">btn btn-inverse</span><span class=\"delimiter\">'</span></span><span class=\"tag\">&gt;</span>Cancel<span class=\"tag\">&lt;/a&gt;</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Next we&#39;ll add <code>app/assets/javascripts/controllers/users/newController.coffeescript</code></p>\n<div class=\"highlight coffeescript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n</pre></td>\n  <td class=\"code\"><pre>App.UsersNewController = Ember.ObjectController.extend\n  headerTitle: 'Create'\n  buttonTitle: 'Create'\n\n  save: -&gt;\n    @content.save().then =&gt;\n      @transitionToRoute('users.show', @content)\n\n  cancel: -&gt;\n    @content.deleteRecord()\n    @transitionToRoute('users.index')\n</pre></td>\n</tr></table>\n</div></div>\n<p>The first two functions <code>save</code> and <code>cancel</code> are actions that are mapped in the template. Let&#39;s break down each:</p>\n\n<ul>\n<li><code>save</code> will make a call to <code>this.store.commit()</code>. You will notice we are not modifying a model, assigning params, etc... as you would in a Rails app. Keep in mind that when you modify data that is bound in the form you are actually modifying the data in the model itself. The datastore in Ember needs to be directed when these modifications should be made &quot;permanent&quot;, and because we are using the RESTAdapter Ember will attempt to write these changes to the backend.</li>\n<li><code>cancel</code> If the user decides to not create a new user we must delete the record we created then transition to the <code>index</code> page.</li>\n</ul>\n\n<p><a href=\"http://emberjs.com/guides/models/model-lifecycle\">Learn more about the Ember Model Lifecycle</a></p>\n\n<p>Finally we&#39;re going to hook up the back end in <code>app/controllers/users_controller.rb</code></p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">def</span> <span class=\"function\">create</span>\n  user = <span class=\"constant\">User</span>.new(params[<span class=\"symbol\">:user</span>])\n\n  <span class=\"keyword\">if</span> user.save\n    render <span class=\"key\">json</span>: user\n  <span class=\"keyword\">else</span>\n    render <span class=\"key\">json</span>: user, <span class=\"key\">status</span>: <span class=\"integer\">422</span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>It has been mentioned that <code>422</code> is the proper status code for validation failures. Personally I would prefer to use <code>respond_with</code> but it isn&#39;t part of the default Rails-API stack, <a href=\"https://groups.google.com/forum/?fromgroups=#!topic/rails-api-core/QhPh2VG7yTU\">hopefully this will change</a>.</p>\n\n<p>Now let&#39;s run our app and see how it goes.</p>\n\n<p><img src=\"http://i.imgur.com/kFC9arb.png\" alt=\"New1\"></p>\n\n<p>Whoops, we have <code>undefined undefined</code> for the <code>fullName</code>. Let&#39;s set default values of an empty string in our user model:</p>\n<div class=\"highlight coffeescript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n  <td class=\"code\"><pre>App.User = DS.Model.extend\n  firstName: DS.attr('string', defaultValue: '' )\n  lastName: DS.attr('string', defaultValue: '' )\n  quote: DS.attr('string')\n  fullName: (-&gt;\n    &quot;#{@get('firstName')} #{@get('lastName')}&quot;\n  ).property('firstName', 'lastName')\n</pre></td>\n</tr></table>\n</div></div>\n<p>Now when we add data and create it will write to the back end, take us to the show page. When can then click <code>Back</code> and we can see the record has been automatically added to the collection on the <code>index</code> page.</p>\n\n<p>Adding <code>Edit</code> should be straight forward now that we have done create. Start will adding the route:</p>\n<div class=\"highlight coffeescript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n  <td class=\"code\"><pre>App.UsersEditRoute = Ember.Route.extend\n  model: (params) -&gt;\n    App.User.find(params.user_id)\n  setupController: (controller, model) -&gt;\n    controller.set('content', model)\n    @controllerFor('application').set('currentRoute', 'users')\n</pre></td>\n</tr></table>\n</div></div>\n<p>You&#39;ll notice that this route is identical to <code>App.UsersShowRoute</code> we wrote in Part 2, let&#39;s DRY this up</p>\n<div class=\"highlight coffeescript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n  <td class=\"code\"><pre>App.UserRoute = Ember.Route.extend\n  model: (params) -&gt;\n    App.User.find(params.user_id)\n  setupController: (controller, model) -&gt;\n    controller.set('content', model)\n    @controllerFor('application').set('currentRoute', 'users')\n\nApp.UsersShowRoute = App.UserRoute.extend()\nApp.UsersEditRoute = App.UserRoute.extend()\n</pre></td>\n</tr></table>\n</div></div>\n<p>Next we&#39;ll add the edit link to <code>app/assets/javascripts/templates/users/show.hbs</code></p>\n<div class=\"highlight handlebars \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre><span class=\"inline\"><span class=\"inline-delimiter\">{{#</span><span class=\"attribute-name\">linkTo</span> <span class=\"error\">'</span><span class=\"attribute-name\">users.edit</span><span class=\"error\">'</span> <span class=\"attribute-name\">content</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">btn btn-primary</span><span class=\"delimiter\">'</span></span><span class=\"inline-delimiter\">}}</span></span>Edit<span class=\"inline\"><span class=\"inline-delimiter\">{{/</span><span class=\"attribute-name\">linkTo</span><span class=\"inline-delimiter\">}}</span></span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Now the edit template itself in <code>app/assets/javascripts/templates/users/edit.hbs</code></p>\n<div class=\"highlight handlebars \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n</pre></td>\n  <td class=\"code\"><pre><span class=\"tag\">&lt;h1&gt;</span>Edit <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">fullName</span><span class=\"inline-delimiter\">}}</span></span><span class=\"tag\">&lt;/h1&gt;</span>\n<span class=\"tag\">&lt;form&gt;</span>\n  <span class=\"tag\">&lt;fieldset&gt;</span>\n    <span class=\"tag\">&lt;div&gt;</span>\n      <span class=\"tag\">&lt;label</span> <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">bindAttr</span> <span class=\"attribute-name\">for</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">firstNameField.elementId</span><span class=\"delimiter\">&quot;</span></span><span class=\"inline-delimiter\">}}</span></span><span class=\"tag\">&gt;</span>First Name<span class=\"tag\">&lt;/label&gt;</span>\n      <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">view</span> <span class=\"attribute-name\">Ember.TextField</span> <span class=\"attribute-name\">valueBinding</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">firstName</span><span class=\"delimiter\">'</span></span> <span class=\"attribute-name\">name</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">first_name</span><span class=\"delimiter\">'</span></span> <span class=\"attribute-name\">viewName</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">firstNameField</span><span class=\"delimiter\">'</span></span><span class=\"inline-delimiter\">}}</span></span>\n    <span class=\"tag\">&lt;/div&gt;</span>\n    <span class=\"tag\">&lt;div&gt;</span>\n      <span class=\"tag\">&lt;label</span> <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">bindAttr</span> <span class=\"attribute-name\">for</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">lastNameField.elementId</span><span class=\"delimiter\">'</span></span><span class=\"inline-delimiter\">}}</span></span><span class=\"tag\">&gt;</span>Last Name<span class=\"tag\">&lt;/label&gt;</span>\n      <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">view</span> <span class=\"attribute-name\">Ember.TextField</span> <span class=\"attribute-name\">valueBinding</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">lastName</span><span class=\"delimiter\">'</span></span> <span class=\"attribute-name\">name</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">last_name</span><span class=\"delimiter\">'</span></span> <span class=\"attribute-name\">viewName</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">lastNameField</span><span class=\"delimiter\">'</span></span><span class=\"inline-delimiter\">}}</span></span>\n    <span class=\"tag\">&lt;/div&gt;</span>\n    <span class=\"tag\">&lt;div&gt;</span>\n      <span class=\"tag\">&lt;label</span> <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">bindAttr</span> <span class=\"attribute-name\">for</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">quoteField.elementId</span><span class=\"delimiter\">'</span></span><span class=\"inline-delimiter\">}}</span></span><span class=\"tag\">&gt;</span>Quote<span class=\"tag\">&lt;/label&gt;</span>\n      <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">view</span> <span class=\"attribute-name\">Ember.TextArea</span> <span class=\"attribute-name\">valueBinding</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">quote</span><span class=\"delimiter\">'</span></span> <span class=\"attribute-name\">name</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">quote</span><span class=\"delimiter\">'</span></span> <span class=\"attribute-name\">viewName</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">quoteField</span><span class=\"delimiter\">'</span></span><span class=\"inline-delimiter\">}}</span></span>\n    <span class=\"tag\">&lt;/div&gt;</span>\n    <span class=\"tag\">&lt;a</span> <span class=\"attribute-name\">href</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">#</span><span class=\"delimiter\">'</span></span> <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">action</span> <span class=\"attribute-name\">save</span><span class=\"inline-delimiter\">}}</span></span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">btn btn-success</span><span class=\"delimiter\">'</span></span><span class=\"tag\">&gt;</span>Update<span class=\"tag\">&lt;/a&gt;</span>\n  <span class=\"tag\">&lt;/fieldset&gt;</span>\n<span class=\"tag\">&lt;/form&gt;</span>\n<span class=\"tag\">&lt;div</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">page-header</span><span class=\"delimiter\">'</span></span><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/div&gt;</span>\n\n<span class=\"tag\">&lt;a</span> <span class=\"attribute-name\">href</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">#</span><span class=\"delimiter\">'</span></span> <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">action</span> <span class=\"attribute-name\">cancel</span> <span class=\"attribute-name\">target</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">controller</span><span class=\"delimiter\">'</span></span><span class=\"inline-delimiter\">}}</span></span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">btn btn-inverse</span><span class=\"delimiter\">'</span></span><span class=\"tag\">&gt;</span>Cancel<span class=\"tag\">&lt;/a&gt;</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>And now the controller <code>app/assets/javascripts/controllers/users/editController.coffee</code></p>\n<div class=\"highlight coffeescript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n</pre></td>\n  <td class=\"code\"><pre>App.UsersEditController = Ember.ObjectController.extend\n  destroy: -&gt;\n    @content.deleteRecord()\n    @store.commit()\n    @transitionTo('users.index')\n\n  save: -&gt;\n    @content.save().then =&gt;\n      @transitionToRoute('users.show', @content)\n\n  cancel: -&gt;\n    if @content.isDirty\n      @content.rollback()\n    @transitionTo('users.show', @content)\n\n  buttonTitle: 'Edit'\n  headerTitle: 'Editing'\n</pre></td>\n</tr></table>\n</div></div>\n<p>This controller looks similar to <code>App.UsersNewController</code> but let&#39;s explore the differences</p>\n\n<ul>\n<li><code>save</code> here because the model already has an <code>id</code> we can commit to the datastore and transition.</li>\n<li><code>cancel</code> instead of deleting the record we want to rollback to its previous state. And we can only rollback if the record has changed.</li>\n</ul>\n\n<p>I&#39;m sure you know what is next. The <code>new</code> template is nearly identical to the <code>edit</code> template. Let&#39;s create <code>app/assets/javascripts/templates/users/form.hbs</code></p>\n<div class=\"highlight handlebars \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n</pre></td>\n  <td class=\"code\"><pre><span class=\"tag\">&lt;h1&gt;</span><span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">headerTitle</span><span class=\"inline-delimiter\">}}</span></span> <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">fullName</span><span class=\"inline-delimiter\">}}</span></span><span class=\"tag\">&lt;/h1&gt;</span>\n<span class=\"tag\">&lt;form&gt;</span>\n  <span class=\"tag\">&lt;fieldset&gt;</span>\n    <span class=\"tag\">&lt;div&gt;</span>\n      <span class=\"tag\">&lt;label</span> <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">bindAttr</span> <span class=\"attribute-name\">for</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">firstNameField.elementId</span><span class=\"delimiter\">&quot;</span></span><span class=\"inline-delimiter\">}}</span></span><span class=\"tag\">&gt;</span>First Name<span class=\"tag\">&lt;/label&gt;</span>\n      <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">view</span> <span class=\"attribute-name\">Ember.TextField</span> <span class=\"attribute-name\">valueBinding</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">firstName</span><span class=\"delimiter\">'</span></span> <span class=\"attribute-name\">name</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">first_name</span><span class=\"delimiter\">'</span></span> <span class=\"attribute-name\">viewName</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">firstNameField</span><span class=\"delimiter\">'</span></span><span class=\"inline-delimiter\">}}</span></span>\n    <span class=\"tag\">&lt;/div&gt;</span>\n    <span class=\"tag\">&lt;div&gt;</span>\n      <span class=\"tag\">&lt;label</span> <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">bindAttr</span> <span class=\"attribute-name\">for</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">lastNameField.elementId</span><span class=\"delimiter\">'</span></span><span class=\"inline-delimiter\">}}</span></span><span class=\"tag\">&gt;</span>Last Name<span class=\"tag\">&lt;/label&gt;</span>\n      <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">view</span> <span class=\"attribute-name\">Ember.TextField</span> <span class=\"attribute-name\">valueBinding</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">lastName</span><span class=\"delimiter\">'</span></span> <span class=\"attribute-name\">name</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">last_name</span><span class=\"delimiter\">'</span></span> <span class=\"attribute-name\">viewName</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">lastNameField</span><span class=\"delimiter\">'</span></span><span class=\"inline-delimiter\">}}</span></span>\n    <span class=\"tag\">&lt;/div&gt;</span>\n    <span class=\"tag\">&lt;div&gt;</span>\n      <span class=\"tag\">&lt;label</span> <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">bindAttr</span> <span class=\"attribute-name\">for</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">quoteField.elementId</span><span class=\"delimiter\">'</span></span><span class=\"inline-delimiter\">}}</span></span><span class=\"tag\">&gt;</span>Quote<span class=\"tag\">&lt;/label&gt;</span>\n      <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">view</span> <span class=\"attribute-name\">Ember.TextArea</span> <span class=\"attribute-name\">valueBinding</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">quote</span><span class=\"delimiter\">'</span></span> <span class=\"attribute-name\">name</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">quote</span><span class=\"delimiter\">'</span></span> <span class=\"attribute-name\">viewName</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">quoteField</span><span class=\"delimiter\">'</span></span><span class=\"inline-delimiter\">}}</span></span>\n    <span class=\"tag\">&lt;/div&gt;</span>\n    <span class=\"tag\">&lt;a</span> <span class=\"attribute-name\">href</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">#</span><span class=\"delimiter\">'</span></span> <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">action</span> <span class=\"attribute-name\">save</span><span class=\"inline-delimiter\">}}</span></span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">btn btn-success</span><span class=\"delimiter\">'</span></span><span class=\"tag\">&gt;</span><span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">buttonTitle</span><span class=\"inline-delimiter\">}}</span></span><span class=\"tag\">&lt;/a&gt;</span>\n  <span class=\"tag\">&lt;/fieldset&gt;</span>\n<span class=\"tag\">&lt;/form&gt;</span>\n<span class=\"tag\">&lt;div</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">page-header</span><span class=\"delimiter\">'</span></span><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/div&gt;</span>\n\n<span class=\"tag\">&lt;a</span> <span class=\"attribute-name\">href</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">#</span><span class=\"delimiter\">'</span></span> <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">action</span> <span class=\"attribute-name\">cancel</span> <span class=\"attribute-name\">target</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">controller</span><span class=\"delimiter\">'</span></span><span class=\"inline-delimiter\">}}</span></span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">btn btn-inverse</span><span class=\"delimiter\">'</span></span><span class=\"tag\">&gt;</span>Cancel<span class=\"tag\">&lt;/a&gt;</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>And in both the <code>new</code> and <code>edit</code> template remove the markup and replace with</p>\n<div class=\"highlight handlebars \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre><span class=\"inline\"><span class=\"inline-delimiter\">{{</span> <span class=\"attribute-name\">template</span> <span class=\"error\">'</span><span class=\"attribute-name\">users</span><span class=\"error\">/</span><span class=\"attribute-name\">form</span><span class=\"error\">'</span> <span class=\"inline-delimiter\">}}</span></span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Now we need to edit the two controllers. In <code>App.UsersNewController</code> add to the two attributes:</p>\n<div class=\"highlight coffeescript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n  <td class=\"code\"><pre>headerTitle: 'Create'\nbuttonTitle: 'Create'\n</pre></td>\n</tr></table>\n</div></div>\n<p>And likewise in <code>App.UsersEditController</code>:</p>\n<div class=\"highlight coffeescript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n  <td class=\"code\"><pre>headerTitle: 'Edit'\nbuttonTitle: 'Update'\n</pre></td>\n</tr></table>\n</div></div>\n<p>Last part for this section is to add the <code>update</code> action to <code>app/controllers/users_controller.rb</code>:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">def</span> <span class=\"function\">update</span>\n  user = <span class=\"constant\">User</span>.find(params[<span class=\"symbol\">:id</span>])\n  <span class=\"keyword\">if</span> user.update_attributes(params[<span class=\"symbol\">:user</span>])\n    render <span class=\"key\">json</span>: user\n  <span class=\"keyword\">else</span>\n    render <span class=\"key\">json</span>: user, <span class=\"key\">status</span>: <span class=\"integer\">422</span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Now go through and everything should work! This allows us to treat the templates similar to a partial in Rails.</p>\n\n<p>Finally we&#39;re going to add the ability to delete records. Because this is an action we are going to limit to the <code>edit</code> page we will put the link below the <code>render</code> call</p>\n<div class=\"highlight handlebars \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre><span class=\"tag\">&lt;a</span> <span class=\"attribute-name\">href</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">#</span><span class=\"delimiter\">'</span></span> <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">action</span> <span class=\"error\">'</span><span class=\"attribute-name\">destroy</span><span class=\"error\">'</span><span class=\"inline-delimiter\">}}</span></span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">btn btn-danger</span><span class=\"delimiter\">'</span></span><span class=\"tag\">&gt;</span>Destroy<span class=\"tag\">&lt;/a&gt;</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Now we add the action to the <code>App.UsersEditController</code></p>\n<div class=\"highlight coffeescript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n  <td class=\"code\"><pre>destroy: -&gt;\n  @content.deleteRecord()\n  @store.commit()\n  @transitionToRoute 'users.index'\n</pre></td>\n</tr></table>\n</div></div>\n<p>And we add the <code>destroy</code> action to the backend</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">def</span> <span class=\"function\">destroy</span>\n  user = <span class=\"constant\">User</span>.find(params[<span class=\"symbol\">:id</span>])\n  <span class=\"keyword\">if</span> user.destroy\n    render <span class=\"key\">json</span>: user, <span class=\"key\">status</span>: <span class=\"integer\">204</span>\n  <span class=\"keyword\">else</span>\n    render <span class=\"key\">json</span>: user\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>The <code>204</code> status here is refers to <code>No Content</code>. Ember-data expects this to ensure the destroy action is a success.</p>\n\n<p>That&#39;s it! You&#39;ve just created your very first Ember app with all of the CRUD actions. Congratulations!</p>\n","summary":"CUD, it isn't just for cows","illustration":null,"illustration_alt":null,"tags":["ember","javascript","ruby-on-rails"],"shallow":false,"date":"2013-01-10T00:00:00Z"},{"id":"ember/2013/01/09/building-an-ember-app-with-rails-api-part-2","title":"Building an Ember app with RailsAPI - Part 2","dockyarder":"brian-cardarella","body":"<p><strong>This article was last updated on May 28, 2013 and reflects the state\n of Ember (1.0.0-rc4) and the latest build of Ember Data (0.13) as of\nthat date.</strong></p>\n\n<p><a href=\"https://github.com/bcardarella/ember-railsapi\">Fork the project on Github!</a></p>\n\n<p><a href=\"http://ember-rails-api.herokuapp.com/\">Use the app live on Heroku</a></p>\n\n<p>In <a href=\"/ember/2013/01/07/building-an-ember-app-with-rails-api-part-1.html\">Part 1</a> I showed you how to setup a <code>Rails-API</code> app for Ember. Now let&#39;s build the app itself.</p>\n\n<p>In this part I will go over building the Ember app from the perspective of a Rails developer. I will be making comparisons to where Ember resembles common patterns in Rails and even Ruby itself.</p>\n\n<p>I know I promised a 2-part series but I&#39;m going to extend this to 3-parts. This post was growing too large to cover everything.</p>\n\n<ul>\n<li>Note: this post has been updated since it was originally written. If\nyou were following along you should start from the beginning of this\npost as changes have been made to reflect the changes on Ember&#39;s master\nbranch! *</li>\n</ul>\n\n<h2>Part 2 - Building with Ember</h2>\n\n<p>We need to start with something I forgot to setup in Part 1. Ember looks for templates in the <code>Ember.TEMPLATES</code> JavaScript object which is provided to us with the <code>handlebars_assets</code> gem we setup in Part 1. We just need to tell the gem to compile for Ember. We can do this in <code>config/initializers/handlebars_assets.rb</code></p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">if</span> <span class=\"keyword\">defined?</span>(<span class=\"constant\">HandlebarsAssets</span>)\n  <span class=\"constant\">HandlebarsAssets</span>::<span class=\"constant\">Config</span>.ember = <span class=\"predefined-constant\">true</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p><em>NOTE:</em> If you have skipped ahead and come back to this initializer you will need to run:</p>\n<div class=\"highlight text \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>rm -rf tmp/*\n</pre></td>\n</tr></table>\n</div></div>\n<p>Otherwise your Ember templates won&#39;t compile properly.</p>\n\n<p>Let&#39;s dive in by creating our application layout template in <code>app/assets/javascripts/templates/application.hbs</code></p>\n<div class=\"highlight handlebars \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n22\n</pre></td>\n  <td class=\"code\"><pre><span class=\"tag\">&lt;div</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">navbar navbar-inverse navbar-fixed-top</span><span class=\"delimiter\">'</span></span><span class=\"tag\">&gt;</span>\n  <span class=\"tag\">&lt;div</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">navbar-inner</span><span class=\"delimiter\">'</span></span><span class=\"tag\">&gt;</span>\n    <span class=\"tag\">&lt;div</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">container</span><span class=\"delimiter\">'</span></span><span class=\"tag\">&gt;</span>\n      <span class=\"tag\">&lt;div</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">nav-collapse collapse</span><span class=\"delimiter\">'</span></span><span class=\"tag\">&gt;</span>\n        <span class=\"tag\">&lt;ul</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">nav</span><span class=\"delimiter\">'</span></span><span class=\"tag\">&gt;</span>\n          <span class=\"tag\">&lt;li&gt;</span><span class=\"inline\"><span class=\"inline-delimiter\">{{#</span><span class=\"attribute-name\">linkTo</span> <span class=\"error\">'</span><span class=\"attribute-name\">index</span><span class=\"error\">'</span><span class=\"inline-delimiter\">}}</span></span>Home<span class=\"inline\"><span class=\"inline-delimiter\">{{/</span><span class=\"attribute-name\">linkTo</span><span class=\"inline-delimiter\">}}</span></span><span class=\"tag\">&lt;/li&gt;</span>\n          <span class=\"tag\">&lt;li&gt;</span><span class=\"inline\"><span class=\"inline-delimiter\">{{#</span><span class=\"attribute-name\">linkTo</span> <span class=\"error\">'</span><span class=\"attribute-name\">users</span><span class=\"error\">'</span><span class=\"inline-delimiter\">}}</span></span>Users<span class=\"inline\"><span class=\"inline-delimiter\">{{/</span><span class=\"attribute-name\">linkTo</span><span class=\"inline-delimiter\">}}</span></span><span class=\"tag\">&lt;/li&gt;</span>\n        <span class=\"tag\">&lt;/ul&gt;</span>\n      <span class=\"tag\">&lt;/div&gt;</span>\n    <span class=\"tag\">&lt;/div&gt;</span>\n  <span class=\"tag\">&lt;/div&gt;</span>\n<span class=\"tag\">&lt;/div&gt;</span>\n<span class=\"tag\">&lt;div</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">container</span><span class=\"delimiter\">'</span></span> <span class=\"attribute-name\">id</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">main</span><span class=\"delimiter\">'</span></span><span class=\"tag\">&gt;</span>\n  <span class=\"tag\">&lt;div</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">content</span><span class=\"delimiter\">'</span></span><span class=\"tag\">&gt;</span>\n    <span class=\"tag\">&lt;div</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">row</span><span class=\"delimiter\">'</span></span><span class=\"tag\">&gt;</span>\n      <span class=\"tag\">&lt;div</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">span12</span><span class=\"delimiter\">'</span></span><span class=\"tag\">&gt;</span>\n        <span class=\"tag\">&lt;div</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">page-header</span><span class=\"delimiter\">'</span></span><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/div&gt;</span>\n        <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">outlet</span><span class=\"inline-delimiter\">}}</span></span>\n      <span class=\"tag\">&lt;/div&gt;</span>\n    <span class=\"tag\">&lt;/div&gt;</span>\n  <span class=\"tag\">&lt;/div&gt;</span>\n<span class=\"tag\">&lt;/div&gt;</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p><a href=\"http://emberjs.com/guides/templates/handlebars-basics\">Read more about Ember Templates</a></p>\n\n<p>This is the Ember equivalent of a Rails layout template. The <code>outlet</code> is the Ember equivalent to <code>yield</code> in Rails. So this template will wrap the other templates we plan on rendering. I will come back to the <code>&lt;li&gt;</code>s in the nav later.</p>\n\n<p>Next we&#39;re going to setup a default route and render a template. In <code>app/assets/javascripts/routes.coffee</code></p>\n<div class=\"highlight coffeescript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n  <td class=\"code\"><pre>App.Router.reopen\n  location: 'history'\n  rootURL: '/'\n\nApp.Router.map -&gt;\n  @resource 'users'\n</pre></td>\n</tr></table>\n</div></div>\n<p><a href=\"http://emberjs.com/guides/routing\">Read more about Ember Routes</a></p>\n\n<p>This will tell the Ember Router to use the History API instead of the\ndefault &#39;hash&#39; URLs for routes. The mapping of the <code>/</code> in our app is\nimplicit in Ember, and it will be assigned to a route of \n<code>index</code>. The Ember Router will use this string to make some\nassumptions. If there is a <code>App.IndexController</code> object it will use that\ncontroller. If not, it will just render out the <code>index</code> template. Now,\nunder the hood Ember is still using a <code>App.IndexController</code> controller\nbut it will define one on the fly. I will get into this in a future blog\npost. When you call <code>reopen</code> this is the Ember way to reopen and monkey\npatch a class. As you can see the Ember Router syntax is similar to the\none in Rails. This is by design. We need the 2nd route there so our\n<code>application.hbs</code> template can compile as it is referencing the\n<code>users.index</code> route.</p>\n\n<p>Let&#39;s write <code>app/assets/javascripts/templates/index.hbs</code></p>\n<div class=\"highlight text \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>&lt;h1&gt;Welcome!&lt;/h1&gt;\n</pre></td>\n</tr></table>\n</div></div>\n<p>We need to do one last thing before we check out the homepage. By default, Rails includes a sample <code>index</code> page in <code>public/index.html</code>. If we were to go to the homepage now, we would see that.\nBut we want to see the index page we just made. To remove the Rails default page, simply run</p>\n\n<p><code>rm public/index.html</code></p>\n\n<p>from the command line.</p>\n\n<p>That&#39;s it. If you run your rails server and load the app you should see the following\n<img src=\"http://i.imgur.com/1j50C.png?1\" alt=\"Welcome\"></p>\n\n<p>Congratulations! You&#39;ve built your first Ember app! Let&#39;s make it do\nsomething useful. We are going to add the <code>/users</code> page, so edit\n<code>app/assets/javascripts/templates/users.hbs</code></p>\n<div class=\"highlight handlebars \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n  <td class=\"code\"><pre><span class=\"tag\">&lt;h1&gt;</span>Users<span class=\"tag\">&lt;/h1&gt;</span>\n<span class=\"tag\">&lt;div</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">span3</span><span class=\"delimiter\">&quot;</span></span><span class=\"tag\">&gt;</span>\n  <span class=\"tag\">&lt;table</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">table table-striped</span><span class=\"delimiter\">'</span></span><span class=\"tag\">&gt;</span>\n    <span class=\"tag\">&lt;tr&gt;</span>\n      <span class=\"tag\">&lt;th&gt;</span>ID<span class=\"tag\">&lt;/th&gt;</span>\n      <span class=\"tag\">&lt;th&gt;</span>Name<span class=\"tag\">&lt;/th&gt;</span>\n    <span class=\"tag\">&lt;/tr&gt;</span>\n  <span class=\"tag\">&lt;/table&gt;</span>\n<span class=\"tag\">&lt;/div&gt;</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Reload your app and you can click back and forth between &#39;Users&#39; and &#39;Home&#39;, thanks to the <code>linkTo</code> actions we setup in <code>application.hbs</code>. These actions map to controllers being automatically generated because we haven&#39;t created them yet; those controllers automatically render the templates with the same naming convention. Does that sound familiar? That&#39;s right, its our good friend <a href=\"http://en.wikipedia.org/wiki/Convention_over_configuration\">Convention Over Configuration</a>!</p>\n\n<p>Now, when clicking between the two pages the nav is not properly updating the <code>active</code> class on the <code>&lt;li&gt;</code> tags. In Ember, you can <a href=\"http://emberjs.com/guides/templates/binding-element-class-names\">bind element class names to actions</a>. This will require a bit of code, but as we add more controllers I&#39;ll show how we can easily reuse what we&#39;re about to write. Let&#39;s start by adding the bindings to <code>application.hbs</code> Modify the <code>&lt;li&gt;</code> tags in the nav menu to:</p>\n<div class=\"highlight handlebars \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n  <td class=\"code\"><pre><span class=\"tag\">&lt;li</span> <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">bindAttr</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">isHome:active</span><span class=\"delimiter\">&quot;</span></span><span class=\"inline-delimiter\">}}</span></span><span class=\"tag\">&gt;</span><span class=\"inline\"><span class=\"inline-delimiter\">{{#</span><span class=\"attribute-name\">linkTo</span> <span class=\"error\">'</span><span class=\"attribute-name\">index</span><span class=\"error\">'</span><span class=\"inline-delimiter\">}}</span></span>Home<span class=\"inline\"><span class=\"inline-delimiter\">{{/</span><span class=\"attribute-name\">linkTo</span><span class=\"inline-delimiter\">}}</span></span><span class=\"tag\">&lt;/li&gt;</span>\n<span class=\"tag\">&lt;li</span> <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">bindAttr</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">isUsers:active</span><span class=\"delimiter\">&quot;</span></span><span class=\"inline-delimiter\">}}</span></span><span class=\"tag\">&gt;</span><span class=\"inline\"><span class=\"inline-delimiter\">{{#</span><span class=\"attribute-name\">linkTo</span> <span class=\"error\">'</span><span class=\"attribute-name\">users.index</span><span class=\"error\">'</span><span class=\"inline-delimiter\">}}</span></span>Users<span class=\"inline\"><span class=\"inline-delimiter\">{{/</span><span class=\"attribute-name\">linkTo</span><span class=\"inline-delimiter\">}}</span></span><span class=\"tag\">&lt;/li&gt;</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>This binding of <code>isHome:active</code> tells Ember to make the class <code>active</code> if the <code>isHome</code> attribute on the controller is <code>true</code>. If it is <code>false</code> the value will be nothing. The same goes for <code>isUsers</code>. Because this code lives in <code>application.hbs</code> we need to add these attributes to <code>app/assets/javascripts/controllers/applicationController.coffee</code></p>\n<div class=\"highlight coffeescript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n  <td class=\"code\"><pre>App.ApplicationController = Ember.Controller.extend\n  isHome: (-&gt;\n    @get('currentRoute') == 'home'\n  ).property('currentRoute')\n\n  isUsers: (-&gt;\n    @get('currentRoute') == 'users'\n  ).property('currentRoute')\n</pre></td>\n</tr></table>\n</div></div>\n<p><a href=\"http://emberjs.com/guides/controllers\">Read more about Ember Controllers</a></p>\n\n<p>Each attribute is a function that will compare the <code>currentRoute</code> attribute to a value and return that boolean result. We instruct the attribute to be a <a href=\"http://emberjs.com/guides/object-model/computed-properties\">computed property</a>. Computed properties are simple to understand: we tell Ember to automatically update the value of &#39;isHome&#39; when <code>currentRoute</code> is <code>set</code> to a different value. Ember will then instruct anything bound to that attribute to update as well.</p>\n\n<p>Finally, we&#39;re going to update our routes to set <code>currentRoute</code> depending upon the route. Let&#39;s add two route classes to <code>app/assets/javascripts/routes.coffee</code></p>\n<div class=\"highlight coffeescript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n  <td class=\"code\"><pre>App.IndexRoute = Ember.Route.extend\n  setupController: (controller, model) -&gt;\n    @controllerFor('application').set('currentRoute', 'home')\n\nApp.UsersRoute = Ember.Route.extend\n  setupController: (controller, model) -&gt;\n    @controllerFor('application').set('currentRoute', 'users')\n</pre></td>\n</tr></table>\n</div></div>\n<p>Two new concepts:</p>\n\n<ul>\n<li><code>setupController</code> is a function automatically called on each visit to the route. It will pass in an instance of the controller and a model if you supply one (we&#39;ll see this in a bit)</li>\n<li><code>this.controllerFor</code> When interacting with a specific controller you may want to modify a different controller. In this case the wrapping controller is <code>ApplicationController</code> and we need to update the <code>currentRoute</code> attribute. You <em>must</em> use the <code>set</code> function otherwise Ember won&#39;t know to notify any <a href=\"http://emberjs.com/guides/object-model/computed-properties/\">computed property observers</a>.</li>\n</ul>\n\n<p>Now reload your app and click between the actions and you should see the active states properly set depending upon your route.</p>\n\n<p>Next, we&#39;re going to start using real data. We&#39;re going to fetch the collection of Users from the server and display them on the index page. Let&#39;s start with telling Ember what our data store looks like in <code>app/assets/javascripts/store.coffee</code></p>\n<div class=\"highlight coffeescript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>App.Store = DS.Store.extend()\n</pre></td>\n</tr></table>\n</div></div>\n<p><a href=\"http://emberjs.com/guides/models/the-rest-adapter\">Read more about Ember&#39;s REST Adapter</a></p>\n\n<p>The REST adapter allows us to pull from an API backend assuming certain conventions are followed in the URIs and JSON response. Thankfully we set this up properly in <a href=\"http://reefpoints.dockyard.com/ember/2013/01/07/building-an-ember-app-with-rails-api-part-1.html\">Part 1</a></p>\n\n<p>Now we&#39;ll create a new model in <code>app/assets/javascripts/models/user.coffee</code></p>\n<div class=\"highlight coffeescript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n  <td class=\"code\"><pre>App.User = DS.Model.extend(\n  firstName: DS.attr('string')\n  lastName:  DS.attr('string')\n  quote:     DS.attr('string')\n  fullName: (-&gt;\n    &quot;#{@get('firstName')} #{@get('lastName')}&quot;\n  ).property('firstName', 'lastName')\n)\n</pre></td>\n</tr></table>\n</div></div>\n<p><a href=\"http://emberjs.com/guides/models\">Read more about Ember models</a></p>\n\n<p>We are defining each attribute that is coming over the wire, as well as a computed property that will combine <code>firstName</code> and <code>lastName</code>. If you&#39;re wondering about that call to <code>property</code>, you have to let Ember know when a method on an object is using a property computed from dependency properties on that object. Here <code>fullName</code> depends on <code>firstName</code> and <code>lastName</code>. When we call <code>property</code> and let Ember know which properties to observe, the <code>fullName</code> property will update if either the <code>firstName</code> or <code>lastName</code> changes. If you like, you can <a href=\"http://emberjs.com/guides/object-model/computed-properties/\">read more about computed properties</a>.</p>\n\n<p>Now we need to modify the <code>users</code> route to fetch the data</p>\n<div class=\"highlight coffeescript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n  <td class=\"code\"><pre>App.UsersRoute = Ember.Route.extend\n  model: -&gt;\n    App.User.find()\n  setupController: (controller, model) -&gt;\n    @controllerFor('application').set('currentRoute', 'users')\n</pre></td>\n</tr></table>\n</div></div>\n<p>The <code>App.User.find()</code> makes a remote call, fetches the collection, and instantiates the models. This collection is then passed to <code>setupController</code> through the <code>model</code> attribute. We then assign this collection to the <code>users</code> attribute on the controller. </p>\n\n<p>Now edit <code>app/assets/javascripts/templates/users.hbs</code> to include a list of our users and an outlet through which we&#39;ll render a users index page and our users show page.</p>\n<div class=\"highlight handlebars \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n</pre></td>\n  <td class=\"code\"><pre><span class=\"tag\">&lt;div</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">span3</span><span class=\"delimiter\">&quot;</span></span><span class=\"tag\">&gt;</span>\n  <span class=\"tag\">&lt;table</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">table table-striped</span><span class=\"delimiter\">'</span></span><span class=\"tag\">&gt;</span>\n    <span class=\"tag\">&lt;tr&gt;</span>\n      <span class=\"tag\">&lt;th&gt;</span>ID<span class=\"tag\">&lt;/th&gt;</span>\n      <span class=\"tag\">&lt;th&gt;</span>Name<span class=\"tag\">&lt;/th&gt;</span>\n    <span class=\"tag\">&lt;/tr&gt;</span>\n    <span class=\"inline\"><span class=\"inline-delimiter\">{{#</span><span class=\"attribute-name\">each</span> <span class=\"attribute-name\">controller</span><span class=\"inline-delimiter\">}}</span></span>\n      <span class=\"tag\">&lt;tr&gt;</span>\n        <span class=\"tag\">&lt;td&gt;</span><span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">id</span><span class=\"inline-delimiter\">}}</span></span><span class=\"tag\">&lt;/td&gt;</span>\n        <span class=\"tag\">&lt;td&gt;</span><span class=\"inline\"><span class=\"inline-delimiter\">{{#</span><span class=\"attribute-name\">linkTo</span> <span class=\"error\">&quot;</span><span class=\"attribute-name\">users.show</span><span class=\"error\">&quot;</span> <span class=\"attribute-name\">this</span><span class=\"inline-delimiter\">}}</span></span><span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">fullName</span><span class=\"inline-delimiter\">}}</span></span><span class=\"inline\"><span class=\"inline-delimiter\">{{/</span><span class=\"attribute-name\">linkTo</span><span class=\"inline-delimiter\">}}</span></span><span class=\"tag\">&lt;/td&gt;</span>\n      <span class=\"tag\">&lt;/tr&gt;</span>\n    <span class=\"inline\"><span class=\"inline-delimiter\">{{/</span><span class=\"attribute-name\">each</span><span class=\"inline-delimiter\">}}</span></span>\n  <span class=\"tag\">&lt;/table&gt;</span>\n<span class=\"tag\">&lt;/div&gt;</span>\n\n<span class=\"tag\">&lt;div</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">span8</span><span class=\"delimiter\">&quot;</span></span><span class=\"tag\">&gt;</span>\n  <span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">outlet</span><span class=\"inline-delimiter\">}}</span></span>\n<span class=\"tag\">&lt;/div&gt;</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>We are linking to the <code>show</code> named route and passing the instance of a <code>User</code> (which is what <code>this</code> refers to) as the paramater. Ember will pull out the id on the object and set that to the <code>:user_id</code> segment on the path.</p>\n\n<p>We need to next update &#39;App.Router&#39; for the proper mapping</p>\n<div class=\"highlight coffeescript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n  <td class=\"code\"><pre>App.Router.map -&gt;\n  @resource 'users', -&gt;\n    @route 'show',\n      path: '/:user_id'\n</pre></td>\n</tr></table>\n</div></div>\n<p>Note how we are matching against <code>:user_id</code> and not <code>:id</code> that Rails developers are used to.</p>\n\n<p>I must confess I don&#39;t entirely understand why the <code>/</code> map is necessary under <code>/users</code>, I would have thought the top nesting could be used and it wouldn&#39;t be necessary to redefine a root path. Please enlighten me in the comments! Ok, the router maps are updated. Let&#39;s add the <code>show</code> route.</p>\n<div class=\"highlight coffeescript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n  <td class=\"code\"><pre>App.UsersShowRoute = Ember.Route.extend\n  model: (params) -&gt;\n    App.User.find(params.user_id)\n  setupController: (controller, model) -&gt;\n    controller.set('content', model)\n    @controllerFor('application').set('currentRoute', 'users')\n</pre></td>\n</tr></table>\n</div></div>\n<p>And we&#39;ll add the <code>app/assets/javascripts/templates/users/show.hbs</code> template</p>\n<div class=\"highlight handlebars \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n  <td class=\"code\"><pre><span class=\"tag\">&lt;h1&gt;</span><span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">fullName</span><span class=\"inline-delimiter\">}}</span></span><span class=\"tag\">&lt;/h1&gt;</span>\n\n<span class=\"tag\">&lt;div&gt;</span>\n  <span class=\"tag\">&lt;q&gt;</span><span class=\"inline\"><span class=\"inline-delimiter\">{{</span><span class=\"attribute-name\">quote</span><span class=\"inline-delimiter\">}}</span></span><span class=\"tag\">&lt;/q&gt;</span>\n<span class=\"tag\">&lt;/div&gt;</span>\n\n<span class=\"tag\">&lt;div</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">page-header</span><span class=\"delimiter\">'</span></span><span class=\"tag\">&gt;</span><span class=\"tag\">&lt;/div&gt;</span>\n\n<span class=\"inline\"><span class=\"inline-delimiter\">{{#</span><span class=\"attribute-name\">linkTo</span> <span class=\"error\">'</span><span class=\"attribute-name\">users</span><span class=\"error\">'</span> <span class=\"attribute-name\">class</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">btn</span><span class=\"delimiter\">'</span></span><span class=\"inline-delimiter\">}}</span></span>Back<span class=\"inline\"><span class=\"inline-delimiter\">{{/</span><span class=\"attribute-name\">linkTo</span><span class=\"inline-delimiter\">}}</span></span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>And finally, we&#39;ll add the &#39;app/assets/javascripts/users/index.hbs&#39; template</p>\n<div class=\"highlight handlebars \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre><span class=\"tag\">&lt;p&gt;</span>Please choose a user.<span class=\"tag\">&lt;/p&gt;</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Reload your app and click through to the show page and you should see</p>\n\n<p><img src=\"http://i.imgur.com/jNKhnrJ.png\" alt=\"Show\"></p>\n\n<p>So we have only implemented the &#39;Read&#39; of &#39;CRUD&#39; in this part, but we have also introduced alot of new concepts. In <a href=\"http://reefpoints.dockyard.com/ember/2013/01/10/building-an-ember-app-with-rails-api-part-3.html\">Part 3</a> we will implement the &#39;Create Update Destroy&#39; actions.</p>\n","summary":"Building the Ember app","illustration":null,"illustration_alt":null,"tags":["ember","javascript","ruby-on-rails"],"shallow":false,"date":"2013-01-09T00:00:00Z"},{"id":"ember/2013/01/07/building-an-ember-app-with-rails-api-part-1","title":"Building an Ember app with RailsAPI - Part 1","dockyarder":"brian-cardarella","body":"<p><strong>This article was last updated on May 28, 2013 and reflects the state\n of Ember (1.0.0-rc4) and the latest build of Ember Data (0.13) as of\nthat date.</strong></p>\n\n<p><a href=\"https://github.com/bcardarella/ember-railsapi\">Fork the project on Github!</a></p>\n\n<p><a href=\"http://ember-rails-api.herokuapp.com/\">Use the app live on Heroku</a></p>\n\n<p>Lately I&#39;ve been playing with <a href=\"http://emberjs.com\">Ember.js</a> and I have\nreally grown to love it. I get the same &quot;AHA!&quot; feeling I got building my\nfirst <a href=\"http://rubyonrails.org\">Rails</a> app 7 years ago. Let&#39;s see how to\nbuild a simple\n<a href=\"http://en.wikipedia.org/wiki/Create,_read,_update_and_delete\">CRUD</a> app\nusing the <a href=\"https://github.com/rails-api/rails-api\">RailsAPI</a> as the\nbackend. We&#39;re going to build a new app and deploy to Heroku.</p>\n\n<h2>Part 1 - Getting Set Up</h2>\n<div class=\"highlight text \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre>gem install rails-api\nrails-api new ember-app\ncd ember-app\n</pre></td>\n</tr></table>\n</div></div>\n<p>Similar to the <code>rails</code> command <code>RailsAPI</code> comes with a <code>rails-api</code>\ncommand which under the hood is just using the normal <code>rails</code> CLI code\nbut overriding some of the templates generated. Out of the box\n<code>RailsAPI</code> won&#39;t generate the <a href=\"http://guides.rubyonrails.org/asset_pipeline.html\">asset pipeline</a> directories\nas there is <a href=\"https://github.com/rails-api/rails-api/issues/50\">still some\ndebate</a> if it will use\n<a href=\"https://github.com/sstephenson/sprockets\">Sprockets</a>,\n<a href=\"https://github.com/livingsocial/rake-pipeline\">Rake-Pipeline</a> or some\nother solution. In this example we&#39;re going to use Sprockets as it will\nsave us a lot of time. <code>RailsAPI</code> is bundled with\n<a href=\"https://github.com/rails/rails/blob/3-2-stable/actionpack/actionpack.gemspec\">ActionPack</a>\nwhich has <code>Sprockets</code> as a dependency. All we need to do is add in the\ndirectories</p>\n<div class=\"highlight text \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n  <td class=\"code\"><pre>mkdir -p app/assets/{javascripts,stylesheets,images}\nmkdir -p vendor/assets/{javascripts,stylesheets,images}\n</pre></td>\n</tr></table>\n</div></div>\n<p>Now we need to copy in the vendored asset files. You can either build yourself our run the following to copy directly from my Github project</p>\n<div class=\"highlight text \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n  <td class=\"code\"><pre>cd vendor/assets/javascripts\nwget https://raw.github.com/bcardarella/ember-railsapi/master/vendor/assets/javascripts/ember-data.js\nwget https://raw.github.com/bcardarella/ember-railsapi/master/vendor/assets/javascripts/ember.js\nwget https://raw.github.com/bcardarella/ember-railsapi/master/vendor/assets/javascripts/jquery.js\nwget https://raw.github.com/bcardarella/ember-railsapi/master/vendor/assets/javascripts/modernizr.js\ncd ../../..\n</pre></td>\n</tr></table>\n</div></div>\n<p>Note that if you&#39;re a Mac user, just replace <code>wget</code> (the Linux command) with <code>curl -O</code> (the Unix command) on the above lines.</p>\n\n<p>Let&#39;s setup the directory structure for our Ember app</p>\n<div class=\"highlight text \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>mkdir -p app/assets/javascripts/{controllers,models,views,templates}\n</pre></td>\n</tr></table>\n</div></div>\n<p>And now we&#39;ll setup the load order in our <code>app/assets/javascripts/application.coffee</code> file</p>\n<div class=\"highlight coffeescript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n</pre></td>\n  <td class=\"code\"><pre>#= require modernizr\n#= require jquery\n#= require handlebars\n#= require ember\n#= require ember-data\n#= require bootstrap\n#= require_self\n#= require store\n#= require routes\n#= require_tree ./controllers\n#= require_tree ./models\n#= require_tree ./templates\n#= require_tree ./views\n\nwindow.App = Ember.Application.create()\n</pre></td>\n</tr></table>\n</div></div>\n<p>Add the <code>routes.coffee</code> and <code>store.coffee</code> files:</p>\n<div class=\"highlight text \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n  <td class=\"code\"><pre>touch app/assets/javascripts/routes.coffee\ntouch app/assets/javascripts/store.coffee\n</pre></td>\n</tr></table>\n</div></div>\n<p>And the <code>app/assets/stylesheets/application.sass</code> file</p>\n<div class=\"highlight sass \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n  <td class=\"code\"><pre><span class=\"directive\">@import</span> <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">bootstrap</span><span class=\"delimiter\">'</span></span>\n\n<span class=\"tag\">body</span>\n  <span class=\"key\">padding-top</span>: <span class=\"float\">60px</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>That was a good amount of setup. Now we have the application structure for an Ember app in our asset pipeline. This will make things cleaner once we start coding.</p>\n\n<p>Let&#39;s setup the necessary gem dependencies in our <code>Gemfile</code>. Just replace the entire contents with the following:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n22\n23\n24\n25\n26\n27\n28\n29\n<strong>30</strong>\n</pre></td>\n  <td class=\"code\"><pre>source <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">https://rubygems.org</span><span class=\"delimiter\">'</span></span>\n\nruby <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">2.0.0</span><span class=\"delimiter\">'</span></span>\n\ngem <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">rails</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">3.2.13</span><span class=\"delimiter\">'</span></span>\ngem <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">rails-api</span><span class=\"delimiter\">'</span></span>\ngem <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">thin</span><span class=\"delimiter\">'</span></span>\ngem <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">active_model_serializers</span><span class=\"delimiter\">'</span></span>, <span class=\"symbol\">:github</span> =&gt; <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">rails-api/active_model_serializers</span><span class=\"delimiter\">'</span></span>\n\ngroup <span class=\"symbol\">:development</span>, <span class=\"symbol\">:test</span> <span class=\"keyword\">do</span>\n  gem <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">debugger</span><span class=\"delimiter\">'</span></span>\n  gem <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">sqlite3</span><span class=\"delimiter\">'</span></span>\n<span class=\"keyword\">end</span>\n\ngroup <span class=\"symbol\">:production</span> <span class=\"keyword\">do</span>\n  gem <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">pg</span><span class=\"delimiter\">'</span></span>\n<span class=\"keyword\">end</span>\n\ngroup <span class=\"symbol\">:assets</span> <span class=\"keyword\">do</span>\n  gem <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">sass-rails</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">~&gt; 3.2</span><span class=\"delimiter\">'</span></span>\n  gem <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">coffee-rails</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">~&gt; 3.2</span><span class=\"delimiter\">'</span></span>\n  gem <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">compass-rails</span><span class=\"delimiter\">'</span></span>\n  gem <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">uglifier</span><span class=\"delimiter\">'</span></span>\n  gem <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">bootstrap-sass</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">~&gt; 2.0.3.0</span><span class=\"delimiter\">'</span></span>\n  gem <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">handlebars_assets</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">0.12.3</span><span class=\"delimiter\">'</span></span>\n<span class=\"keyword\">end</span>\n\ngroup <span class=\"symbol\">:development</span> <span class=\"keyword\">do</span>\n  gem <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">quiet_assets</span><span class=\"delimiter\">'</span></span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>There are two gems to take note of:</p>\n\n<ul>\n<li><a href=\"https://github.com/rails-api/active_model_serializers\">ActiveModelSerializers</a> is a project that is written by the <code>Ember</code> core team which will normalize the <a href=\"http://en.wikipedia.org/wiki/JSON\">JSON</a> output for models in a <code>Rails</code> app.</li>\n<li><a href=\"https://github.com/leshill/handlebars_assets\">HandlebarsAssets</a> will allow the <code>AssetPipeline</code> to compile <a href=\"http://handlebarsjs.com/\">Handlebars</a> templates which is required for Ember. There is the <a href=\"https://github.com/emberjs/ember-rails\">Ember-Rails</a> gem which will also do this but I have found <code>HandlebarsAssets</code> to be a leaner solution.</li>\n</ul>\n\n<p>After this, don&#39;t forget to run <code>bundle install</code> from the command line to pick up the gems we just added.</p>\n\n<p>Let&#39;s create a simple model and the serializer</p>\n<div class=\"highlight text \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n  <td class=\"code\"><pre>rails-api g model User first_name:string last_name:string quote:text\nrails-api g serializer User\n</pre></td>\n</tr></table>\n</div></div>\n<p>Run &#39;rake db:migrate&#39; to run the migration for our User model. Now open up <code>app/serializers/user_serializer.rb</code> and add the fields that require serialization</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">class</span> <span class=\"class\">UserSerializer</span> &lt; <span class=\"constant\">ActiveModel</span>::<span class=\"constant\">Serializer</span>\n  attributes <span class=\"symbol\">:id</span>, <span class=\"symbol\">:first_name</span>, <span class=\"symbol\">:last_name</span>, <span class=\"symbol\">:quote</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Again, this will instruct <code>Rails</code> to turn our <code>ActiveRecord</code> object into a <code>JSON</code> object properly normalized for <code>Ember</code>. </p>\n\n<p>Let&#39;s write the Controller. Create and edit <code>app/controllers/users_controller.rb</code></p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">class</span> <span class=\"class\">UsersController</span> &lt; <span class=\"constant\">ApplicationController</span>\n  <span class=\"keyword\">def</span> <span class=\"function\">index</span>\n    render <span class=\"key\">json</span>: <span class=\"constant\">User</span>.all\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Take note that we are inheriting <code>ApplicationController</code> but in a <code>RailsAPI</code> app <code>ApplicationController</code> itself inherits from <code>ActionController::API</code> instead of <code>ActionController::Base</code>.</p>\n\n<p>This basic controller will serve up all of our users to our Ember app. We&#39;ll add more later.</p>\n\n<p>Now let&#39;s add some routes to <code>config/routes.rb</code></p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n</pre></td>\n  <td class=\"code\"><pre><span class=\"constant\">EmberApp</span>::<span class=\"constant\">Application</span>.routes.draw <span class=\"keyword\">do</span>\n  <span class=\"keyword\">class</span> <span class=\"class\">FormatTest</span>\n    attr_accessor <span class=\"symbol\">:mime_type</span>\n\n    <span class=\"keyword\">def</span> <span class=\"function\">initialize</span>(format)\n      <span class=\"instance-variable\">@mime_type</span> = <span class=\"constant\">Mime</span>::<span class=\"constant\">Type</span>.lookup_by_extension(format)\n    <span class=\"keyword\">end</span>\n\n    <span class=\"keyword\">def</span> <span class=\"function\">matches?</span>(request)\n      request.format == mime_type\n    <span class=\"keyword\">end</span>\n  <span class=\"keyword\">end</span>\n\n  resources <span class=\"symbol\">:users</span>, <span class=\"symbol\">:except</span> =&gt; <span class=\"symbol\">:edit</span>, <span class=\"symbol\">:constraints</span> =&gt; <span class=\"constant\">FormatTest</span>.new(<span class=\"symbol\">:json</span>)\n  get <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">*foo</span><span class=\"delimiter\">'</span></span>, <span class=\"symbol\">:to</span> =&gt; <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">ember#index</span><span class=\"delimiter\">'</span></span>, <span class=\"symbol\">:constraints</span> =&gt; <span class=\"constant\">FormatTest</span>.new(<span class=\"symbol\">:html</span>)\n  get <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">/</span><span class=\"delimiter\">'</span></span>, <span class=\"symbol\">:to</span> =&gt; <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">ember#index</span><span class=\"delimiter\">'</span></span>, <span class=\"symbol\">:constraints</span> =&gt; <span class=\"constant\">FormatTest</span>.new(<span class=\"symbol\">:html</span>)\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>A few things are happening here:</p>\n\n<ul>\n<li>We are constraining against the format with a custom <code>FormatTest</code> class. We only want to map certain routes to <code>JSON</code> requests and certain routes to <code>HTML</code> requesets.</li>\n<li>The <code>get &#39;*foo&#39;...</code> will greedily match all routes except <code>/</code> so we have the following line. We want to direct all <code>HTML</code> requests to a single <code>controller#action</code>. I will go into the reason why in a bit.</li>\n</ul>\n\n<p>So let&#39;s create that <code>Ember</code> controller. This will act as the primary application serving controller that is hit when people visit the app. Create and edit <code>app/controllers/ember_controller.rb</code></p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">class</span> <span class=\"class\">EmberController</span> &lt; <span class=\"constant\">ActionController</span>::<span class=\"constant\">Base</span>; <span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Note that we are inheriting from <code>ActionController::Base</code> this time and not <code>ApplicationController</code>. This is so that the controller actions can respond to non <code>JSON</code> requests.</p>\n\n<p>Now we will add the view in <code>app/views/ember/index.html.erb</code></p>\n<div class=\"highlight erb \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n</pre></td>\n  <td class=\"code\"><pre><span class=\"doctype\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"tag\">&lt;html</span> <span class=\"attribute-name\">lang</span>=<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">en</span><span class=\"delimiter\">'</span></span><span class=\"tag\">&gt;</span>\n  <span class=\"tag\">&lt;head&gt;</span>\n    <span class=\"inline\"><span class=\"inline-delimiter\">&lt;%=</span> stylesheet_link_tag <span class=\"symbol\">:application</span>, <span class=\"symbol\">:media</span> =&gt; <span class=\"symbol\">:all</span> <span class=\"inline-delimiter\">%&gt;</span></span>\n    <span class=\"inline\"><span class=\"inline-delimiter\">&lt;%=</span> javascript_include_tag <span class=\"symbol\">:application</span> <span class=\"inline-delimiter\">%&gt;</span></span>\n    <span class=\"tag\">&lt;title&gt;</span>Title<span class=\"tag\">&lt;/title&gt;</span>\n  <span class=\"tag\">&lt;/head&gt;</span>\n  <span class=\"tag\">&lt;body&gt;</span>\n  <span class=\"tag\">&lt;/body&gt;</span>\n<span class=\"tag\">&lt;/html&gt;</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>That is all the view that your Ember app will need. Ember will automatically attach its own default template to the <code>&lt;body&gt;</code> tag.</p>\n\n<p>Let&#39;s add some data to <code>db/seeds.rb</code></p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n  <td class=\"code\"><pre><span class=\"constant\">User</span>.create(<span class=\"symbol\">:first_name</span> =&gt; <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">William</span><span class=\"delimiter\">'</span></span>, <span class=\"symbol\">:last_name</span> =&gt; <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Harrison</span><span class=\"delimiter\">'</span></span>, <span class=\"symbol\">:quote</span> =&gt; <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">I'm just singin' in the rain!</span><span class=\"delimiter\">&quot;</span></span>)\n<span class=\"constant\">User</span>.create(<span class=\"symbol\">:first_name</span> =&gt; <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Abraham</span><span class=\"delimiter\">'</span></span>, <span class=\"symbol\">:last_name</span> =&gt; <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Lincoln</span><span class=\"delimiter\">'</span></span>, <span class=\"symbol\">:quote</span> =&gt; <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">I'd like to see a show tonight.</span><span class=\"delimiter\">&quot;</span></span>)\n</pre></td>\n</tr></table>\n</div></div>\n<p>Now run your migrations and seed</p>\n<div class=\"highlight text \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>rake db:migrate db:seed\n</pre></td>\n</tr></table>\n</div></div>\n<p>Ok, now our app is in a good spot to start developing an Ember app with. Let&#39;s review what we did</p>\n\n<ol>\n<li>Generated a new app using <code>rails-api</code></li>\n<li>Set up the javascript and stylesheet assets</li>\n<li>Wrote a very simple JSON API for returning all users</li>\n</ol>\n\n<p>In <a href=\"http://reefpoints.dockyard.com/ember/2013/01/09/building-an-ember-app-with-rails-api-part-2.html\">Part 2</a> we&#39;ll build the Ember app itself.</p>\n","summary":"Setting up RailsAPI for writing an Ember App","illustration":null,"illustration_alt":null,"tags":["ember","javascript","ruby-on-rails"],"shallow":false,"date":"2013-01-07T00:00:00Z"},{"id":"ruby/2013/01/04/dismissible_helpers-released","title":"DismissibleHelpers released","dockyarder":"dan-mcclain","body":"<p>Have an application where you want to add some help text for the user,\nbut they really only need to see it once? With the\n<a href=\"https://github.com/dockyard/dismissible_helpers\"><code>dismissible_helpers</code></a>\ngem, you can quickly add dismissible help text to your application.</p>\n\n<ul>\n<li><a href=\"https://github.com/dockyard/dismissible_helpers\">View the project on GitHub</a></li>\n<li><a href=\"http://dismissible-helpers-example.herokuapp.com/\">View the demo here</a></li>\n<li><a href=\"https://github.com/dockyard/dismissible_helpers_example\">View the demo source code</a></li>\n</ul>\n\n<h2>What you get</h2>\n\n<p>DismissibleHelpers includes:</p>\n\n<ul>\n<li>DismissibleHelpers View Helper - Renders the help text only if the visitor\nhas not dismissed it</li>\n<li>DismissedHelpers Routes and controller - Handles the JavaScript requests\nto store the dismissal state</li>\n<li>DismissedHelpers Javascript - Handles the front end interactions with\nthe help text</li>\n</ul>\n\n<p>By default, <code>dismissible_helpers</code> will use a cookie to store the\ndismissal status of the help text.</p>\n\n<h2>Three minute setup</h2>\n\n<p>To start using <code>dismissible_helpers</code> without any customization, you only\nthree steps away.</p>\n\n<ol>\n\n  <li><p> Add <code>dismissible_helpers_routes</code> to your <code>config/routes.rb</code>\n\n```ruby\nYourApplication::Application.routes.draw do\n  dismissible_helpers_routes\n\n  # Your other routes\nend```\n  </p></li>\n\n  <li><p> Add the Javascript: Add the following to your <code>app/assets/javascripts/application.js</code>.\n\n```javascript\n// Your other require statments\n//=require dismissible_helpers\n//=require_self\n\n$(function(){\n  $('.dismissible').dismissible()\n})```\n  </p></li>\n\n  <li><p> Call the <code>render_dismissible_helper</code> method with the string you want to\n       render. The string passed to the method will be processed by the I18n method\n       <code>t</code>, so the content of the help message should be stored in your localization\n       file.\n\n```erb\n<%= render_dismissible_helper 'help.some_help_message' %>\n```\n  </p></li>\n\n</ol>\n\n<h2>Advanced setup</h2>\n\n<h3>Changing the way the help text is removed</h3>\n\n<p>By default, the dismissed helper is removed from the page via\n<code>$(helper).remove()</code>. This can be customized by passing a callback to the\n<code>.dismissible()</code> call. To use jQuery&#39;s <code>.slideUp()</code> you would use the\nfollowing call:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n  <td class=\"code\"><pre><span class=\"predefined\">$</span>(<span class=\"keyword\">function</span>(){\n  <span class=\"predefined\">$</span>(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">.dismissible</span><span class=\"delimiter\">'</span></span>).dismissible({\n    <span class=\"function\">success</span>: <span class=\"keyword\">function</span>(helper){\n      helper.slideUp(); <span class=\"comment\">//'helper' is the jQuery-wrapped element</span>\n    }\n  });\n});\n</pre></td>\n</tr></table>\n</div></div>\n<h3>Storing dismissed helpers for authenticated users</h3>\n\n<p><code>dismissible_helpers</code> can store the help text dismissal state on a\nuser/account. That way, when a user dismisses some help text, it follows\nthem across browsers.</p>\n\n<p><code>dismissible_helpers</code> will attempt to retrieve the authenticated user by\nchecking for a <code>current_user</code> helper method. If the\nApplicationController responds to <code>current_user</code>, <code>dismissible_helpers</code>\nwill check to see if the returned object has a <code>dismissed_helpers</code>\nattribute. It will then add the dismissed help text to that model.</p>\n\n<p><code>dismissible_helpers</code> expects that the <code>dismissed_helpers</code> attribute is\nan array. With vanilla ActiveRecord, you can achieve this with attribute\nserialization:</p>\n\n<p>First, add the column to your model (we&#39;ll assume it&#39;s an Account class\nin this example)</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">class</span> <span class=\"class\">AddDismissedHelpersToAccounts</span> &lt; <span class=\"constant\">ActiveRecord</span>::<span class=\"constant\">Migration</span>\n  <span class=\"keyword\">def</span> <span class=\"function\">up</span>\n    add_column <span class=\"symbol\">:accounts</span>, <span class=\"symbol\">:dismissed_helpers</span>, <span class=\"symbol\">:text</span>\n  <span class=\"keyword\">end</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">down</span>\n    remove_column <span class=\"symbol\">:accounts</span>, <span class=\"symbol\">:dismissed_helpers</span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Then add the <code>serialize</code> call to your model</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">class</span> <span class=\"class\">Account</span> &lt; <span class=\"constant\">ActiveRecord</span>::<span class=\"constant\">Base</span>\n  serialize <span class=\"symbol\">:dismissed_helpers</span>, <span class=\"constant\">Array</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>If you are using PostgreSQL as your database, you could use\n<a href=\"https://github.com/dockyard/postgres_ext\">postgres_ext</a> to\nadd native array support to your models. You would just need the\nfollowing migration to add the dismissed_helpers attribute\nto your model:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">class</span> <span class=\"class\">AddDismissedHelpersToAccounts</span> &lt; <span class=\"constant\">ActiveRecord</span>::<span class=\"constant\">Migration</span>\n  <span class=\"keyword\">def</span> <span class=\"function\">up</span>\n    add_column <span class=\"symbol\">:accounts</span>, <span class=\"symbol\">:dismissed_helpers</span>, <span class=\"symbol\">:string</span>, <span class=\"symbol\">:array</span> =&gt; <span class=\"predefined-constant\">true</span>\n  <span class=\"keyword\">end</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">down</span>\n    remove_column <span class=\"symbol\">:accounts</span>, <span class=\"symbol\">:dismissed_helpers</span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<h2>Wrapping up</h2>\n\n<p>Hopefully you find the gem useful. If you find any issues with it, \n<a href=\"https://github.com/dockyard/dismissible_helpers/issues\">let us know</a>!</p>\n","summary":"Add simple to implement help text that users can dismiss","illustration":null,"illustration_alt":null,"tags":["ruby","ruby-on-rails","gems"],"shallow":false,"date":"2013-01-04T00:00:00Z"},{"id":"politics/2013/01/03/integration-is-hard","title":"Integration is Hard","dockyarder":"chris-gill","body":"<p>There&#39;s no one-size-fits-all approach to integrating with external\nsystems because each system comes with its own unique requirements and\nconstraints.  This article aims to describe some of the varying\napproaches we used to integrate with external systems in a recent\nproject we built for the <a href=\"http://www.aflcio.org\">AFL-CIO</a>&#39;s Super PAC\n<a href=\"http://www.workersvoice.org\">Worker&#39;s Voice</a>.</p>\n\n<p>For this project, integration with external vendors was the biggest technical hurdle to clear in order to ensure a successful launch.  The project, called <a href=\"http://repurpose.workersvoice.org/\">RePurpose</a>, gives volunteers and activists a way to choose how the movement&#39;s resources get deployed.  The more volunteering and activism a person does, the more RePurpose points they earn, which they can then use to direct the funding of things like more canvassers, direct mail pieces or online ads.  </p>\n\n<p>It&#39;s a way to give the people on the ground a say in how the money gets spent.</p>\n\n<p>The volunteering and activism data for which RePurpose points get awarded exists in several separate systems:</p>\n\n<ul>\n<li><p><a href=\"http://www.ngpvan.com\">VAN</a></p>\n\n<p>VAN is the de facto standard tool used everywhere in progressive politics - from small local races all the way up to the Obama campaign.  It&#39;s an organizing tool that stores volunteer records, canvass records (door knocks and phone calls), activist codes, and other organizing data used by progressive campaigns and organizations.</p></li>\n<li><p><a href=\"http://www.salsalabs.com\">Salsa Labs</a></p>\n\n<p>Salsa has a platform with a rich API and tools to create fundraising and advocacy campaigns and manage organizer data.  It stores supporter records, online donation records, and pledges to take action - among other things.</p></li>\n<li><p><a href=\"http://amicushq.com/\">Amicus</a></p>\n\n<p>Amicus is a new online tool that leverages Facebook connections of volunteers to enhance fundraising and advocacy campaigns.  It stores a set of volunteer records, friend invite records, and social calling records.</p></li>\n</ul>\n\n<p>The goal was straightforward - RePurpose needed to know when a volunteer\nwas performing tasks in external systems, so that the user could receive\npoints in RePurpose for those tasks.  RePurpose itself has a Task model\nthat supports multiple kinds of tasks in the various external systems -\nsurvey tasks, activist code tasks, and\n<a href=\"http://en.wikipedia.org/wiki/Canvassing\">canvass</a> tasks in VAN, donation tasks and action tasks in Salsa, and friend invite tasks and call tasks in Amicus.  So a RePurpose administrator could set up a task that would award 10 RePurpose points each time a volunteer knocked on a door, made a phone call, or made a donation.</p>\n\n<p>Here&#39;s how we did it in each system:</p>\n\n<h2>VAN Sync</h2>\n\n<p>VAN, which was recently voted <a href=\"http://rootscamp.neworganizing.com/awards/2012/\">Most Valuable\nTech</a> at <a href=\"http://rootscamp.neworganizing.com/\">RootsCamp\n2012</a>, has a\n<a href=\"http://en.wikipedia.org/wiki/SOAP\">SOAP</a>-based API that allows us to list survey questions, list activist codes, and create and list volunteers (among other things) - all of which we use to get that data into RePurpose, but the API doesn&#39;t support retrieving the raw canvasser data - which is the piece we really need to award credit.  To get this data the two options were a nightly sync of flat files, or getting direct access to a replicated database.  We opted for the flat file sync as we knew it had worked for other organizations (among them the Democratic National Committee) and the replicated database approach would have incurred extra time, expense, and risk.</p>\n\n<p>We worked with the great folks at VAN to get a nightly data sync into\nplace.  Each night around 3am, VAN uploads a zipped TSV (tab-separated\nvalues) export of the relevant data from all the relevant tables in the\nAFL-CIO&#39;s VAN database.  This is not a delta - because the data size is\nrelatively low (&lt; 1 GB), we receive the full data dump each night.  We\nthen unzip, verify that all the files we expect are present, convert\ncharacter encodings from\n<a href=\"http://en.wikipedia.org/wiki/Windows-1252\">CP1252</a> to\n<a href=\"http://en.wikipedia.org/wiki/UTF-8\">UTF8</a> (VAN uses <a href=\"http://en.wikipedia.org/wiki/Microsoft_SQL_Server\">MSSQL\nServer</a>), and load\nthis data into auxiliary tables in the RePurpose database using\n<a href=\"http://www.postgresql.org\">PostgreSQL</a>&#39;s\n&quot;<a href=\"http://www.postgresql.org/docs/9.2/static/sql-copy.html\">COPY</a>&quot; command.  All told it takes about 5 minutes each night to process, load, and index around 700MB of data from flat files to get it into PostgreSQL and ready to be used.  Then based on the new data we award credit to volunteers for completing tasks.  This approach handles the most data of any of the external integrations and does so reliably.  It has one drawback which is that the data can be at most 24 hours stale by the time we receive it, which is not ideal but is certainly workable.  In practice this has not been a problem for us.</p>\n\n<h2>Salsa API</h2>\n\n<p>Salsa has a\n<a href=\"http://en.wikipedia.org/wiki/Representational_state_transfer\">REST</a>-based\n<a href=\"http://en.wikipedia.org/wiki/Application_programming_interface\">API</a> for authenticating and for creating and retrieving objects in the Salsa system.  For RePurpose, that meant creating and listing supporters (Salsa&#39;s name for a volunteer record), listing donation pages, listing donations, and listing completed actions like making a pledge or writing a letter to an editor.  In the context of RePurpose we were most interested in listing completed donations and completed actions so we could award the person who completed the task with their RePurpose points.  Since we could get all this information via the API, and since the API can list objects created since a certain timestamp, we set up a scheduled job to poll the API and ask for anything new that has come in since the last record we retrieved.  This job runs every 10 minutes and gets us pretty close to realtime - if you make a donation through one of the Salsa donation pages that&#39;s connected to a RePurpose task, your points will be credited to you within 5 minutes on average.</p>\n\n<h2>Amicus Exports</h2>\n\n<p>The Amicus API was still a work in progress during the RePurpose project, so we could not use it - but they did have an on-demand user export that could be programmatically triggered.  Since the user export contained all the information we needed about how many calls a user had attempted and how many friends they had invited on Facebook, this would get us where we needed to be.  We would import the Amicus users nightly on a schedule and load them into auxiliary tables in the RePurpose database, which were then used to award credit to the folks making calls and inviting friends.  Since we could trigger the export on demand, we also added a button to the RePurpose admin area to allow administrators to reload the Amicus data on demand and credit any new arrivals.</p>\n\n<h2>Matching</h2>\n\n<p>You&#39;ve heard how we get the data into the RePurpose system, but how do we match the volunteers from the various external systems up with the users in RePurpose?  </p>\n\n<p>There are all kinds of pitfalls in implementing person matching, like trying to match up on variations of a first name, or variations of a street address, or keeping track of previous known-good addresses.  Complexity can quickly spiral out of control for marginal benefit.  For this project we went with a simple assumption - all matching would occur via email address.  So if a user was doing things in the field, which gets recorded into VAN - they should use the same email address that they would use to create their RePurpose account.  Likewise for Salsa and Amicus.  Since each of these external systems stores an email address for the volunteer, with this simple assumption, the matching logic becomes simple - comparing lowercase versions of email addresses.</p>\n\n<h2>Awarding Credit</h2>\n\n<p>There were some wrinkles with awarding credit for tasks performed in external systems.  Since each task hinged on an external datapoint, it was critical to uniquely identify these datapoints.  For most tasks, the granularity of data allowed us to use the primary key of the foreign data source as the unique identifier.  In some cases the data would just be an aggregate count, like &quot;15 calls made&quot; - in which case we would generate our own idempotent IDs for those calls so as to award credit once and have a way to prevent awarding credit for the same call a second time.  In addition to keeping things crediting properly, this had the added benefit of allowing any RePurpose points in the system can be traced back to the explicit data point in the external system that was responsible for creating them.</p>\n\n<h2>Wrapping Up</h2>\n\n<p>Now that you&#39;ve seen how we took three different approaches to integrate\nwith three different systems, you&#39;re probably thinking that integration\ncan be tricky.  But if you&#39;re in a progressive organization that uses\nVAN, Salsa, or Amicus - remember that <a href=\"https://dockyard.com/contact\">here at DockYard we have the\nexpertise and experience to make it look\neasy</a>.</p>\n","summary":"A description of techniques used to integrate with various vendors on a recent DockYard project for the AFL-CIO's Super PAC Worker's Voice.","illustration":null,"illustration_alt":null,"tags":["politics","postgresql"],"shallow":false,"date":"2013-01-03T00:00:00Z"},{"id":"community/2012/10/26/openhack-boston","title":"OpenHack Boston 1.0","dockyarder":"brian-cardarella","body":"<p><img src=\"/images/openhack.png\" alt=\"OpenHack\">\nLast night we hosted Boston&#39;s first\n<a href=\"http://openhack.github.com/\">OpenHack</a>\nevent.</p>\n\n<p><a href=\"http://twitter.com/qrush\">Nick Quaranto</a> started OpenHack at his <a href=\"http://coworkbuffalo.com/\">CoWorkBuffalo</a> office space,\nbased upon <a href=\"http://bostonrb.org\">BostonRB</a>&#39;s former (don&#39;t get me\nstarted) Hackfests. The idea is pretty simple: a quiet space with food,\ndrinks, and wifi is provided. Developers show up and hack on some\nsoftware for a few hours.</p>\n\n<p>On 2-day notice we had 11 in attendance and all around everyone had a\nvery productive night. Currently our office maxes out at 20 chairs so until we buy more\nwe cannot accept over 20, but next month we will open the\nevent to a wider audience. We want to welcome more than just Ruby devs\n(with the exception of 2 all were Ruby devs) to the event.</p>\n\n<p>Follow <a href=\"http://twitter.com/dockyard\">@DockYard</a> for all Boston OpenHack\nannouncements.</p>\n","summary":"Come one, come all!","illustration":null,"illustration_alt":null,"tags":["community"],"shallow":false,"date":"2012-10-26T00:00:00Z"},{"id":"design/2012/10/11/expanding-the-yard","title":"Expanding the Yard","dockyarder":"angelo-simeoni","body":"<div class=\"one\">\n  <div class=\"content\">\n    <h2>Outgrowing simplicity</h2>\n    <p>The first version of our site was contained within a single page. At the time, it served its purpose well. As we added more, it began to feel like it trying to do too much. Upon recognizing this, we began reimagining our site.</p>\n  </div>\n</div>\n\n<div class=\"two\">\n  <div class=\"content\">\n    <h2>Structural changes</h2>\n    <p>The very first step we took was to establish a reasonable structure of our new site. This helped to inform the site content, and much of the new site design.</p>\n    <p>We decided to make the landing page an overview of DockYard. Our work deserved its own place to be shown. We have added people to our team, and we wanted a page dedicated to community & open source projects. We have this blog thing, and we also wanted a dedicated contact page.</p>\n  </div>\n</div>\n\n<div class=\"three\">\n  <div class=\"content\">\n    <h2>Design & code</h2>\n    <p>After the structural decisions had been made, it was time to put down some design. This was done primarily in the browser using actual code. This allowed rapid iteration over page layout, content tweaks, and especially mobile design. Being able to try things almost right away in browser informed many design decisions.</p>\n    <p>With the new design, the Narwin (half narwhal, half penguin) was introduced as our mascot and overseer of all things nautical. We have high confidence that he will serve us loyally now and in the future.</p>\n  </div>\n</div>\n\n<div class=\"four\">\n  <div class=\"content\">\n    <h2>Well done</h2>\n    <p>It was a lot of fun to reimagine our site and we are all proud of the result. It is designed to grow and evolve along with us.</p>\n    <p>There are plenty of hidden surprises in the new site. See if you can find an easter egg or two.</p>\n  </div>\n</div>\n","summary":"The story of how we reimagined our site.","illustration":null,"illustration_alt":null,"tags":["design"],"shallow":false,"date":"2012-10-11T00:00:00Z"},{"id":"ruby/2012/10/09/client-side-validations-3-2-released","title":"ClientSideValidations 3.2 Released!","dockyarder":"brian-cardarella","body":"<p>I just released <a href=\"https://github.com/bcardarella/client_side_validations\">ClientSideValidations 3.2</a></p>\n\n<p>This is a very big release for the gem, one that took <em>way</em> too much\ntime to get done. I want to start by re-introducing people to the gem,\nwhat the value is, and what the changes for 3.2 are.</p>\n\n<p>ClientSideValidations is just that, it will extract the validations from\nyour model and apply them to your forms on the client. The\n<a href=\"https://github.com/bcardarella/client_side_validations/blob/master/README.md\">README</a>\nhas more comprehensive instructions. But here is the quick guide:</p>\n\n<p>Add <code>rails.validation.js</code> to your asset pipeline, then add <code>:validate =&gt;\ntrue</code> to your form like so:</p>\n<div class=\"highlight erb \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre><span class=\"inline\"><span class=\"inline-delimiter\">&lt;%=</span> form_for <span class=\"instance-variable\">@user</span>, <span class=\"symbol\">:validate</span> =&gt; <span class=\"predefined-constant\">true</span> <span class=\"keyword\">do</span> |f| <span class=\"inline-delimiter\">%&gt;</span></span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>And that is it. If you have more <a href=\"https://github.com/bcardarella/client_side_validations/blob/master/README.md#conditional-validators\">complex validators</a> or \n<a href=\"https://github.com/bcardarella/client_side_validations/blob/master/README.md#custom-validators\">custom validators</a>\non your models then you can quickly support these as well.</p>\n\n<h2>Changes</h2>\n\n<p>Version 3.2 brings many changes to the gem. The first of which is that\nfrom this version on we will be following <a href=\"http://semver.org\">Semantic Versioning</a> or trying our best to do so.</p>\n\n<p>The next change, and the biggest backward-incompatible change, is that\nthe support for <code>SimpleForm</code>, <code>Formtastic</code>, <code>Mongoid</code>, and <code>MongoMapper</code>\nhave been removed. These have been put into their own\n<a href=\"https://github.com/bcardarella/client_side_validations/wiki/Plugins\">plugins</a>:</p>\n\n<ul>\n<li><a href=\"https://github.com/dockyard/client_side_validations-simple_form\">SimpleForm</a></li>\n<li><a href=\"https://github.com/dockyard/client_side_validations-formtastic\">Formtastic</a></li>\n<li><a href=\"https://github.com/dockyard/client_side_validations-mongoid\">Mongoid</a></li>\n<li><a href=\"https://github.com/dockyard/client_side_validations-mongo_mapper\">MongoMapper</a></li>\n</ul>\n\n<p>This will be the convetion from now on. The <code>ClientSideValidations</code> gem\nitself will only support <code>Rails</code> out of the box. If there are additional\nFormBuilders or ORMs that people need support for these will be done so\nvia the plugins. This will allow for quicker bug fixes and less\ncomplexity in the core gem.</p>\n\n<p>I have also released a gem for <a href=\"https://github.com/dockyard/client_side_validations-turbolinks\">Turbolinks support</a>.\nTurbolinks support will be part of the core gem for the next release\n(4.0).</p>\n\n<p>There have been a significant number of bug fixes for this release. If\nyou ran into a bug before odds are it is now resolved.</p>\n\n<p><code>Proc</code>s are now fullow supported in <code>ActiveModel</code> validators, you just\nhave to force the validation to evaluate:</p>\n<div class=\"highlight erb \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre><span class=\"inline\"><span class=\"inline-delimiter\">&lt;%=</span> f.text_field, <span class=\"symbol\">:validate</span> =&gt; { <span class=\"symbol\">:length</span> =&gt; <span class=\"predefined-constant\">true</span> } <span class=\"inline-delimiter\">%&gt;</span></span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>I have also added a FormBuilder method for adding validations for\nattributes that are not being written to the form but may be added\ndynamically later:</p>\n<div class=\"highlight erb \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre><span class=\"inline\"><span class=\"inline-delimiter\">&lt;%=</span> f.validate <span class=\"symbol\">:age</span>, <span class=\"symbol\">:weight</span> <span class=\"inline-delimiter\">%&gt;</span></span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>This method can also take validator specific options.</p>\n\n<h2>JavaScript API Additions and Changes</h2>\n\n<p>The first major change is that <code>data-validate=&quot;true&quot;</code> is no longer\nrendered on the inputs server-side. It is added to the input at\nrun-time.</p>\n\n<p>The second is the addition of some <a href=\"https://github.com/bcardarella/client_side_validations/blob/master/README.md#enabling-disabling-and-resetting-on-the-client\">jQuery functions</a>:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre><span class=\"predefined\">$</span>(form or input).enableClientSideValidations();\n<span class=\"predefined\">$</span>(form or input).disableClientSideValidations();\n<span class=\"predefined\">$</span>(form).resetClientSideValidations();\n</pre></td>\n</tr></table>\n</div></div>\n<ul>\n<li><p><code>$.fn.enableClientSideValidations()</code> acts upon either a form or input\nand will enable them for ClientSideValidations. If you are adding\nforms or inputs dynamically to the DOM via AJAX or some other means you\n<em>need</em> to call this function on them.</p></li>\n<li><p><code>$.fn.disableClientSideValidations()</code> acts upon either a form or an\ninput and will disable them for ClientSideValidations.</p></li>\n<li><p><code>$.fn.resetClientSideValidations()</code> will reset the validations. This\nmeans disabling, removing all error messages, and enabling\nvalidaitons.</p></li>\n</ul>\n\n<h2>Security</h2>\n\n<p>There have been some security fixes. Mostly around the <code>Uniqueness</code>\nmiddleware.</p>\n\n<ul>\n<li><p>Calls to the uniqueness middleware only act upon models and\nattributes that have a uniqueness validator defined in the model.</p></li>\n<li><p>The <a href=\"https://github.com/bcardarella/client_side_validations/blob/master/README.md#security\">API for turning off uniqueness app-wide has been changed</a>.</p></li>\n</ul>\n\n<h2>Backwards incompatiable changes</h2>\n\n<ul>\n<li><p>If you were relying upon <code>data-validate=&quot;true&quot;</code> being rendered on the\ninputs from the server your code will break.</p></li>\n<li><p><code>ClientSideValidations::Config.uniqueness_validator_disabled</code> has been\nremoved. Please add <code>ClientSideValidations::Config.disabled_validators\n= [:uniqueness]</code> to your initializer if you require this functionality.</p></li>\n</ul>\n\n<p>Please give the gem a try and <a href=\"http://twitter.com/bcardarella\">let me know</a> what you think!</p>\n","summary":"Better late than never","illustration":null,"illustration_alt":null,"tags":["ruby","ruby-on-rails","gems"],"shallow":false,"date":"2012-10-09T00:00:00Z"},{"id":"ruby/2012/09/21/querying-postgresql-datatypes-in-active-record-with-postgres_ext","title":"Querying PostgreSQL datatypes in ActiveRecord with postgres_ext","dockyarder":"dan-mcclain","body":"<p>I created the <a href=\"https://github.com/dockyard/postgres_ext\">postgres_ext</a> gem to add ActiveRecord support for \nPostgreSQL datatypes in Rails 3.2+. So far, I have added support for\nthe CIDR, INET, MACADDR, UUID, and array datatypes. <a href=\"https://github.com/dockyard/postgres_ext/issues\">Please open an issue on GitHub if you&#39;d like other datatypes supported that aren&#39;t currently</a>.\nSince we can now add these columns via Rails migrations, and have\nINET/CIDR and array columns converted to Ruby <code>IPAddr</code> and <code>Array</code>\nobjects, resepectively.</p>\n\n<p>Rails 4.0 has also added support for CIDR, INET, MACADDR and array\ndatatypes.</p>\n\n<p>It would be great if we could take advantage of\nPostgreSQL&#39;s query support for these datatypes. Wait, we can already do\nthat!</p>\n\n<h2>Querying against arrays using <code>ANY</code> and <code>ALL</code></h2>\n\n<p>In PostgreSQL, you can query for records where any or all elements match\na given predicate.</p>\n<div class=\"highlight sql \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n</pre></td>\n  <td class=\"code\"><pre><span class=\"class\">SELECT</span> *\n<span class=\"keyword\">FROM</span> users\n<span class=\"keyword\">WHERE</span> <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">johnny</span><span class=\"delimiter\">'</span></span> = <span class=\"keyword\">ANY</span>(nicknames)\n<span class=\"comment\">-- Finds any record that has 'johnny' stored in the nicknames array</span>\n\n<span class=\"class\">SELECT</span> *\n<span class=\"keyword\">FROM</span> user_scores\n<span class=\"keyword\">WHERE</span> <span class=\"integer\">1000</span> &gt; <span class=\"keyword\">ALL</span>(scores)\n<span class=\"comment\">-- Finds any record that has over 1000 stored in every element in the</span>\n<span class=\"comment\">-- scores array</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>We can actually use arel to generate these queries.</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n  <td class=\"code\"><pre>user_arel = <span class=\"constant\">User</span>.arel_table\n\nany_nicknames_function = <span class=\"constant\">Arel</span>::<span class=\"constant\">Nodes</span>::<span class=\"constant\">NamedFunction</span>.new(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">ANY</span><span class=\"delimiter\">'</span></span>, [user_arel[<span class=\"symbol\">:nicknames</span>]])\npredicate = <span class=\"constant\">Arel</span>::<span class=\"constant\">Nodes</span>::Equality(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">test</span><span class=\"delimiter\">'</span></span>, any_nicknames_function)\n\nsql_statement = user_arel.project(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">*</span><span class=\"delimiter\">'</span></span>).where(predicate).to_sql\n<span class=\"comment\">#=&gt; SELECT * FROM \\&quot;users\\&quot; WHERE 'test' = ANY(\\&quot;users\\&quot;.\\&quot;nicknames\\&quot;)</span>\n\nusers_with_nickname = <span class=\"constant\">User</span>.find_by_sql(sql_statement)\n</pre></td>\n</tr></table>\n</div></div>\n<p>In the above example, we have to create an <code>Equality</code> node manually\nsince the left hand side of the predicate is the value, instead of the\ncolumn. If you need <code>&lt;</code> in your predicate, you would create a <code>LessThan</code>\nnode instead of an equality node.</p>\n\n<p>This example applies to both Rails 3.2+ with postgres_ext and Rails 4.0\nwith native array support.</p>\n\n<h2>Array overlap</h2>\n\n<p>In PostgreSQL, you can check if two arrays have one or more elements in\ncommon by using the overlap operator, <code>&amp;&amp;</code>.</p>\n<div class=\"highlight sql \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n  <td class=\"code\"><pre><span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">{1,2,3}</span><span class=\"delimiter\">'</span></span> &amp;&amp; <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">{4,5,6}</span><span class=\"delimiter\">'</span></span>\n<span class=\"comment\">-- f</span>\n<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">{1,2,3}</span><span class=\"delimiter\">'</span></span> &amp;&amp; <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">{3,4}</span><span class=\"delimiter\">'</span></span>\n<span class=\"comment\">-- t</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>In postgres_ext, I added a new Arel predicate node for the \noverlap operator.  For the time being, it is named <code>ArrayOverlap</code>\nand can be called from a <code>Arel::Attribute</code> as <code>#array_overlap</code>. It\nis likely that this will be renamed to <code>Overlap</code> and <code>#overlap</code>,\nrespectively, in the next release of postgres_ext.</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n  <td class=\"code\"><pre>user_arel = <span class=\"constant\">User</span>.arel_table\n\n<span class=\"constant\">User</span>.where(user_arel[<span class=\"symbol\">:tags</span>].array_overlap([<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">one</span><span class=\"delimiter\">'</span></span>,<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">two</span><span class=\"delimiter\">'</span></span>])).to_sql\n<span class=\"comment\"># =&gt; SELECT \\&quot;users\\&quot;.* FROM \\&quot;users\\&quot; WHERE \\&quot;users\\&quot;.\\&quot;tags\\&quot; &amp;&amp; '{one,two}'</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>One case that we have used an array column in tandem with the overlap\noperator was adding tags to a user. We had three tags that could be\nplaced on a user, so we stored this data an array column. We then had a\nsearch form which had a multiselect field for that tags column. The\nmultiselect would give us an array of possible values that we wanted to\nfind records that had any of those selected values. So instead of\ncrafting a statement with multiple <code>ANY</code> queries <code>OR</code>ed together, we\nused overlap instead, resulting in only one predicate.</p>\n\n<h2>INET/CIDR subnet inclusion</h2>\n\n<p>In PostgreSQL, you can see if a particular INET address is contained in\na specific subnet with the contained within operator, <code>&lt;&lt;</code>.</p>\n<div class=\"highlight sql \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n  <td class=\"code\"><pre>inet <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">192.168.1.6</span><span class=\"delimiter\">'</span></span> &lt;&lt; inet <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">10.0.0.0/24</span><span class=\"delimiter\">'</span></span>\n<span class=\"comment\">-- f</span>\n\ninet <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">192.168.1.6</span><span class=\"delimiter\">'</span></span> &lt;&lt; inet <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">192.168.1.0/24</span><span class=\"delimiter\">'</span></span>\n<span class=\"comment\">-- t</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>In postgres_ext, I added a new Arel predicate node for the \ncontained within operator. It can be called from a\n<code>Arel::Attribute</code> with <code>#contained_within</code>. I also added a visitor for\nIPAddr objects so that they are correctly converted to quoted strings\nwhen called within a Arel predicate.</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n  <td class=\"code\"><pre>user_arel = <span class=\"constant\">User</span>.arel_table\n\n<span class=\"constant\">User</span>.where(user_arel[<span class=\"symbol\">:ip_address</span>].contained_within(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">10.0.0.0/8</span><span class=\"delimiter\">'</span></span>).to_sql\n<span class=\"comment\">#=&gt; SELECT \\&quot;users\\&quot;.* FROM \\&quot;users\\&quot; WHERE \\&quot;users\\&quot;.\\&quot;ip_address\\&quot; &lt;&lt; '10.0.0.0/8'</span>\n</pre></td>\n</tr></table>\n</div></div>\n<h2>We&#39;re not done yet</h2>\n\n<p>We have only scratched the surface of the datatype specific functions\nand operators in PostgreSQL. There are many more to be implemented, and\nthe plan is to support them all. This post highlights what has been\nimplemented so far, and also what you can do with Arel already. I plan\nto put together some pull requests for Arel to add in some of the\nPostgreSQL operators. If there is an operator missing in postgres_ext\nthat you want/need, please <a href=\"https://github.com/dockyard/postgres_ext/issues?state=open\">open an issue on\nGithub</a>!</p>\n","summary":"Returning records based on array elements and network subnets","illustration":null,"illustration_alt":null,"tags":["ruby","ruby-on-rails","postgresql","gems"],"shallow":false,"date":"2012-09-21T00:00:00Z"},{"id":"design/2012/09/20/making-of-the-dockyard-narwin","title":"Making of the DockYard Narwin","dockyarder":"amanda-cheung","body":"<p>Half narwhal, half penguin. He&#39;s a cute lil&#39; fella with quite the personality. He set the stage for the redesign of our website while becoming DockYard&#39;s new brand mascot.</p>\n\n<p>The Final Version:\n<img src=\"/images/narwin.jpg\" alt=\"DockYard\"></p>\n\n<p>The Evolution:\n<img src=\"/images/narwin.gif\" alt=\"DockYard Narwin\"></p>\n","summary":"Animated gif of the evolution of the narwin","illustration":null,"illustration_alt":null,"tags":["design"],"shallow":false,"date":"2012-09-20T00:00:00Z"},{"id":"ruby/2012/09/18/rails-4-sneak-peek-postgresql-array-support","title":"Rails 4.0 Sneak Peek: PostgreSQL array support","dockyarder":"dan-mcclain","body":"<p>I&#39;m happy to announce that <a href=\"https://github.com/rails/rails/pull/7547\">Rails 4.0 now has support for PostgreSQL\narrays</a>. You can create an\narray column easily at the time of migration by adding <code>:array =&gt; true</code>.\nCreating an array column will respect the other options you add to the\ncolumn (<code>length</code>, <code>default</code>, etc). </p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n  <td class=\"code\"><pre>create_table <span class=\"symbol\">:table_with_arrays</span> <span class=\"keyword\">do</span> |t|\n  t.integer <span class=\"symbol\">:int_array</span>, <span class=\"symbol\">:array</span> =&gt; <span class=\"predefined-constant\">true</span>\n  <span class=\"comment\"># integer[]</span>\n  t.integer <span class=\"symbol\">:int_array</span>, <span class=\"symbol\">:array</span> =&gt; <span class=\"predefined-constant\">true</span>, <span class=\"symbol\">:length</span> =&gt; <span class=\"integer\">2</span>\n  <span class=\"comment\"># smallint[]</span>\n  t.string <span class=\"symbol\">:string_array</span>, <span class=\"symbol\">:array</span> =&gt; <span class=\"predefined-constant\">true</span>, <span class=\"symbol\">:length</span> =&gt; <span class=\"integer\">30</span>\n  <span class=\"comment\"># char varying(30)[]</span>\n<span class=\"keyword\">end</span> \n</pre></td>\n</tr></table>\n</div></div>\n<p>It should be noted when setting the default value for an array column,\nyou should use PostgreSQL&#39;s array notation for that value\n(<code>{value,another value}</code>). If you want the default value to be an empty\narray you would have <code>:default =&gt; &#39;{}&#39;</code>.</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n  <td class=\"code\"><pre>create_table <span class=\"symbol\">:table_with_arrays</span> <span class=\"keyword\">do</span> |t|\n  t.integer <span class=\"symbol\">:int_array</span>, <span class=\"symbol\">:array</span> =&gt; <span class=\"predefined-constant\">true</span>, <span class=\"symbol\">:default</span> =&gt; <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">{}</span><span class=\"delimiter\">'</span></span>\n  <span class=\"comment\"># integer[], default == []</span>\n  t.integer <span class=\"symbol\">:int_array</span>, <span class=\"symbol\">:array</span> =&gt; <span class=\"predefined-constant\">true</span>, <span class=\"symbol\">:length</span> =&gt; <span class=\"integer\">2</span>, <span class=\"symbol\">:default</span> =&gt; <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">{1}</span><span class=\"delimiter\">'</span></span>\n  <span class=\"comment\"># smallint[], default == [1]</span>\n<span class=\"keyword\">end</span> \n</pre></td>\n</tr></table>\n</div></div>\n<h2>An example of a model with an array value</h2>\n\n<p>Let&#39;s say that we have a user model, which has a formal first and last\nname, and also a number of nicknames (I rarely ever go by Daniel). The\nfollowing code would create the table we need to store this.</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n  <td class=\"code\"><pre>create_table <span class=\"symbol\">:users</span> <span class=\"keyword\">do</span> |t|\n  t.string <span class=\"symbol\">:first_name</span>\n  t.string <span class=\"symbol\">:last_name</span>\n  t.string <span class=\"symbol\">:nicknames</span>, <span class=\"symbol\">:array</span> =&gt; <span class=\"predefined-constant\">true</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>And we have a simple model for this table:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">class</span> <span class=\"class\">User</span> &lt; <span class=\"constant\">ActiveRecord</span>::<span class=\"constant\">Base</span>\n  attr_accessible <span class=\"symbol\">:first_name</span>, <span class=\"symbol\">:last_name</span>, <span class=\"symbol\">:nicknames</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Where we don&#39;t have a default value, if we instantiate a User object\nwith the following</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>john = <span class=\"constant\">User</span>.create(<span class=\"symbol\">:first_name</span> =&gt; <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">John</span><span class=\"delimiter\">'</span></span>, <span class=\"symbol\">:last_name</span> =&gt; <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Doe</span><span class=\"delimiter\">'</span></span>)\n</pre></td>\n</tr></table>\n</div></div>\n<p>If we call <code>john.nicknames</code>, <code>nil</code> would be returned, and is stored as\n<code>NULL</code> in PostgresSQL. We can set the nicknames attribute at the time of\ncreation with</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n  <td class=\"code\"><pre>john = <span class=\"constant\">User</span>.create(<span class=\"symbol\">:first_name</span> =&gt; <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">John</span><span class=\"delimiter\">'</span></span>, <span class=\"symbol\">:last_name</span> =&gt; <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Doe</span><span class=\"delimiter\">'</span></span>,\n  <span class=\"symbol\">:nicknames</span> =&gt; [<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Jack</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Johnny</span><span class=\"delimiter\">'</span></span>])\n</pre></td>\n</tr></table>\n</div></div>\n<p>If we then retrieved this record from the database, the <code>nicknames</code>\nvalue would be casted to an array, instead of returning the string of\n<code>{Jack,Johnny}</code>.  Rails 4.0 has a pure ruby array value parser, but if\nyou would like to speed up the parsing process, the previously mentioned\n<a href=\"https://github.com/dockyard/pg_array_parser\">pg_array_parser</a>\ngem will be used if it is available. PgArrayParser has\na C extension, and a Java implementation for JRuby (although the gem\ncurrently broken in JRuby, this is something I am fixing now).</p>\n\n<p>One important thing to note when interacting with array (or other\nmutable values) on a model.  ActiveRecord does not currently track\n&quot;destructive&quot;, or in place changes. These include array <code>push</code>ing and\n<code>pop</code>ing, <code>advance</code>-ing DateTime objects. If you want to use a\n&quot;destructive&quot; update, you must call <code>&lt;attribute&gt;_will_change!</code> to let\nActiveRecord know you changed that value. With our User model, if we\nwanted to append a nickname, you can do the following:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n</pre></td>\n  <td class=\"code\"><pre>john = <span class=\"constant\">User</span>.first\n\njohn.nicknames += [<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Jackie boy</span><span class=\"delimiter\">'</span></span>]\n<span class=\"comment\"># or</span>\njohn.nicknames = john.nicknames.push(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Jackie boy</span><span class=\"delimiter\">'</span></span>)\n<span class=\"comment\"># Any time an attribute is set via `=`, ActiveRecord tracks the change</span>\njohn.save\n\njohn.reload\njohn.nicknames\n<span class=\"comment\">#=&gt; ['Jack', 'Johnny', 'Jackie Boy']</span>\n\njohn.nicknames.pop\njohn.nicknames_will_change!\n<span class=\"comment\"># '#pop' changes the value in place, so we have to tell ActiveRecord it changed</span>\njohn.save\n</pre></td>\n</tr></table>\n</div></div>\n<p>One last note about arrays in PostgreSQL: there are no element count\nconstraints, and any array can be multidimensional. With the\nmultidimensional arrays, they must be &quot;square&quot; (the sub arrays must all\nhave the same number of elements).</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n  <td class=\"code\"><pre>[[<span class=\"integer\">1</span>,<span class=\"integer\">2</span>,<span class=\"integer\">3</span>], [<span class=\"integer\">2</span>,<span class=\"integer\">3</span>,<span class=\"integer\">4</span>], [<span class=\"integer\">4</span>,<span class=\"integer\">5</span>,<span class=\"predefined-constant\">nil</span>]]\n<span class=\"comment\"># Valid array value in PostgreSQL, each subarray has the same number of</span>\n<span class=\"comment\"># elements</span>\n[<span class=\"integer\">1</span>,<span class=\"integer\">2</span>,[<span class=\"integer\">3</span>,<span class=\"integer\">4</span>]]\n<span class=\"comment\"># Invalid array, we are mixing values and arrays at a single level</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>In my next article, I will talk about querying PostgreSQL arrays in both\npostgres_ext and Rails 4.0. Go forth and use arrays in Rails 4.0!</p>\n","summary":"Storing arrays natively in PostgreSQL is now supported by Rails","illustration":null,"illustration_alt":null,"tags":["ruby","ruby-on-rails","postgresql"],"shallow":false,"date":"2012-09-18T00:00:00Z"},{"id":"announcement/2012/09/05/doug-yun-is-a-dockyarder","title":"Doug Yun is a DockYarder!","dockyarder":"brian-cardarella","body":"<p><img src=\"/images/doug-yun.png\" alt=\"Doug Yun\"></p>\n\n<p>Doug has been training with us for the past month and this week we&#39;ve\nreleased him from his cage on the nearest client app. He&#39;s running wild!</p>\n\n<p>This rounds out our Boston team to 4! ZOMG!</p>\n\n<p>Follow him on the <a href=\"http://twitter.com/DougYun\">Twitters</a> and\n<a href=\"https://github.com/duggieawesome\">github</a></p>\n","summary":"DockYard welcomes Doug Yun","illustration":null,"illustration_alt":null,"tags":["announcement","office"],"shallow":false,"date":"2012-09-05T00:00:00Z"},{"id":"opinion/2012/08/30/lessons-learned-the-first-hire","title":"Lessons Learned: The First Hire","dockyarder":"brian-cardarella","body":"<p>In February we made our first full-time hire with Dan McClain. He came\non board at a time when our company was not very stable but we needed to\ngrow to accomodate the larger contracts we wanted. I want to discuss the\nrisks and benefits on making the first hire.</p>\n\n<h2>You will lose money</h2>\n\n<p>One of the first things you learn about making your first full-time hire\nbeyond the founders is that you will most likely lose money. Which is\nkind of backwards because the entire point of hiring is so more money\ncan be made. Brian Kaney at <a href=\"http://vermonster.com\">Vermonster</a> told me this after we had already\nhired Dan. I was accustomed to balancing 3 people&#39;s salaries and now a\n4th was in play and we didn&#39;t have any extra money coming in. So we the\npartners had to take less money. After Brian told me that Vermonster had\nsimilar growing pains it made me feel better. I&#39;ve since spoken with\nothers that have said the same. I suspect this is partly due to my\ninexperience as a first time business owner, if I ever start another\ncompany I can plan better for this. It is also due simply to the fact\nthat we didn&#39;t have any extra work coming in and were now dividing the\nmoney 4 ways instead of 3. The employees have to be paid, the partners\ndon&#39;t. I took on the brunt of the risk and actually just started paying\nmyself for the first time in 2012 at the start of August. It was totally\nworth it.</p>\n\n<h2>Be picky who you hire</h2>\n\n<p>I&#39;d like to say that Dan hired himself rather than we hired him. He was\nsomewhat new to the Boston Ruby community but was going out of his way\nto make himself known. He took the initiative to introduce himself to\nme and wanted to make contributions to the <a href=\"https://github.com/bostonrb/bostonrb\">BostonRB website</a>.\nHe developed a feature, made a pull request, and I gave him feedback.\nWhat impressed me was how quickly he adapted to the feedback I gave him.\nThis told me one thing: Dan was a very quick learner. Before DockYard\nwas even looking to hire Dan contacted me and expressed interest in\nbeing hired. When it came time for us to make a hire he was the first\nname that came to mind. I think the lesson to learn here is if you want\nto work somewhere, don&#39;t wait for them to hire for your talent. Contact\nthem, let them know you are interested even if they don&#39;t have anything\navailable. When the time comes they&#39;ll remember you.</p>\n\n<h2>Make full-time hires, don&#39;t contract to hire</h2>\n\n<p>We hired Dan on a contract-to-hire basis. The idea at the time was to\nhave Dan on a &quot;trial&quot; period, test him out, see how he fit. I didn&#39;t\nlike how this went and I don&#39;t think it was fair to Dan to hire this\nway. If you are hiring for a position, hire full-time. If things aren&#39;t\nworking out you are always within your rights to let the person go.\nWhenever you are hiring someone there is always the risk that it won&#39;t\nwork out.</p>\n\n<h2>Be mindful of taxes, benefits, salaries, etc...</h2>\n\n<p>Now that we had our first full-time on board we had to standardize\neverything. The best way to describe how I was handling all of this up\nuntil our first hire is &quot;half-assed&quot;. I was the only one living in\nMassachusetts where it was required to have health-care so I was using\nthe MA Health Connector (a terrible service), we were handling time-off\nas &quot;whenever you want&quot; which of course doesn&#39;t fly well as you scale,\nand taxes were a mystery to me. Let&#39;s break each one down to see what\nwe&#39;ve done:</p>\n\n<h3>Benefits</h3>\n\n<p>I went for the best health-care I could find for employees. When it\ncomes down to it we&#39;re only talking about the difference of a few hundred\ndollars each month. If we go under because of this cost then I deserve\nto lose my company. If one of my employees cannot see the doctor they\nneed to because of sub-standard health coverage I run the risk that they\nwill not be back to work as quickly as they would otherwise. This risk\ncosts far more than the extra $$$ for the better plans.</p>\n\n<p>DockYard is currently covering 3/4 of the healthcare and I hope to bring\nthat up to 100% in 2013.</p>\n\n<p>We&#39;re doing 3 weeks of paid vacation per year. Employees can take off\ntwo weeks at a time. I am also experimenting with how to handle\novertime. Because we&#39;re doing client work and sometimes deadlines have\nto be met I&#39;ve told everyone that there will be a day when they get\nLumberged. I&#39;m going to be the guy that will have to ask people to work\nover a weekend, I don&#39;t like it and I would be pissed if I was on the\nreceiving end of that. So, to compensate we&#39;ll offer an added vacation\nday in exchange for each weekend day. Of course employees can say &quot;no&quot;\nto working on the weekend. I understand that there are sometimes plans\nthat are made well in advance.</p>\n\n<h3>Payroll</h3>\n\n<p>This is something we have struggled with. Everyone has always been paid\nbut sometimes it has been a day late because of mistakes on my part.\nOriginally I was cutting checks to everyone and mailing them myself. I\nwould manually enter the data into QuickBooks for our accountant. This\nsucks. I eventually got it down to where it would only take me 5 minutes\nto do but for a while it was pretty disruptive. We eventually moved over\nDirect Deposit through QuickBooks. This was much better, and quicker. If\nyou are not doing Direct Deposit you should highly consider it.</p>\n\n<p>We&#39;ve recently moved from QuickBooks to Less Accounting and Sure\nPayroll. QuickBooks blows. We only used it because our accountant\nsuggested it. Here is some advice: don&#39;t let your accountant make\nsoftware decisions for you, especially if you are a software\nconsultancy. Our accountant is awesome, but QuickBooks is not. We lost\nan entire month of payroll, tax, and vendor payment data because a\nQuickBooks file corrupted. Never again.</p>\n\n<h3>Salaries, taxes</h3>\n\n<p>One <em>huge</em> mistake I made even before hiring Dan but continued into a\nmonth after he was hired was not withholding taxes from paychecks. We\nwere losing money after our first quarterly taxes were paid and I couldn&#39;t figure it out. In retrospect it is\npretty obvious what I should have been doing but keep in mind this was\nmy first company, I never had to deal with this before, and simply\nfucked up. Things turned around after I corrected this. I didn&#39;t ask for\nemployees to payback the money. I&#39;m not trying to push this idea that\nI&#39;m a &quot;good guy&quot; but this was my screw up and I took the hit.</p>\n\n<p>Also, pay people well. &quot;Industry average salary&quot; will earn you &quot;industry\naverage employees&quot;. If it is well known that you are paying high\nsalaries you will attract talented people. Talented people will more\nthan make up the difference.</p>\n\n<h2>Hiring ain&#39;t easy</h2>\n\n<p>I&#39;ve heard the term &quot;peak people&quot; thrown around a lot recently. It\nrefers to the huge talent shortage that the tech industry has. It&#39;s\ntrue, it exists. You know why? Because everybody wants to hire top\ntalent and nobody wants to train. I think it is pretty bullshit for\ncompanies to not train developers. Personally I would rather hire a\ndeveloper that requires training that is a quick learner than hire a\nmid-level dev that is set in his/her ways. We got lucky with Dan, he\nrequired very little ramping up. Mostly just a push here and a push\nthere. We&#39;ve recently hired Doug Yun as a trainee. I told Doug that we\nare experimenting with him, I want to establish a training program at\nDockYard. So there will be ups and downs to it as we establish a\nplaybook. I realize we run the risk of devs training up, then bouncing\nout. There are ways to address this. We can offer employment term\nbenefits. If you are at DockYard for a year your salary will increase by\nX% every year. Let them know what the path for advancement is. We need\nto get better at this and it is something I want to focus on over the next\nfew months. I would love to hear feedback and how others are\napproaching this.</p>\n\n<h2>It pushes you to make things happen</h2>\n\n<p>The best benefit of hiring is that it personally motivates me to grow\nthe company. When it was just the co-founders we always had the fallback \nthat a payroll period could be skipped. As I mentioned earlier that is\nnot a choice when you have employees. Money must come in, people must\nget paid. Personally I have found this to be a good motivator for\ngrowing DockYard.</p>\n\n<h2>Share your experiences!</h2>\n\n<p>If you agree/disagree with anything I said, have a different\nperspective, or any general advice I&#39;d love to hear it.</p>\n","summary":"What to expect when you start hiring","illustration":null,"illustration_alt":null,"tags":["opinion","business"],"shallow":false,"date":"2012-08-30T00:00:00Z"},{"id":"ruby/2012/06/26/rails-4-sneak-peek-async-actionmailer","title":"Rails 4.0 Sneak Peek: Asynchronous ActionMailer","dockyarder":"brian-cardarella","body":"<p>My previous <a href=\"http://reefpoints.dockyard.com/ruby/2012/06/25/rails-4-sneak-peek-queueing.html\">deep dive into the Rails 4.0 Queueing system</a>\n was motivated by a patch to Rails I was working on while at <a href=\"http:/railscamps.org\">RailsCamp New England</a> this past weekend. I&#39;m happy to say that <a href=\"https://github.com/rails/rails/pull/6839\">Rails 4.0 now has an optional asynchronous ActionMailer</a>.</p>\n\n<p>The API for pushing your emails to the background is very simple. If you\nwant to make this change application wide simply set it in your\n<code>application.rb</code> (or in any of the environment files)</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>config.action_mailer.async = <span class=\"predefined-constant\">true</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Or if you want to only make specific mailers asynchrounous</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">class</span> <span class=\"class\">WelcomeMailer</span> &lt; <span class=\"constant\">ActionMailer</span>::<span class=\"constant\">Base</span>\n  <span class=\"predefined-constant\">self</span>.async = <span class=\"predefined-constant\">true</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>That&#39;s it! Any messages that are being delivered will be sent as a\nbackground job. In fact, the rendering is happening on the background as\nwell.</p>\n\n<p>You will need to take care that the arguments you are passing your\nmailers can be properly marshalled. Instead of:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre><span class=\"constant\">WelcomeMailer</span>.welcome(<span class=\"instance-variable\">@user</span>).deliver\n</pre></td>\n</tr></table>\n</div></div>\n<p>You should do:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre><span class=\"constant\">WelcomeMailer</span>.welcome(<span class=\"instance-variable\">@user</span>.id).deliver\n</pre></td>\n</tr></table>\n</div></div>\n<p>Then in your mailer:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">class</span> <span class=\"class\">WelcomeMailer</span> &lt; <span class=\"constant\">ActionMailer</span>::<span class=\"constant\">Base</span>\n  <span class=\"keyword\">def</span> <span class=\"function\">welcome</span>(id)\n    <span class=\"instance-variable\">@user</span> = <span class=\"constant\">User</span>.find(id)\n    ...\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<h2>Switching it up</h2>\n\n<p>The default queueing system is <code>Rails.queue</code>, but you can override this to use any queueing system you\nwant by overriding <code>ActionMailer::Base#queue</code>.</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">class</span> <span class=\"class\">WelcomeMailer</span> &lt; <span class=\"constant\">ActionMailer</span>::<span class=\"constant\">Base</span>\n  <span class=\"keyword\">def</span> <span class=\"function\">queue</span>\n    <span class=\"constant\">MyQueue</span>.new\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Your custom queue should expect the jobs to respond to <code>#run</code>, same as\n<code>Rails.queue</code>.</p>\n\n<h2>Credit</h2>\n\n<p>Much of the original code was cribbed (with permission) from <a href=\"http://blog.zerosum.org\">Nick\nPlante</a>&#39;s\n<a href=\"https://github.com/zapnap/resque_mailer\">resque_mailer</a> gem.</p>\n","summary":"How to send your emails using the new Rails 4.0 Queue","illustration":null,"illustration_alt":null,"tags":["ruby","ruby-on-rails"],"shallow":false,"date":"2012-06-26T00:00:00Z"},{"id":"ruby/2012/06/25/rails-4-sneak-peek-queueing","title":"Rails 4.0 Sneak Peek: Queueing","dockyarder":"brian-cardarella","body":"<p>Recently a <a href=\"https://github.com/rails/rails/commit/adff4a706a5d7ad18ef05303461e1a0d848bd662\">queueing system was added to Rails</a>.\nLet&#39;s dive in and see how to use it.</p>\n\n<h2>Run, baby, run!</h2>\n\n<p>The queueing API is very simple. You push an object on to the queue and\nthat object is expected to respond to a <code>run</code> method. Let&#39;s take a look:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">class</span> <span class=\"class\">TestJob</span>\n  <span class=\"keyword\">def</span> <span class=\"function\">run</span>\n    puts <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">I am running!</span><span class=\"delimiter\">&quot;</span></span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n\n<span class=\"constant\">Rails</span>.queue.push(<span class=\"constant\">TestJob</span>.new)\n=&gt; <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">I am running!</span><span class=\"delimiter\">&quot;</span></span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>For most people, that is pretty much it. The queue is running in a\nseparate thread from the app thread, so your app shouldn&#39;t notice any\nresponse impact from an expensive job.</p>\n\n<p>The basic queue that comes with Rails is not a long-term solution. The\ngoal here is to establish a common API that more robust queueing systems\ncan plug themselves into. In most cases you shouldn&#39;t need to change any\nof your app code if you want to switch from\n<a href=\"https://github.com/defunkt/resque\">Resque</a> to\n<a href=\"https://github.com/mperham/sidekiq\">Sidekiq</a>. You should take care that\nthe objects you are enqueing can be properly marshalled.</p>\n\n<p>You can even write your own queue, let&#39;s take a look at the API of a\ncustom queue</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">class</span> <span class=\"class\">MyQueue</span>\n  <span class=\"keyword\">def</span> <span class=\"function\">push</span>(job)\n    job.run\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Then in your <code>application.rb</code></p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>config.queue = <span class=\"constant\">MyQueue</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>This example is straight from the Rails test suite. This will define a\nqueue that does not run jobs asynchronously. As soon as the job is\npushed onto the queue it is run. Let&#39;s make an actual queue (without relying on\nthe Queue class)</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">class</span> <span class=\"class\">MyQueue</span>\n  <span class=\"keyword\">def</span> <span class=\"function\">initialize</span>\n    <span class=\"instance-variable\">@queue</span> = []\n  <span class=\"keyword\">end</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">push</span>(job)\n    <span class=\"instance-variable\">@queue</span>.push(job)\n  <span class=\"keyword\">end</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">pop</span>\n    <span class=\"instance-variable\">@queue</span>.pop\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>In this example we have implemented a simple queue. You will next need\nto tell Rails&#39;s QueueConsumer to use this queue. You can do this in\n<code>application.rb</code> with an initializer block:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n  <td class=\"code\"><pre>intializer <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">start queue consumer</span><span class=\"delimiter\">'</span></span> <span class=\"keyword\">do</span> |app|\n  app.queue_consumer = config.queue_consumer.start(app.queue)\n  at_exit { app.queue.consumer.shutdown }\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>and if we now push to our new queue:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre><span class=\"constant\">Rails</span>.queue.push(<span class=\"constant\">TestJob</span>.new)\n</pre></td>\n</tr></table>\n</div></div>\n<p>...we get nothing. Why? Inspect the QueueConsumer:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n  <td class=\"code\"><pre><span class=\"constant\">Rails</span>.application.queue_consumer\n=&gt; <span class=\"comment\">#&lt;Rails::Queueing::ThreadedConsumer @queue=#&lt;MyQueue @queue=[]&gt;, @thread=#&lt;Thread dead&gt;&gt;</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>So you&#39;ll notice that the thread is <code>dead</code>. We can force the queue to\nprocess by doing:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n  <td class=\"code\"><pre><span class=\"constant\">Rails</span>.application.queue_consumer.start\n=&gt; <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">I am running!</span><span class=\"delimiter\">&quot;</span></span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Let&#39;s back up to understand what is going on here. First we&#39;ll start by looking at <code>ThreadedConsumer#start</code></p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">def</span> <span class=\"function\">start</span>\n  <span class=\"instance-variable\">@thread</span> = <span class=\"constant\">Thread</span>.new <span class=\"keyword\">do</span>\n    <span class=\"keyword\">while</span> job = <span class=\"instance-variable\">@queue</span>.pop\n      <span class=\"keyword\">begin</span>\n        job.run\n      <span class=\"keyword\">rescue</span> <span class=\"constant\">Exception</span> =&gt; e\n        handle_exception e\n      <span class=\"keyword\">end</span>\n    <span class=\"keyword\">end</span>\n  <span class=\"keyword\">end</span>\n  <span class=\"predefined-constant\">self</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>So this thread is only staying alive as long as the <code>@queue.pop</code> returns a truthy value.\nIt&#39;s not reasonable or us to keep shoving something into the queue, so let&#39;s see what is happening \nin <code>Queue#pop</code>. For this we&#39;ll look at Rubinius&#39; implementation</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\"># Retrieves data from the queue.  If the queue is empty, the calling thread is</span>\n<span class=\"comment\"># suspended until data is pushed onto the queue.  If +non_block+ is true, the</span>\n<span class=\"comment\"># thread isn't suspended, and an exception is raised.</span>\n<span class=\"comment\">#</span>\n<span class=\"keyword\">def</span> <span class=\"function\">pop</span>(non_block=<span class=\"predefined-constant\">false</span>)\n  <span class=\"keyword\">while</span> <span class=\"predefined-constant\">true</span>\n    <span class=\"instance-variable\">@mutex</span>.synchronize <span class=\"keyword\">do</span>\n      <span class=\"instance-variable\">@waiting</span>.delete(<span class=\"constant\">Thread</span>.current)\n      <span class=\"keyword\">if</span> <span class=\"instance-variable\">@que</span>.empty?\n        raise <span class=\"constant\">ThreadError</span>, <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">queue empty</span><span class=\"delimiter\">&quot;</span></span> <span class=\"keyword\">if</span> non_block\n        <span class=\"instance-variable\">@waiting</span>.push <span class=\"constant\">Thread</span>.current\n        <span class=\"instance-variable\">@resource</span>.wait(<span class=\"instance-variable\">@mutex</span>)\n      <span class=\"keyword\">else</span>\n        retval = <span class=\"instance-variable\">@que</span>.shift\n        <span class=\"instance-variable\">@resource</span>.signal\n        <span class=\"keyword\">return</span> retval\n      <span class=\"keyword\">end</span>\n    <span class=\"keyword\">end</span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>This now starts to make sense. <code>Queue#pop</code> is an infinite loop that will wait until it has\ncontent before each iteration. Our simple <code>MyQueue</code> class would return <code>nil</code> when <code>ThreadConsumer#start</code>\nis called because there is nothing in the queue and the thread would die. Even if we put something in\nqueue it would pop once, run the job, try to pop againg, then die.</p>\n\n<p>For the sake of simplicity let&#39;s just have <code>MyQueue</code> inherit from\n<code>Queue</code></p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">class</span> <span class=\"class\">MyQueue</span> &lt; <span class=\"constant\">Queue</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Now we can run</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n  <td class=\"code\"><pre><span class=\"constant\">Rails</span>.queue.push(<span class=\"constant\">TestJob</span>.new)\n=&gt; <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">I am running!</span><span class=\"delimiter\">&quot;</span></span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>The queue system in Rails 4.0 is a very simple solution, I&#39;m looking\nforward to the release and the support for it to be added to many of the\nleading background job processing libraries.</p>\n\n<p>Keep in mind that as of this writing the master branch is still\nversioned as &#39;beta&#39;. This API could change.</p>\n","summary":"A look at the new Queueing API","illustration":null,"illustration_alt":null,"tags":["ruby","ruby-on-rails"],"shallow":false,"date":"2012-06-25T00:00:00Z"},{"id":"training/2012/06/21/models-views-and-controllers-oh-my","title":"Models, Views, and Controllers, Oh My!","dockyarder":"amanda-cheung","body":"<p>Eight days ago, I hardly had an idea of what &quot;object-oriented&quot; meant. The MVC framework was beyond me, and the thought of having to go in to the Command Line? Yikes. Since joining DockYard, I have been reading &quot;Agile Web Development with Rails&quot; to get a grasp on both Ruby and Rails. Having only coded in HTML, CSS and a bit of JavaScript prior to starting, my bearings were a bit shaken. But since stressing out is not for me, I said to myself, &quot;Everyone was a beginner at one point,&quot; and chugged along. Even though I didn&#39;t fully understand the lines of code as I followed along with the book, I made sure I typed out the edits so I could at least get used to the syntax. With the help of my fellow DockYarders, it is all starting to come together. Needless to say, there were several hiccups. To name a couple, install and setting up my machine wasn&#39;t a breeze. There was also an update to Rails that wasn&#39;t included in the book (the mass-assignment feature) where an extra line of code was needed to make the app work.</p>\n\n<p>For those Ruby-beginners like me, don&#39;t get discouraged! Getting stuck? A great place to come for help is at <a href=\"http://bostonrb.org/\">Boston Ruby Group&#39;s Project Nights</a> if you are in the Boston area.</p>\n","summary":"Getting started in Ruby on Rails","illustration":null,"illustration_alt":null,"tags":["training","ruby-on-rails","ruby"],"shallow":false,"date":"2012-06-21T00:00:00Z"},{"id":"opinion/2012/06/21/lessons-learned-six-month-of-running-dockyard","title":"Lessons Learned: The First Six Months of Running a Software Consultancy","dockyarder":"brian-cardarella","body":"<p>Before I get into it, I&#39;m writing this because when I was first setting\nout with DockYard there was little to no guidance. It seems that most\nagencies are hush-hush on how they work internally. Or I just suck at\nthe Googles. In any event, I wanted to share our experience in the hope\nthat others can learn and give feedback.</p>\n\n<h2>Clients</h2>\n\n<p>Be selective! If your gut tells you something is wrong listen to it. I\nmade a huge mistake with taking our very first client and an even bigger\nmistake about re-signing with said client. It ended ugly, I always felt\nit might. The client was bad (no I won&#39;t say who it was) and it really\nput us in a very difficult position when we were getting started. I went\nback to re-sign because the first contract ended in December. It turns\nout December is a <em>terrible</em> month for finding new work. I panicked,\nrookie move. Thankfully we have had great clients since. That&#39;s not to\nsay we haven&#39;t had to dodge potentially bad clients from time to time.</p>\n\n<p>Some clients are just bad, but many are just &quot;bad for us&quot;. Those two\nstatements are very different and recognizing the difference is\nimportant. &quot;Bad for us&quot; clients might be fantasic people but the\nprojects aren&#39;t in our wheel house, in those cases I try my best to help\nthose people find other consultancies/freelancers.</p>\n\n<h2>Employees</h2>\n\n<h3>Salary</h3>\n\n<p>DockYard started as bringing together three freelance developers. The\nfirst mistake I made was not insisting that everyone start on fulltime\nsalary. We were still paying out the full hourly rates then paying taxes\non top of that. Needless to say, accounting is not my strong point. It\ntook 2 months before I figured out why we weren&#39;t making any money.\nWhoops.</p>\n\n<h3>Process</h3>\n\n<p>I&#39;ve changed from the &quot;anything goes&quot; type boss to the &quot;I&#39;m going to be\nthe hard-ass&quot; over the past six months. Here is why: we want to balance\nmultiple projects. Finding a client that has enough of a budget for a 6\nperson team is great but not very likely if we stick with startups. So\nour team sizes are small, but we need to be redundant. I tell everyone\non my team that they &quot;need to be replacable&quot;. Don&#39;t take this statement\nthe wrong way, I&#39;m clear that this doesn&#39;t mean they&#39;re getting canned\nat the drop of a hat. It means that I don&#39;t want to be in a position\nwhere someone gets sick, goes on vacation, or leaves for another\nopportunity and we plug someone else into that project and it takes that\nperson a week to ramp up because we need to figure out what the last\nperson was doing. <em>Process is very important</em>, I would rather have good\ndevelopers that buy into our process than have awesome developers that\ndon&#39;t. We function best as a team. So when someone isn&#39;t buying into the\nprocess we&#39;ve been outlining I need to be the guy that says &quot;no&quot;. A few times this\nhas turned into debates, sometimes into arguments. I&#39;m willing to modify\nour process if something better is proposed but I&#39;m not willing to\nswitch into the &quot;just get it done&quot;. At the start I avoided uncomfortable conversations, \nif something was happening that I didn&#39;t think was right for DockYard I would wait it out.\nThis was a bad idea, the best time to correct something is now. Today I \nam jumping on these things immediately. I would rather have an airing of grievances \nwhen the issue is small rather than let it blow up.</p>\n\n<p>Here are some things that, arguably, are\n<a href=\"http://en.wikipedia.org/wiki/Parkinson&#x27;s_Law_of_Triviality\">bikeshedding</a>\nbut I have been insisting on:</p>\n\n<h3>The trivial</h3>\n\n<ul>\n<li>Whitespace</li>\n<li>Single quotes instead of double quotes</li>\n<li>Verbose variable names</li>\n<li>Consistency between backend model names and HTML markup class names</li>\n</ul>\n\n<h3>The important</h3>\n\n<ul>\n<li>Testing</li>\n<li>Code quality</li>\n<li>CoffeeScript</li>\n<li>File/class naming conventions and organization</li>\n</ul>\n\n<h3>Remotes</h3>\n\n<p>We started as entirely remote team. Angelo in Rhode Island, Russ in\nMaine, and myself in Boston. This is OK but I must admit I&#39;m not a big\nfan of this. We have been hiring in Boston and will continue to grow a\nteam here.</p>\n\n<h2>Rates</h2>\n\n<p>We originally started at $120/hour. We have since moved to a flat\n$4,000/week per developer. This buys the client about 32 hours of our\ntime.\nThis has been the single best change we&#39;ve made. Keeping track of every\nhours sucks, and I had to be on everyone&#39;s ass making sure they got\ntheir hours in. Now it is pretty simple. The clients also prefer this\nsystem of invoicing, especially many of the large enterprise type\nclients we are looking to go after.</p>\n\n<p>That being said, I think our rate is below our market value. I&#39;ve spoken\nwith many other consultancies and the average seems to be $6k - 7k per\nweek for full stack (which we are). We are planning on raising our rates\nto $5k in September then hopefully up to $6k by next year. It&#39;s not that\nI don&#39;t think we are technically qualified to justify those rates yet,\nits that I want to build out our portfolio first.</p>\n\n<p>I&#39;ve noticed that many people don&#39;t want to talk about money. I actually\ndon&#39;t mind it, to the point that some people might find it annoying. In\norder for the market to adjust properly I think an open discussion on\nrates is necessary.</p>\n\n<p>I have also started telling potential clients our minimum project budget\n($30k) before we get into any details of the engagement. Some might find\nthis off-putting. Here is my perspective: the client&#39;s time is valuable\nand I don&#39;t want to waste their time. In most cases budget is a deciding\nfactor, let&#39;s get that out into the open immediately rather than dealing\nwith surprises a month from now.</p>\n\n<p>We have reduced our rates to work on interesting projects. We&#39;re nearly\ndone with a real-time chat app using an EventMachine backend with a\nwebsocket front end. That was a fun one to build, we reduced our rate by\n17% because of the client&#39;s limited budget.</p>\n\n<h2>Business Development</h2>\n\n<p>This is something I have learned as I go. Not to toot my own horn but I\nbelieve one of my strengths is selling DockYard as a business to\npotential clients. Finding new clients has not been easy. Here are some\nthings that led directly to client contact (sorted by most effective):</p>\n\n<ul>\n<li>Writing blog posts</li>\n<li>Giving presentations to general tech audiences (more beginners than\nexperts)</li>\n<li>LinkedIn</li>\n<li>Referrals</li>\n<li>Being found on Google</li>\n</ul>\n\n<p>LinkedIn?? Yeah, it actually worked. But I did something incredibly\ndouchey. I modified my LinkedIn profile to basically be an ad for\nDockYard then I went to LinkedIn&#39;s &quot;People you may know&quot; page and\nclicked on over a thousand people. I got flagged for spamming but it\nworked. Yes, I know it was a huge douchebag move. However, I suspected\nthat people would look at my profile to see if they knew me, or wanted\nto be connected. If they happened to have a development need they would\ncontact me, if they didn&#39;t they wouldn&#39;t. At the very least I was\nexposing DockYard to many people. I went from less than 100 LinkedIn\nconnections to close to 1000 in a week. We got two contracts from doing\nthis, it was worth it.</p>\n\n<p>Here are things that have not worked for us (yet)</p>\n\n<ul>\n<li>Running Community Events</li>\n<li>Sponsoring</li>\n<li>Open Source Development (see the comments for some interesting debate on this topic)</li>\n</ul>\n\n<p>I organize <a href=\"http://bostonrb.org\">BostonRB</a>, it is one of the largest\nRuby user groups in the world. We have awesome speakers every month.\nEvery now and then when I talk shop with someone about work I get the\n&quot;I&#39;m sure running BostonRB doesn&#39;t hurt&quot; with a wink. I find this\nannoying. I&#39;ve gone out of my way to make sure BostonRB doesn&#39;t get\nco-opted by any one company for promotional purposes. There is another\n&quot;Boston Rails Meetup&quot; in Newton, MA that is essentially used to boost\nSEO for another consultancy. I think this is bullshit. I&#39;ll say it right\nnow: We have never been contacted by a client because of running\nBostonRB. I&#39;m not saying I would turn any down, but in my experience\nrunning a user group is not driving clients to us.</p>\n\n<p>Now that I&#39;m getting off my soapbox in the upcoming months DockYard will\nbe listed as a Sponsor for BostonRB, along with every other company that\nis donating time, pizza, meeting space, etc...</p>\n\n<p>I&#39;m a huge advocate for Open Source Development, but it also has very\npoor ROI if your goal is to get clients. I believe there is a threshold\nfor this, if you&#39;re on a certain tier (i.e. core committer to a popular\nframework) it might be different.</p>\n\n<h2>Targeting Startups</h2>\n\n<p>On any given day people will hear me complain about startups. By their\nvery definition startups don&#39;t have money. As a consultancy we are\nlooking to make money by engaging clients. If anybody tells you they&#39;re\nconsulting because it is their passion or work with startups, they are\nfull of shit. This is a cash game. Demand is at an all time high, there\nis a lot of opportunity to do well and work for yourself. While some of\nthe technology challenges startups present are very interesting I am\nalso running a business. This is why we have begun to favor enterprise.\nWe can get longer term contracts and these companies pay on time. The\ndownside is the technology is not terribly interesting.</p>\n\n<p>We are striving to find a balance here. I would be interested in hearing\nothers experience.</p>\n\n<h2>Doing Too Much</h2>\n\n<p>Right now I&#39;m the guy wearing all of the hats. On any given day I&#39;m\ndoign the following:</p>\n\n<ul>\n<li>Biz development</li>\n<li>Marketing</li>\n<li>Lead Development</li>\n<li>Project Management</li>\n<li>Paying bills</li>\n</ul>\n\n<p>Thankfully I haven&#39;t burnt out yet but this cannot continue much longer.\nThe biggest mistake I have made over the first six months was not making\nan early hire to take some of this load off. I must admit, this one\nstumps me. I know how to hire a good developer, I know how to hire a\ngood designer. I have no idea how to hire for non-tech positions. We\nhave already hired a accountant to handle some of the larger items but\nI&#39;m still responsible for every day invoicing and book keeping. In my\nmind, here are the priority hires:</p>\n\n<ol>\n<li><p>Business developer. I have had light feelers out for this position\nover the past few months. We really need someone focused on this\nfulltime. Ideally someone that wants to hook into the startup community\nin Boston or has existing sales relationships in the enterprise world.\nOr if you happen to be in DC and have existing connection in the\npolitical world we&#39;d love to talk. <a href=\"mailto:contact@dockyard.com\">Contact\nus</a>.</p></li>\n<li><p>Office manager. We will be moving into our own space in the Fall. At\nthat time we will be looking to fill this position.</p></li>\n<li><p>More developers and designers.</p></li>\n</ol>\n\n<h2>Our Process</h2>\n\n<p>We have modified how to engage clients. This is what we are currently\ndoing</p>\n\n<h3>Initial Engagement</h3>\n\n<p>Phone call, get to know the client. Determine if we are a good fit. If\nso and the client is happy with references, rate, etc... we move\nforward.</p>\n\n<h3>Kick off</h3>\n\n<p>We charge for this. Currently it is $1000. We will sit down the client and\nwill run through what they want soup to nuts. We&#39;ll have development and\ndesign on hand for this meeting.</p>\n\n<h3>Design Phase</h3>\n\n<p>We originally combined development and design after the kickoff. This\nwas a mistake. There is a lot to be learned by doing an upfront design\nphase. It helps us make informed estimations. The clients are happier\nwhen we can deliver what we estimate. This phase we generally go for\nwireframes and workflow. Nothing polished. We like to wireframe in\nHTML/CSS.</p>\n\n<h3>Development Phase</h3>\n\n<p>Now that we have the general design worked out we begin development.\nThere will also be design done during this phase as well.</p>\n\n<p>I would love to hear about other processes. What works, what doesn&#39;t\nwork.</p>\n\n<h2>Conclusion</h2>\n\n<p>I hope some peope find this information useful. Please feel free to ask\nany questions or if you need me to elaborate on anything. If you feel\nI&#39;m off the mark or have suggestions feel free to comment as well. We&#39;re\nalways looking to improve.</p>\n","summary":"Brian talks about what has worked, what has not worked, and the changes that have been made at DockYard during its first six month","illustration":null,"illustration_alt":null,"tags":["opinion","business","consulting"],"shallow":false,"date":"2012-06-21T00:00:00Z"},{"id":"ruby/2012/06/18/postgres_ext-adding-postgres-data-types-to-active-record","title":"postgres_ext: Adding Postgres data types to Rails","dockyarder":"dan-mcclain","body":"<p>Over the past few weeks, I have been working on a new gem which adds\nsupport to Rail&#39;s ActiveRecord for PostgreSQL&#39;s native data types. I am\nhappy to announce that I have released the\n<a href=\"https://github.com/dockyard/postgres_ext\">postgres_ext</a> gem.</p>\n\n<p>postgres_ext supports for ActiveRecord version 3.2 and above (at this\ntime). Parallel to my development, I plan to submit pull request to\nRails master, so that postgres_ext will not be needed in Rails 4.0.</p>\n\n<h2>Features</h2>\n\n<h3>Migration/Schema support</h3>\n\n<p>postgres_ext adds migration and <code>schema.rb</code> support for the following\nPostgresSQL type:</p>\n\n<ul>\n<li>INET</li>\n<li>CIDR</li>\n<li>MACADDR</li>\n<li>UUID</li>\n<li>Arrays</li>\n</ul>\n\n<p>You can create columns with the following migration methods:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n</pre></td>\n  <td class=\"code\"><pre>create_table <span class=\"symbol\">:examples</span> <span class=\"keyword\">do</span> |t|\n  t.inet <span class=\"symbol\">:ip_address</span>\n  <span class=\"comment\"># INET Column</span>\n\n  t.cidr <span class=\"symbol\">:subnet</span>\n  <span class=\"comment\"># CIDR Column</span>\n\n  t.macaddr <span class=\"symbol\">:mac_address</span>\n  <span class=\"comment\"># MACADDR Column</span>\n\n  t.uuid <span class=\"symbol\">:unique_id</span>\n  <span class=\"comment\"># UUID Column</span>\n\n  t.integer <span class=\"symbol\">:int_array</span>, <span class=\"symbol\">:array</span> =&gt; <span class=\"predefined-constant\">true</span>\n  <span class=\"comment\"># Integer[] Column</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>These migrations will be captured in your <code>schema.rb</code> file, so you don&#39;t\nhave to use the <code>structure.sql</code> file if these types are your only reason. In\nfact, if you are using these only supported types with <code>structure.sql</code>,\nincluding the postgres_ext gem should allow you to correctly <code>rake\ndb:schema:dump</code> your database.</p>\n\n<p><a href=\"https://github.com/dockyard/postgres_ext#migrationschemarb-support\">Migration/Schema.rb support documentation</a></p>\n\n<h3>Type Casting</h3>\n\n<p>postgres_ext converts INET and CIDR values to\n<a href=\"http://www.ruby-doc.org/stdlib-1.9.3/libdoc/ipaddr/rdoc/IPAddr.html\">IPAddr</a> instances,\n and coverts arrays to array objects of the column type (integer arrays\nare cast as an array of integers, INET arrays to are cast to an array of\nIPAddrs).</p>\n\n<h3>INET Type Casting example</h3>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n</pre></td>\n  <td class=\"code\"><pre>create_table <span class=\"symbol\">:inet_examples</span> <span class=\"keyword\">do</span> |t|\n  t.inet <span class=\"symbol\">:ip_address</span>\n<span class=\"keyword\">end</span>\n\n<span class=\"keyword\">class</span> <span class=\"class\">InetExample</span> &lt; <span class=\"constant\">ActiveRecord</span>::<span class=\"constant\">Base</span>\n<span class=\"keyword\">end</span>\n\ninetExample = <span class=\"constant\">InetExample</span>.new\ninetExample.ip_address = <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">127.0.0.0/24</span><span class=\"delimiter\">'</span></span>\ninetExample.ip_address\n<span class=\"comment\"># =&gt; #&lt;IPAddr: IPv4:127.0.0.0/255.255.255.0&gt;</span>\ninetExample.save\n\ninet_2 = <span class=\"constant\">InetExample</span>.first\ninet_2.ip_address\n<span class=\"comment\"># =&gt; #&lt;IPAddr: IPv4:127.0.0.0/255.255.255.0&gt;</span>\n</pre></td>\n</tr></table>\n</div></div>\n<h3>Array Type Casting example</h3>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n</pre></td>\n  <td class=\"code\"><pre>create_table <span class=\"symbol\">:people</span> <span class=\"keyword\">do</span> |t|\n  t.integer <span class=\"symbol\">:favorite_numbers</span>, <span class=\"symbol\">:array</span> =&gt; <span class=\"predefined-constant\">true</span>\n<span class=\"keyword\">end</span>\n\n<span class=\"keyword\">class</span> <span class=\"class\">Person</span> &lt; <span class=\"constant\">ActiveRecord</span>::<span class=\"constant\">Base</span>\n<span class=\"keyword\">end</span>\n\nperson = <span class=\"constant\">Person</span>.new\nperson.favorite_numbers = [<span class=\"integer\">1</span>,<span class=\"integer\">2</span>,<span class=\"integer\">3</span>]\nperson.favorite_numbers\n<span class=\"comment\"># =&gt; [1,2,3]</span>\nperson.save\n\nperson_2 = <span class=\"constant\">Person</span>.first\nperson_2.favoite_numbers\n<span class=\"comment\"># =&gt; [1,2,3]</span>\nperson_2.favoite_numbers.first.class\n<span class=\"comment\"># =&gt; Fixnum</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p><a href=\"https://github.com/dockyard/postgres_ext#type-casting-support\">Type casting documentation</a></p>\n\n<h2>Another gem born out of necessity</h2>\n\n<p>I have also released\n<a href=\"https://github.com/dockyard/pg_array_parser\">pg_array_parser</a>, a C\nextension which parses PostgreSQL array values and returns an array of\nstrings.  This gem is used by postgres_ext to retrieve the array values\nbefore casting them to the required type.</p>\n\n<h2>Plans for postgres_ext</h2>\n\n<p><a href=\"http://reefpoints.dockyard.com/ruby/2012/05/18/rails-4-sneak-peek-expanded-activerecord-support-for-postgresql-datatype.html\">INET, CIDR and MACADDR support has already been added to Rails 4.</a>\nMy next step is to submit a pull request to add UUID migration support\nand Array support to Rails master.  Then I plan to backport Rails 4&#39;s\nhstore support back to postgres_ext. After adding support for the other\nPostgreSQL types, I plan to add support to arel for PostgreSQL type\nspecific where clauses (ie ANY for array comparison, <code>&lt;&lt;</code> and <code>&gt;&gt;</code> for\nINET and CIDR comparisons.</p>\n","summary":"Announcing postgres_ext, a gem that adds support for PostgreSQL data types to ActiveRecord","illustration":null,"illustration_alt":null,"tags":["ruby","postgresql","ruby-on-rails","gems"],"shallow":false,"date":"2012-06-18T00:00:00Z"},{"id":"announcement/2012/06/14/amanda-cheung-is-a-dockyarder","title":"Amanda Cheung is a DockYarder!","dockyarder":"brian-cardarella","body":"<p><img src=\"/images/amanda-cheung.jpg\" alt=\"Amanda Cheung\"></p>\n\n<p>Yesterday was Amanda&#39;s first day with DockYard, she joins our growing\nteam as a designer with a desire to develop. She brings excellent design\nskills and much needed illustration skills.</p>\n\n<p><a href=\"http://acacheung.com\">Please take a moment to check out her portfolio</a></p>\n","summary":"DockYard welcomes Amanda Cheung","illustration":null,"illustration_alt":null,"tags":["announcement","office"],"shallow":false,"date":"2012-06-14T00:00:00Z"},{"id":"ruby/2012/06/11/bostonrb-goes-live","title":"BostonRB Goes Live","dockyarder":"brian-cardarella","body":"<p><img src=\"/images/bostonrb.png\" alt=\"BostonRB\"></p>\n\n<p>Starting tomorrow night (June 12th, 2012) <a href=\"http://bostonrb.org\">The Boston Ruby Group</a>\nwill be streaming its monthly meeting live via <a href=\"http://googleblog.blogspot.com/2012/05/google-hangouts-on-air-broadcast-your.html\">Google Hangouts on Air</a>\nThe streaming will start at 6:45 PM US Eastern Time and the meeting itself will start at 7pm or a few minutes after. The meeting should run until 9pm.</p>\n\n<p>This will allow those that cannot attend the meeting to watch the raw\nstream live from anywhere in the world on <a href=\"http://youtube.com\">YouTube</a>.\nWe will also reserve a few seats in the Google Hangout itself for other\nuser groups in the New England area to join. Questions will be allowed from\nthese user groups after each presentation just as any\naudience member will be able to.</p>\n\n<p>We&#39;re very excited about using this technology to expand\n<a href=\"http://bostonrb.org\">BostonRB</a>. If things go well we will want to\ninvite more user groups to virtually attend our meetings in the future.\nIf you are an organizer of a small local group and have difficulty\npulling in some of the larger names in the Ruby community for\npresentations we want you to leverage BostonRB.</p>\n\n<p>In addition, even though Boston is a great tech-hub we still are far\nenough away where it is difficult for some presenters to travel. We\nwould like to invite presenters to BostonRB to present their material\nvia Google Hangouts.</p>\n\n<p>In the coming months we plan on using the Google Hangouts technology in\nnew ways to reach out to our community. Imagine having live office hours\nwhere local expert Ruby devs can answer questions. Or online classes\nwhere students can follow along. We understand that getting to some of our\nevents can be difficult or even intimidating. Now we can eliminate that\nbarrier.</p>\n\n<p>So please follow the <a href=\"http://twitter.com/BostonRB\">BostonRB Twitter Account</a>. Tomorrow night\nwe&#39;ll tweet the link to the live stream. We&#39;ll also embed the YouTube player\nonto the BostonRB homepage. In the future we&#39;ll be making other very\ncool announcements as well.</p>\n\n<p>As always, if you are in Boston we <a href=\"http://guestlistapp.com/events/107814\">invite you come to the meeting</a>\nand if you are not in Boston or cannot make it you now have a new\noption.</p>\n","summary":"Live streaming and expansion comes to BostonRB","illustration":null,"illustration_alt":null,"tags":["ruby","community"],"shallow":false,"date":"2012-06-11T00:00:00Z"},{"id":"announcement/2012/06/01/chris-gill-is-a-dockyarder","title":"Chris Gill is a DockYarder","dockyarder":"brian-cardarella","body":"<p><img src=\"/images/chris-gill.png\" alt=\"Chris Gill\"></p>\n\n<p>Today I&#39;m happy to announce that Chris Gill is joining our team!\nChris and I worked together at the <a href=\"http://dnc.org\">DNC</a> and I credit\nhim with sparking my interest in <a href=\"http://www.postgresql.org\">PostgreSQL</a></p>\n\n<p>Chris&#39; pragmatic approach to software development and his years of\nexperience in politics is a huge addition to our growing team. He is\nlocated in DC and we hope to soon build out a team in that area.</p>\n\n<p>Welcome aboard Chris!</p>\n\n<p><a href=\"http://twitter.com/gilltots\">Follow Chris on Twitter</a></p>\n","summary":"DockYard welcomes Chris Gill","illustration":null,"illustration_alt":null,"tags":["announcement","office"],"shallow":false,"date":"2012-06-01T00:00:00Z"},{"id":"ruby/2012/05/18/rails-4-sneak-peek-expanded-activerecord-support-for-postgresql-datatype","title":"Rails 4.0 Sneak Peek: Expanded ActiveRecord Support for PostgreSQL Datatypes","dockyarder":"dan-mcclain","body":"<p>This week, I had a <a href=\"https://github.com/rails/rails/commit/835df6f3ed9b1575fd6a1fb62516d8ebeffbf114#diff-0\">pull request accepted</a>\ninto Rails which adds support for\n<a href=\"http://www.postgresql.org/docs/current/static/datatype-net-types.html\">PostgreSQL&#39;s MACADDR, INET, and CIDR datatypes</a>.\nIn Rails 4.0, the following migration will be supported:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n  <td class=\"code\"><pre>create_table <span class=\"symbol\">:network_types</span> <span class=\"keyword\">do</span> |t|\n  t.cidr <span class=\"symbol\">:cidr_address</span>\n  t.inet <span class=\"symbol\">:ip_address</span>\n  t.macaddr <span class=\"symbol\">:mac_address</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Also, the schema dumper supports these types as well (previously they\nwould appear as <code>string</code> types in the schema.rb file).</p>\n\n<p>ActiveRecord will also cast the values of the INET and CIDR types to\nRuby&#39;s <a href=\"http://www.ruby-doc.org/stdlib-1.9.3/libdoc/ipaddr/rdoc/IPAddr.html\">IPAddr</a>,\nwhile MACADDR will continue to be converted to a string.</p>\n","summary":"Support added to ActiveRecord for INET, CIDR and MACADDR types for PostgreSQL","illustration":null,"illustration_alt":null,"tags":["ruby","ruby-on-rails","postgresql"],"shallow":false,"date":"2012-05-18T00:00:00Z"},{"id":"ruby/2012/05/01/simple-sleeper-for-request-testing","title":"Sleep helper for your request tests","dockyarder":"brian-cardarella","body":"<p>We have been using <a href=\"http://github.com/thoughtbot/capybara-webkit\">capybara-webkit</a> quite a bit.\nBecause of the async nature of JavaScript you sometimes have to use\n<a href=\"http://rubydoc.org/stdlib/core/1.9.2/Kernel#sleep-instance_method\">sleeps</a> in your tests if the action is taking longer than the default\nCapybara 2 second timeout.</p>\n\n<p>Lately I have had the need to sleep for up to 30\nseconds for certain actions and I wanted a clean visual indicator of how\nmuch time was remaining. So I whipped up the following:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">def</span> <span class=\"function\">sleep_for</span>(sleep_time, message = <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Sleeping...</span><span class=\"delimiter\">'</span></span>)\n  sleep_time.times <span class=\"keyword\">do</span> |i|\n    print_message = <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"inline\"><span class=\"inline-delimiter\">#{</span>message<span class=\"inline-delimiter\">}</span></span><span class=\"content\"> </span><span class=\"inline\"><span class=\"inline-delimiter\">#{</span>sleep_time - i<span class=\"inline-delimiter\">}</span></span><span class=\"content\"> seconds remaining</span><span class=\"delimiter\">&quot;</span></span>\n    print print_message\n    sleep <span class=\"integer\">1</span>\n    print [<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"char\">\\b</span><span class=\"delimiter\">&quot;</span></span>, <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\"> </span><span class=\"delimiter\">&quot;</span></span>, <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"char\">\\b</span><span class=\"delimiter\">&quot;</span></span>].map { |c| c * print_message.length }.join\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>I hope others find this useful!</p>\n","summary":"A clean helper for giving visual feedback on long sleeps in your request tests","illustration":null,"illustration_alt":null,"tags":["ruby","testing"],"shallow":false,"date":"2012-05-01T00:00:00Z"},{"id":"javascript/2012/04/16/using-backbone-views-with-rails-jquery-ujs","title":"Using Backbone Views With Rails jQuery-ujs","dockyarder":"russ-jones","body":"<p>I often meet Rails developers that have unwittingly jumped on the unobtrusive javascript bandwagon. \nThey throw &#39;:remote =&gt; true&#39; on a form and benefit from its conventions, but don&#39;t know how to make it really work for them. \nThey&#39;re probably still inclined to write out procedural jQuery code the same way they were doing it before <a href=\"https://github.com/rails/jquery-ujs\">jquery-ujs</a> became popular. \nThere&#39;s a helpful <a href=\"https://github.com/rails/jquery-ujs/wiki/ajax\">wiki page</a> that describes its custom events and how to use them, but they probably don&#39;t know about it.</p>\n\n<p>Maybe they&#39;ve worked on improving some client side code with Backbone recently, and maybe they&#39;re trying to do things the Backbone way but don&#39;t know how to tie that together with existing Rails views. \nHere&#39;s a quick example of how Backbone views can listen for jquery-ujs custom events. You can view a working fiddle <a href=\"http://jsfiddle.net/codeofficer/mpyXT/\">here</a>.</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n22\n23\n24\n25\n26\n27\n28\n29\n<strong>30</strong>\n31\n32\n33\n34\n35\n36\n37\n38\n39\n<strong>40</strong>\n41\n42\n43\n44\n45\n46\n47\n48\n49\n<strong>50</strong>\n51\n52\n53\n54\n55\n56\n57\n58\n59\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">var</span> FormView = Backbone.View.extend({\n  <span class=\"key\">el</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">#form</span><span class=\"delimiter\">'</span></span>,\n\n  <span class=\"key\">events</span>: {\n    <span class=\"comment\">// Fired automatically when a file-type input is detected with a</span>\n    <span class=\"comment\">// non-blank value. You can use this hook to implement a handler that</span>\n    <span class=\"comment\">// will deal with those non-blank file inputs. Returning false will</span>\n    <span class=\"comment\">// disallow standard form submission.</span>\n    <span class=\"key\"><span class=\"delimiter\">'</span><span class=\"content\">ajax:aborted:file</span><span class=\"delimiter\">'</span></span>     : <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">ajaxAbortedFile</span><span class=\"delimiter\">'</span></span>,\n\n    <span class=\"comment\">// Fired when there are required inputs which have been left blank.</span>\n    <span class=\"comment\">// You can use this handler to deal with those blank required inputs.</span>\n    <span class=\"comment\">// Returning false will submit the form anyway.</span>\n    <span class=\"key\"><span class=\"delimiter\">'</span><span class=\"content\">ajax:aborted:required</span><span class=\"delimiter\">'</span></span> : <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">ajaxAbortedRequired</span><span class=\"delimiter\">'</span></span>,\n\n    <span class=\"comment\">// First event fired for any remote enabled form. Stopping this event</span>\n    <span class=\"comment\">// will cancel the ajax request</span>\n    <span class=\"key\"><span class=\"delimiter\">'</span><span class=\"content\">ajax:before</span><span class=\"delimiter\">'</span></span>           : <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">ajaxBefore</span><span class=\"delimiter\">'</span></span>,\n\n    <span class=\"comment\">// Fired before the ajax request is sent. Stopping this event will</span>\n    <span class=\"comment\">// cancel the ajax request. Commonly used to customize certain request</span>\n    <span class=\"comment\">// headers</span>\n    <span class=\"key\"><span class=\"delimiter\">'</span><span class=\"content\">ajax:beforeSend</span><span class=\"delimiter\">'</span></span>       : <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">ajaxBeforeSend</span><span class=\"delimiter\">'</span></span>,\n\n    <span class=\"comment\">// Fired after completion, if the HTTP response was a success</span>\n    <span class=\"key\"><span class=\"delimiter\">'</span><span class=\"content\">ajax:success</span><span class=\"delimiter\">'</span></span>          : <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">ajaxSuccess</span><span class=\"delimiter\">'</span></span>,\n\n    <span class=\"comment\">// Fired after completion, if the server returned an error</span>\n    <span class=\"key\"><span class=\"delimiter\">'</span><span class=\"content\">ajax:error</span><span class=\"delimiter\">'</span></span>            : <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">ajaxError</span><span class=\"delimiter\">'</span></span>,\n\n    <span class=\"comment\">// Fired after the request has been completed, no matter what outcome</span>\n    <span class=\"key\"><span class=\"delimiter\">'</span><span class=\"content\">ajax:complete</span><span class=\"delimiter\">'</span></span>         : <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">ajaxComplete</span><span class=\"delimiter\">'</span></span>\n  },\n\n  <span class=\"function\">ajaxAbortedFile</span>: <span class=\"keyword\">function</span>(e, elements){\n  },\n\n  <span class=\"function\">ajaxAbortedRequired</span>: <span class=\"keyword\">function</span>(e, elements){\n  },\n\n  <span class=\"function\">ajaxBefore</span>: <span class=\"keyword\">function</span>(e){\n  },\n\n  <span class=\"function\">ajaxBeforeSend</span>: <span class=\"keyword\">function</span>(e, xhr, settings){\n  },\n\n  <span class=\"function\">ajaxSuccess</span>: <span class=\"keyword\">function</span>(e, data, status, xhr){\n  },\n\n  <span class=\"function\">ajaxError</span>: <span class=\"keyword\">function</span>(e, xhr, status, error){\n  },\n\n  <span class=\"function\">ajaxComplete</span>: <span class=\"keyword\">function</span>(e, xhr, status){\n  }\n});\n\n<span class=\"predefined\">$</span>(<span class=\"keyword\">function</span>(){\n    window.view = <span class=\"keyword\">new</span> FormView();\n});\n</pre></td>\n</tr></table>\n</div></div><div class=\"highlight text \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n  <td class=\"code\"><pre>&lt;form id=&quot;form&quot; action=&quot;#&quot; method=&quot;POST&quot; data-remote=&quot;true&quot;&gt;\n  &lt;p&gt;&lt;input type=&quot;text&quot; value=&quot;...&quot;&gt;&lt;/p&gt;\n  &lt;p&gt;&lt;input type=&quot;submit&quot; value=&quot;Continue &amp;rarr;&quot;&gt;&lt;/p&gt;\n&lt;/form&gt;\n</pre></td>\n</tr></table>\n</div></div>","summary":"Throwing them together in a way that makes sense.","illustration":null,"illustration_alt":null,"tags":["javascript","backbone","ruby-on-rails","jquery"],"shallow":false,"date":"2012-04-16T00:00:00Z"},{"id":"ruby/2012/04/10/tmux-for-fun-and-profit","title":"Tmux, for fun and profit","dockyarder":"dan-mcclain","body":"<h2>Screen - the gateway drug</h2>\n\n<p>I had been using <a href=\"http://www.gnu.org/software/screen\">screen</a> for a while to multiplex my terminal when\nworking on Ruby projects.  I would have a tab for\n<a href=\"http://git-scm.org\">git</a> (was using <a href=\"http://code.google.com/p/macvim/\">MacVim</a>), on for <code>rails s</code> or <code>tail\nlog/development.log</code>, one for running tests (now using <code>guard</code> or\n<code>autotest</code>), one for <code>rails c</code> and lastly one for <code>rails db</code>. Detaching\nfrom a screen session allowed me to have a full environment running\nuntil my next reboot, I could switch back into the project quickly, and\nI had configured my <code>.screenrc</code> to open these tabs everytime I started\nscreen.</p>\n\n<p>I also utilized screen to keep sessions open on a remote server between\nSSH connects. Instantiating a screen session on the remote server\nwould keep processes running even when my SSH connection would get\nkilled. This would prevent an <code>apt-get upgrade</code> from fragging the system\nincase I disconnected, or allow me to drop the connection during a long\nrunning process.</p>\n\n<p>As much as I used it, I was still a screen newb, as my <code>.screenrc</code> was\npretty vanilla. I hadn&#39;t taken the time to read the man\npages/tutorials out there to understand some of the more subtle\nfeatures.</p>\n\n<h2>Tmux and Brian P. Hogan&#39;s &#39;tmux&#39; book</h2>\n\n<p>I had noticed that <a href=\"http://tmux.sourceforge.net\">tmux</a> was getting a decent amount of attention, so\nwhen I started at DockYard, I told myself I would only use tmux.  I also\nswitched from MacVim to terminal vim, which works better when pair\nprogramming.  <a href=\"http://www.bphogan.com\">Brian P. Hogan</a> recently wrote\n<a href=\"http://pragprog.com/book/bhtmux/tmux\">tmux: Productive Mouse-Free Development</a> for Pragmatic Programmers.  After reading his book, I have a solid <code>.tmux.conf</code> and a great understanding of tmux.</p>\n\n<h2>Tmux and Pair Programming</h2>\n\n<p>The one disadvantage of everyone at DockYard working remotely is that you can&#39;t\njust turn around and ask someone to come to your desk to pair up. Tmux\nallows multiple users to connect to a specific session.  With a bit of\n<a href=\"http://en.wikipedia.org/wiki/Dynamic_DNS\">dynamic DNS</a> magic, port forwarding, and ssh tunneling, multiple people\ncan connect to the same tmux session, work in the same vim window, and\nsee the same development server.</p>\n\n<p>The first step is dynamic DNS and port forwarding, which I won&#39;t cover\nhere, since everyone has different modems and routers. You want to\nforward port 22 through your router/firewall to your development\nmachine. Using dynamic DNS, you can connect to your coworkers via a\ndomain like <code>dan.example.com</code> instead of figuring out your IP and\nsending that to your partner.</p>\n\n<p>We use the following ssh command to forward connection on our local\nmachine to the other person&#39;s</p>\n<div class=\"highlight  \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>ssh dan.example.com -L 3000:127.0.0.1:3000\n</pre></td>\n</tr></table>\n</div></div>\n<p>The above command forwards any request on port 3000 on my machine the\none to which I am connected. That way, I can see what my partner sees\nwhen we edit files on his machine.  Once connected, I just attach to my\npartner&#39;s tmux session.  At this point, we are programming in the same\nterminal session, and we can both see the edits as we make them.  We use\na Google+ Hangout to communicate while we pair program.</p>\n\n<h2>Conclusion</h2>\n\n<p>With a tmux, ssh port forwarding, and Google+ Hangout, you can create a\nuseful pair programming environment with your remote coworkers.  We find\nthis setup very effective and use it often to work together and tackle\nan issue.</p>\n","summary":"Pair programming at distance","illustration":null,"illustration_alt":null,"tags":["ruby","workflow"],"shallow":false,"date":"2012-04-10T00:00:00Z"},{"id":"ruby/2012/04/03/use-association-extensions-to-build-join-attributes-on-a-hmt","title":"Use Association Extensions to Build Join Attributes on a HMT","dockyarder":"russ-jones","body":"<p>It&#39;s common in Rails to use a <code>has_many :through</code> relationship to model User/Group Memberships. \nSometimes we have extra data in the join that we would like to make use of, but getting that \ndata in there can be combersome depending on our approach. For example, given the\nfollowing diagram and schema:</p>\n\n<p><img src=\"/images/diagram.png\" alt=\"Diagram\"></p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n</pre></td>\n  <td class=\"code\"><pre><span class=\"constant\">ActiveRecord</span>::<span class=\"constant\">Schema</span>.define(<span class=\"symbol\">:version</span> =&gt; <span class=\"integer\">20120324170519</span>) <span class=\"keyword\">do</span>\n  create_table <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">groups</span><span class=\"delimiter\">&quot;</span></span>, <span class=\"symbol\">:force</span> =&gt; <span class=\"predefined-constant\">true</span> <span class=\"keyword\">do</span> |t|\n    t.string   <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">name</span><span class=\"delimiter\">&quot;</span></span>\n    t.datetime <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">created_at</span><span class=\"delimiter\">&quot;</span></span>, <span class=\"symbol\">:null</span> =&gt; <span class=\"predefined-constant\">false</span>\n    t.datetime <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">updated_at</span><span class=\"delimiter\">&quot;</span></span>, <span class=\"symbol\">:null</span> =&gt; <span class=\"predefined-constant\">false</span>\n  <span class=\"keyword\">end</span>\n\n  create_table <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">memberships</span><span class=\"delimiter\">&quot;</span></span>, <span class=\"symbol\">:force</span> =&gt; <span class=\"predefined-constant\">true</span> <span class=\"keyword\">do</span> |t|\n    t.integer  <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">user_id</span><span class=\"delimiter\">&quot;</span></span>\n    t.integer  <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">group_id</span><span class=\"delimiter\">&quot;</span></span>\n    t.string   <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">role</span><span class=\"delimiter\">&quot;</span></span>\n    t.datetime <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">created_at</span><span class=\"delimiter\">&quot;</span></span>, <span class=\"symbol\">:null</span> =&gt; <span class=\"predefined-constant\">false</span>\n    t.datetime <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">updated_at</span><span class=\"delimiter\">&quot;</span></span>, <span class=\"symbol\">:null</span> =&gt; <span class=\"predefined-constant\">false</span>\n  <span class=\"keyword\">end</span>\n\n  create_table <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">users</span><span class=\"delimiter\">&quot;</span></span>, <span class=\"symbol\">:force</span> =&gt; <span class=\"predefined-constant\">true</span> <span class=\"keyword\">do</span> |t|\n    t.string   <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">name</span><span class=\"delimiter\">&quot;</span></span>\n    t.datetime <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">created_at</span><span class=\"delimiter\">&quot;</span></span>, <span class=\"symbol\">:null</span> =&gt; <span class=\"predefined-constant\">false</span>\n    t.datetime <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">updated_at</span><span class=\"delimiter\">&quot;</span></span>, <span class=\"symbol\">:null</span> =&gt; <span class=\"predefined-constant\">false</span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>We might deal directly with the join table to assign our additonal data.</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n  <td class=\"code\"><pre><span class=\"instance-variable\">@user</span> = <span class=\"constant\">User</span>.create(<span class=\"key\">name</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">User 1</span><span class=\"delimiter\">'</span></span>)\n<span class=\"instance-variable\">@user</span> = <span class=\"constant\">Group</span>.create(<span class=\"key\">name</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Group 1</span><span class=\"delimiter\">'</span></span>)\n<span class=\"instance-variable\">@membership</span> = <span class=\"constant\">Membership</span>.create <span class=\"keyword\">do</span> |m|\n  m.user = <span class=\"instance-variable\">@user</span>\n  m.group = <span class=\"instance-variable\">@group</span>\n  m.role = <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">admin</span><span class=\"delimiter\">'</span></span>\n<span class=\"keyword\">end</span>\n<span class=\"instance-variable\">@user</span>.admin? <span class=\"comment\"># =&gt; true</span>\n<span class=\"instance-variable\">@user</span>.editor? <span class=\"comment\"># =&gt; false</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>There&#39;s a better way to pull this off ...</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre><span class=\"instance-variable\">@group</span>.admins &lt;&lt; <span class=\"instance-variable\">@user</span>\n<span class=\"instance-variable\">@user</span>.admin? <span class=\"comment\"># =&gt; true</span>\n<span class=\"instance-variable\">@user</span>.editor? <span class=\"comment\"># =&gt; false</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>And this is how it&#39;s done ...</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">class</span> <span class=\"class\">User</span> &lt; <span class=\"constant\">ActiveRecord</span>::<span class=\"constant\">Base</span>\n  has_many <span class=\"symbol\">:memberships</span>\n  has_many <span class=\"symbol\">:groups</span>, <span class=\"symbol\">:through</span> =&gt; <span class=\"symbol\">:memberships</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">admin?</span>\n    memberships.where(<span class=\"symbol\">:role</span> =&gt; <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">admin</span><span class=\"delimiter\">'</span></span>).first\n  <span class=\"keyword\">end</span>\n\n  <span class=\"keyword\">def</span> <span class=\"function\">editor?</span>\n    memberships.where(<span class=\"symbol\">:role</span> =&gt; <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">editor</span><span class=\"delimiter\">'</span></span>).first\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div><div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">class</span> <span class=\"class\">Membership</span> &lt; <span class=\"constant\">ActiveRecord</span>::<span class=\"constant\">Base</span>\n  belongs_to <span class=\"symbol\">:group</span>\n  belongs_to <span class=\"symbol\">:user</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div><div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">class</span> <span class=\"class\">Group</span> &lt; <span class=\"constant\">ActiveRecord</span>::<span class=\"constant\">Base</span>\n  has_many <span class=\"symbol\">:memberships</span>\n  has_many <span class=\"symbol\">:users</span>, <span class=\"symbol\">:through</span> =&gt; <span class=\"symbol\">:memberships</span>\n\n  has_many <span class=\"symbol\">:admins</span>, <span class=\"symbol\">:through</span> =&gt; <span class=\"symbol\">:memberships</span>, <span class=\"symbol\">:source</span> =&gt; <span class=\"symbol\">:user</span>,\n    <span class=\"symbol\">:conditions</span> =&gt; <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">memberships.role = 'admin'</span><span class=\"delimiter\">&quot;</span></span> <span class=\"keyword\">do</span>\n      <span class=\"keyword\">def</span> <span class=\"function\">&lt;&lt;</span>(admin)\n        proxy_association.owner.memberships.create(<span class=\"symbol\">:role</span> =&gt; <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">admin</span><span class=\"delimiter\">'</span></span>, <span class=\"symbol\">:user</span> =&gt; admin)\n      <span class=\"keyword\">end</span>\n  <span class=\"keyword\">end</span>\n\n  has_many <span class=\"symbol\">:editors</span>, <span class=\"symbol\">:through</span> =&gt; <span class=\"symbol\">:memberships</span>, <span class=\"symbol\">:source</span> =&gt; <span class=\"symbol\">:user</span>,\n    <span class=\"symbol\">:conditions</span> =&gt; <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">memberships.role = 'editor'</span><span class=\"delimiter\">&quot;</span></span> <span class=\"keyword\">do</span>\n      <span class=\"keyword\">def</span> <span class=\"function\">&lt;&lt;</span>(editor)\n        proxy_association.owner.memberships.create(<span class=\"symbol\">:role</span> =&gt; <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">editor</span><span class=\"delimiter\">'</span></span>, <span class=\"symbol\">:user</span> =&gt; editor)\n      <span class=\"keyword\">end</span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>We&#39;re defining an extension on our group&#39;s <code>has_many</code> association which overrides\nthe <code>&lt;&lt;</code> method on that collection. We then tell the proxy association&#39;s owner\n(which is our group object) to create the user/group join record, but with an additional\nrole assignment of &#39;admin&#39;.</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre><span class=\"instance-variable\">@group</span>.admins &lt;&lt; <span class=\"instance-variable\">@user</span>\n<span class=\"instance-variable\">@user</span>.admin? <span class=\"comment\"># =&gt; true</span>\n<span class=\"instance-variable\">@user</span>.editor? <span class=\"comment\"># =&gt; false</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Pretty expressive, thanks to ActiveRecord!</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n22\n23\n24\n25\n26\n27\n28\n29\n<strong>30</strong>\n31\n32\n33\n34\n35\n36\n37\n38\n</pre></td>\n  <td class=\"code\"><pre>require <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">test_helper</span><span class=\"delimiter\">'</span></span>\n\n<span class=\"keyword\">class</span> <span class=\"class\">GroupTest</span> &lt; <span class=\"constant\">ActiveSupport</span>::<span class=\"constant\">TestCase</span>\n  setup <span class=\"keyword\">do</span>\n    <span class=\"instance-variable\">@user_1</span> = <span class=\"constant\">User</span>.create(<span class=\"key\">name</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">User 1</span><span class=\"delimiter\">'</span></span>)\n    <span class=\"instance-variable\">@user_2</span> = <span class=\"constant\">User</span>.create(<span class=\"key\">name</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">User 2</span><span class=\"delimiter\">'</span></span>)\n    <span class=\"instance-variable\">@user_3</span> = <span class=\"constant\">User</span>.create(<span class=\"key\">name</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">User 3</span><span class=\"delimiter\">'</span></span>)\n    <span class=\"instance-variable\">@group</span> = <span class=\"constant\">Group</span>.create(<span class=\"key\">name</span>: <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Group 1</span><span class=\"delimiter\">'</span></span>)\n  <span class=\"keyword\">end</span>\n\n  test <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">No Memberships</span><span class=\"delimiter\">&quot;</span></span> <span class=\"keyword\">do</span>\n    assert_equal <span class=\"instance-variable\">@user_1</span>.memberships.count, <span class=\"integer\">0</span>\n  <span class=\"keyword\">end</span>\n\n  test <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">@group.users &lt;&lt; @user_1 sets nil role on membership</span><span class=\"delimiter\">&quot;</span></span> <span class=\"keyword\">do</span>\n    <span class=\"instance-variable\">@group</span>.users &lt;&lt; <span class=\"instance-variable\">@user_1</span>\n    assert_equal <span class=\"instance-variable\">@user_1</span>.memberships.count, <span class=\"integer\">1</span>\n    assert_equal <span class=\"instance-variable\">@user_1</span>.memberships.first.role, <span class=\"predefined-constant\">nil</span>\n  <span class=\"keyword\">end</span>\n\n  test <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">@group.admins &lt;&lt; @user_2 sets 'admin' role on membership</span><span class=\"delimiter\">&quot;</span></span> <span class=\"keyword\">do</span>\n    <span class=\"instance-variable\">@group</span>.admins &lt;&lt; <span class=\"instance-variable\">@user_2</span>\n    assert_equal <span class=\"instance-variable\">@user_2</span>.memberships.count, <span class=\"integer\">1</span>\n    assert_equal <span class=\"instance-variable\">@user_2</span>.memberships.first.role, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">admin</span><span class=\"delimiter\">'</span></span>\n  <span class=\"keyword\">end</span>\n\n  test <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">@group.editors &lt;&lt; @user_3 sets 'editor' role on membership</span><span class=\"delimiter\">&quot;</span></span> <span class=\"keyword\">do</span>\n    <span class=\"instance-variable\">@group</span>.editors &lt;&lt; <span class=\"instance-variable\">@user_3</span>\n    assert_equal <span class=\"instance-variable\">@user_3</span>.memberships.count, <span class=\"integer\">1</span>\n    assert_equal <span class=\"instance-variable\">@user_3</span>.memberships.first.role, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">editor</span><span class=\"delimiter\">'</span></span>\n  <span class=\"keyword\">end</span>\n\n  teardown <span class=\"keyword\">do</span>\n    <span class=\"constant\">User</span>.delete_all\n    <span class=\"constant\">Group</span>.delete_all\n    <span class=\"constant\">Membership</span>.delete_all\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>","summary":"Russ lays down a use case for ActiveRecord association extensions","illustration":null,"illustration_alt":null,"tags":["ruby","ruby-on-rails"],"shallow":false,"date":"2012-04-03T00:00:00Z"},{"id":"ruby/2012/03/05/our-ci-setup","title":"Our Continuous Integration Setup","dockyarder":"dan-mcclain","body":"<p>When I started at DockYard, Brian tasked me with setting up a continous\nintegration (CI) server so that we could keep an eye on our RSpec test\nsuite. We went with Jenkins since we are writing client code, so\n<a href=\"http://travis-ci.org\">travis-ci.org</a> is out of the question (for now).</p>\n\n<p>Our CI server is running on Ubuntu 10.04. We are using nginx as a\nreverse proxy infront of our Jenkins server. Our basic setup is the same\nas <a href=\"http://bostonrb.org/presentations/jenkins-rails\">the presentation I gave at Boston RB in January</a>.\nThere are a few upgrades I have made since then.  First, I set up the\nGitHub authentication plugin. The other plugin I installed was the\nCampfire notification plugin. Since we are all remote, we use Campfire\nas our main line of communication. Having Jenkins notify us in Campfire\nallows us to see when new code is pushed to master, and when someone\nbreaks the build.</p>\n\n<h2>RSpec HTML formatter + Jenkins = Every Build is successful (even when it isn&#39;t)</h2>\n\n<p>As we found out the hard way, using the RSpec HTML formatter from within\njenkins is not the best idea.  The problem is the HTML formatter returns\nthe same exit code regardless of whether or not the suite passes. This\nis a huge problem, as you end up with false positives.</p>\n\n<h2>Enter ci_reporter</h2>\n\n<p>The <a href=\"https://github.com/nicksieger/ci_reporter\">ci_reporter</a> gem provides a rake\ntask that generates a set of xml reports that Jenkins can interpret and\ngive us a more complete picture of our test suite. Jenkins will plot the\nnumber of failure over time, display test duration, and provide a number \nof other stats you can utilize. </p>\n\n<h2>Capybara-webkit + Xvfb + headless = Javascript without opening a browser</h2>\n\n<p>We are using capybara to run our <a href=\"http://railscasts.com/episodes/257-request-specs-and-capybara\">request\nspecs</a>.\nWhen our request spec needs javascript, we use \n<a href=\"https://github.com/thoughtbot/capybara-webkit\">Capybara-webkit</a> as our\njavascript driver. Capybara-webkit is a\nwebkit capybara driver, allowing you to run javascript in a headless\nwebkit instance.  It accomplishes this by using QtWebKit. On Ubuntu, to\nutilize capybara-webkit, you need an X Server running when you run your\ntest.  To accomplish this, I installed Xvfb, which will create a\nvirtual framebuffer.  To instantiate xvfb, I used the headless\ngem, which is a ruby wrapper for xvfb.  With headless, I don&#39;t have to\ndo any bash scripting to get a framebuffer ready before we run our\ntests. </p>\n\n<p>I added the following code to our <code>spec_helper.rb</code> file</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n  <td class=\"code\"><pre>config.before(<span class=\"symbol\">:suite</span>) <span class=\"keyword\">do</span>\n  <span class=\"instance-variable\">@headless</span> = <span class=\"constant\">Headless</span>.new\n  <span class=\"instance-variable\">@headless</span>.start\n<span class=\"keyword\">end</span>\n\nconfig.after(<span class=\"symbol\">:suite</span>) <span class=\"keyword\">do</span>\n  <span class=\"instance-variable\">@headless</span>.destroy\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>The above spippet creates the headless instance and creates the\nframebuffer at the beginning of the test suite, and destorys it\nafterwards.</p>\n\n<h2>Conclusion</h2>\n\n<p>Overall, I&#39;m pretty happy with our set up as it is. The one issue I have\nwith it is the way ci_reporter and jenkins interact. Since Jenkins was\norigianlly built for Java, builds are BROKEN when they don&#39;t build, but\nUNSTABLE when their tests fail.  UNSTABLE builds are seen as successful.\nI would rather an UNSTABLE build be seen as a failure, since the\ncampfire notification plugin plays the same sound for successful and\nunstable builds.  I may poke around with the plugin or ci_reporter to\nhave jenkins notify us of builds in a way that makes more sense.</p>\n","summary":"What we are doing to keep our developers honest with their tests","illustration":null,"illustration_alt":null,"tags":["ruby","testing","linux"],"shallow":false,"date":"2012-03-05T00:00:00Z"},{"id":"announcement/2012/02/27/dan-mcclain-is-a-dockyarder","title":"Dan McClain is a DockYarder","dockyarder":"brian-cardarella","body":"<p><img src=\"/images/dan-mcclain.png\" alt=\"Dan McClain\"></p>\n\n<p>Today I&#39;m happy to announce that Dan McClain is joining our team! I&#39;ve\ngotten to know Dan over the past few months through\n<a href=\"http://bostonrb.org\">BostonRB</a>. He&#39;s been <a href=\"https://github.com/bostonrb/bostonrb/commits/master?author=danmcclain\">building out some features for\nthe BostonRB site</a>, specifically adding\nthe start of an admin interface (which is huge for me as I was doing all\ndata entry through the Rails console) and setting BostonRB up on\n<a href=\"http://travis-ci.org/#!/bostonrb/bostonrb\">TravisCI</a>.</p>\n\n<p>For the past few weeks Dan has been working as a contract-to-hire for\nus. Already he&#39;s made a big impact by setting up a company instance\nof Jenkins and keeping us honest with our test suites.</p>\n\n<p>Welcome aboard Dan!</p>\n\n<p><a href=\"http://twitter.com/_danmcclain\">Follow Dan on Twitter</a></p>\n","summary":"DockYard welcomes Dan McClain","illustration":null,"illustration_alt":null,"tags":["announcement","office"],"shallow":false,"date":"2012-02-27T00:00:00Z"},{"id":"ruby/2012/02/20/rails-engines-and-monkey-patching","title":"Rails Engines and Monkey Patching","dockyarder":"brian-cardarella","body":"<p>We&#39;ve started extracting simple behavior into Rails Engines lately. An\nexample of this is our\n<a href=\"https://github.com/dockyard/invitable\">Invitable</a> engine. As you may\nhave guessed, it adds invitation request support to an existing app.\nIt&#39;s about 50% complete right now but for the purposes of this post it\nwill act as the example.</p>\n\n<p>As an engine it has a very slim <code>Invitation</code> model that only\nexpects an <code>email</code> attribute. A client app we&#39;re currently\nbuilding requires two additional attributes to be gathered: <code>name</code> and <code>zipcode</code>.</p>\n\n<p>There is no need to overwrite the model, I just want to extend it. The cleanest \nthing to do is just monkey patch it.</p>\n\n<p>Let&#39;s start with writing the spec of where I want the model to be (I am\nusing <a href=\"https://github.com/bcardarella/valid_attribute\">ValidAttribute</a> if\nthe specs don&#39;t look familiar, I suggest you try it test spec your\nvalidations)</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n  <td class=\"code\"><pre>require <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">spec_helper</span><span class=\"delimiter\">'</span></span>\n\ndescribe <span class=\"constant\">Invitable</span>::<span class=\"constant\">Invitation</span> <span class=\"keyword\">do</span>\n  it { should     have_valid(<span class=\"symbol\">:name</span>).when(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Henry Ford</span><span class=\"delimiter\">'</span></span>) }\n  it { should_not have_valid(<span class=\"symbol\">:name</span>).when(<span class=\"predefined-constant\">nil</span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"delimiter\">'</span></span>) }\n  it { should     have_valid(<span class=\"symbol\">:zipcode</span>).when(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">02115</span><span class=\"delimiter\">'</span></span>) }\n  it { should_not have_valid(<span class=\"symbol\">:zipcode</span>).when(<span class=\"predefined-constant\">nil</span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">hello</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">0211</span><span class=\"delimiter\">'</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">021156</span><span class=\"delimiter\">'</span></span>) }\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>To make this spec green there are two things that I have to do</p>\n\n<ol>\n<li>Add the <code>name</code> and <code>zipcode</code> columsn to the correct table</li>\n<li>Open up the class and add the proper validations on those attributes</li>\n</ol>\n\n<p>The first is simple. I just create a new migration and add the columns\nto <code>invitable_invitations</code>.</p>\n\n<p>The second is not so straight forward. If I open up the class in the client app and\nattempt to add the validations like so:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">module</span> <span class=\"class\">Invitable</span>\n  <span class=\"keyword\">class</span> <span class=\"class\">Invitation</span>\n    validates <span class=\"symbol\">:name</span>, <span class=\"symbol\">:zipcode</span>, <span class=\"symbol\">:presence</span> =&gt; <span class=\"predefined-constant\">true</span>\n    validates <span class=\"symbol\">:zipcode</span>, <span class=\"symbol\">:format</span> =&gt; <span class=\"regexp\"><span class=\"delimiter\">/</span><span class=\"content\">^</span><span class=\"char\">\\d</span><span class=\"content\">{5}$|^</span><span class=\"char\">\\d</span><span class=\"content\">{5}-</span><span class=\"char\">\\d</span><span class=\"content\">{4}$</span><span class=\"delimiter\">/</span></span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>The app will raise a <code>NoMethodError</code> exception complaining that\n<code>validates</code> is undefined. In the load path there are two\n<code>app/models/invitable/invitation.rb</code> files and the one in the app takes precendence\nover the one in the engine. This is fine because you might want to\noverwrite the model entirely, but in this case I want to extend it. So\nyou must explicitly require the engine&#39;s model at the top of the app&#39;s model.</p>\n\n<p>Thankfully the engine itself has a nice helper <code>called_from</code> that tracks its full path\non the file system. In this example we access it with\n<code>Invitable::Engine.called_from</code>. This will point to the <code>lib/invitable</code> directory\nin the gem itself. Here is what I ended up with in the model:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n  <td class=\"code\"><pre>require <span class=\"constant\">File</span>.expand_path(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">../../app/models/invitable/invitation</span><span class=\"delimiter\">'</span></span>, <span class=\"constant\">Invitable</span>::<span class=\"constant\">Engine</span>.called_from)\n\n<span class=\"keyword\">module</span> <span class=\"class\">Invitable</span>\n  <span class=\"keyword\">class</span> <span class=\"class\">Invitation</span>\n    validates <span class=\"symbol\">:name</span>, <span class=\"symbol\">:zipcode</span>, <span class=\"symbol\">:presence</span> =&gt; <span class=\"predefined-constant\">true</span>\n    validates <span class=\"symbol\">:zipcode</span>, <span class=\"symbol\">:format</span> =&gt; <span class=\"regexp\"><span class=\"delimiter\">/</span><span class=\"content\">^</span><span class=\"char\">\\d</span><span class=\"content\">{5}$|^</span><span class=\"char\">\\d</span><span class=\"content\">{5}-</span><span class=\"char\">\\d</span><span class=\"content\">{4}$</span><span class=\"delimiter\">/</span></span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>It&#39;s verbose and this could be better so let&#39;s clean that up.</p>\n\n<p>In my engine I&#39;ve added a spec to <code>spec/lib/invitable/engine_spec.rb</code>\nwith the following (I&#39;m using <a href=\"https://github.com/floehopper/mocha\">Mocha</a> for the stubbing)</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n22\n23\n24\n25\n26\n27\n28\n29\n<strong>30</strong>\n31\n32\n33\n34\n35\n</pre></td>\n  <td class=\"code\"><pre>require <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">spec_helper</span><span class=\"delimiter\">'</span></span>\n\ndescribe <span class=\"constant\">Invitable</span>::<span class=\"constant\">Engine</span> <span class=\"keyword\">do</span>\n  before { <span class=\"constant\">Invitable</span>::<span class=\"constant\">Engine</span>.stubs(<span class=\"symbol\">:called_from</span>).returns(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">/lib/invitable</span><span class=\"delimiter\">'</span></span>) }\n\n  describe <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">.app_path</span><span class=\"delimiter\">'</span></span> <span class=\"keyword\">do</span>\n    it <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">returns the path to the engine app directory</span><span class=\"delimiter\">'</span></span> <span class=\"keyword\">do</span>\n      <span class=\"constant\">Invitable</span>::<span class=\"constant\">Engine</span>.app_path.should eq <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">/app</span><span class=\"delimiter\">'</span></span>\n    <span class=\"keyword\">end</span>\n  <span class=\"keyword\">end</span>\n\n  describe <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">controller_path</span><span class=\"delimiter\">'</span></span> <span class=\"keyword\">do</span>\n    it <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">returns the path to the named engine controller</span><span class=\"delimiter\">'</span></span> <span class=\"keyword\">do</span>\n      <span class=\"constant\">Invitable</span>::<span class=\"constant\">Engine</span>.controller_path(<span class=\"symbol\">:test_controller</span>).should eq <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">/app/controllers/invitable/test_controller.rb</span><span class=\"delimiter\">'</span></span>\n    <span class=\"keyword\">end</span>\n  <span class=\"keyword\">end</span>\n\n  describe <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">helper_path</span><span class=\"delimiter\">'</span></span> <span class=\"keyword\">do</span>\n    it <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">returns the path to the named engine helper</span><span class=\"delimiter\">'</span></span> <span class=\"keyword\">do</span>\n      <span class=\"constant\">Invitable</span>::<span class=\"constant\">Engine</span>.helper_path(<span class=\"symbol\">:test_helper</span>).should eq <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">/app/helpers/invitable/test_helper.rb</span><span class=\"delimiter\">'</span></span>\n    <span class=\"keyword\">end</span>\n  <span class=\"keyword\">end</span>\n\n  describe <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">mailer_path</span><span class=\"delimiter\">'</span></span> <span class=\"keyword\">do</span>\n    it <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">returns the path to the named engine mailer</span><span class=\"delimiter\">'</span></span> <span class=\"keyword\">do</span>\n      <span class=\"constant\">Invitable</span>::<span class=\"constant\">Engine</span>.mailer_path(<span class=\"symbol\">:test_mailer</span>).should eq <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">/app/mailers/invitable/test_mailer.rb</span><span class=\"delimiter\">'</span></span>\n    <span class=\"keyword\">end</span>\n  <span class=\"keyword\">end</span>\n\n  describe <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">model_path</span><span class=\"delimiter\">'</span></span> <span class=\"keyword\">do</span>\n    it <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">returns the path to the named engine model</span><span class=\"delimiter\">'</span></span> <span class=\"keyword\">do</span>\n      <span class=\"constant\">Invitable</span>::<span class=\"constant\">Engine</span>.model_path(<span class=\"symbol\">:test_model</span>).should eq <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">/app/models/invitable/test_model.rb</span><span class=\"delimiter\">'</span></span>\n    <span class=\"keyword\">end</span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>This looks good enough to me. Now to make it green I added the following\nto <code>lib/invitable/engine.rb</code></p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">def</span> <span class=\"predefined-constant\">self</span>.<span class=\"function\">app_path</span>\n  <span class=\"constant\">File</span>.expand_path(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">../../app</span><span class=\"delimiter\">'</span></span>, called_from)\n<span class=\"keyword\">end</span>\n\n<span class=\"string\"><span class=\"delimiter\">%w{</span><span class=\"content\">controller helper mailer model</span><span class=\"delimiter\">}</span></span>.each <span class=\"keyword\">do</span> |resource|\n  class_eval <span class=\"string\"><span class=\"delimiter\">&lt;&lt;-RUBY</span></span><span class=\"string\"><span class=\"content\">\n    def self.</span><span class=\"inline\"><span class=\"inline-delimiter\">#{</span>resource<span class=\"inline-delimiter\">}</span></span><span class=\"content\">_path(name)\n      File.expand_path(&quot;</span><span class=\"inline\"><span class=\"inline-delimiter\">#{</span>resource.pluralize<span class=\"inline-delimiter\">}</span></span><span class=\"content\">/invitable/</span><span class=\"char\">\\#</span><span class=\"content\">{name}.rb&quot;, app_path)\n    end</span><span class=\"delimiter\">\n  RUBY</span></span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>And now in the app model I can do the following</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n  <td class=\"code\"><pre>require <span class=\"constant\">Inivitable</span>::<span class=\"constant\">Engine</span>.model_path <span class=\"symbol\">:invitation</span>\n\n<span class=\"keyword\">module</span> <span class=\"class\">Invitable</span>\n  <span class=\"keyword\">class</span> <span class=\"class\">Invitation</span>\n    validates <span class=\"symbol\">:name</span>, <span class=\"symbol\">:zipcode</span>, <span class=\"symbol\">:presence</span> =&gt; <span class=\"predefined-constant\">true</span>\n    validates <span class=\"symbol\">:zipcode</span>, <span class=\"symbol\">:format</span> =&gt; <span class=\"regexp\"><span class=\"delimiter\">/</span><span class=\"content\">^</span><span class=\"char\">\\d</span><span class=\"content\">{5}$|^</span><span class=\"char\">\\d</span><span class=\"content\">{5}-</span><span class=\"char\">\\d</span><span class=\"content\">{4}$</span><span class=\"delimiter\">/</span></span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Nice and clean!</p>\n\n<p>This simple pattern can be applied to the controllers, mailers, etc... any class you want to actually\nextend from the engine instead of overwrite entirely.</p>\n\n<p>Finally, I&#39;d like the address a question I&#39;m sure some of you have. Why\nnot subclass? For this engine the <code>Invitable::InvitationsController</code> is\nexpecting a class of <code>Invitation</code> within the context of the <code>Invitable</code>\nmodule. So if I were to subclass</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">class</span> <span class=\"class\">Inivtation</span> &lt; <span class=\"constant\">Inivitable</span>::<span class=\"constant\">Invitation</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>You would then have to subclass the controller</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">class</span> <span class=\"class\">InvitationsController</span> &lt; <span class=\"constant\">Invitable</span>::<span class=\"constant\">InvitationsController</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>And because the <code>InvitationsController</code> is referencing\n<code>InvitationMailer</code> within the context of the <code>Invitable</code> module you\nwould have to subclass the mailer</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">class</span> <span class=\"class\">InvitationMailer</span> &lt; <span class=\"constant\">Invitable</span>::<span class=\"constant\">InvitationMailer</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Finally, because you&#39;ve subclassed the controller the mount in\n<code>routes.rb</code> becomes meaningless. If you head down the subclass path you\ndefeat the purpose of using the engine in the first place.</p>\n","summary":"A simple pattern for extending your Rails Engines in your app","illustration":null,"illustration_alt":null,"tags":["ruby","ruby-on-rails"],"shallow":false,"date":"2012-02-20T00:00:00Z"},{"id":"ruby/2012/02/16/single-quotes-or-double-quotes","title":"Single quotes or double quotes?","dockyarder":"brian-cardarella","body":"<p>I have a simple rule when it comes to strings: I always start out with\nsingle quotes</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre><span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Hello world!</span><span class=\"delimiter\">'</span></span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>When I need to interpolate in the string or add an escaped character it\nis time to upgrade to double quotes</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre><span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">Hello </span><span class=\"inline\"><span class=\"inline-delimiter\">#{</span>planet<span class=\"inline-delimiter\">}</span></span><span class=\"content\">!</span><span class=\"delimiter\">&quot;</span></span>\n\n<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">To: John Adamsn</span><span class=\"char\">\\n</span><span class=\"content\">From: Thomas Jefferson</span><span class=\"delimiter\">&quot;</span></span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Now what happens when the string style is part of that string itself?\nFor example, I don&#39;t need to interpolate and the only escaped character\nneeded is a single quote. This is when I&#39;ve been using <a href=\"http://web.njit.edu/all_topics/Prog_Lang_Docs/html/ruby/syntax.html#string\">string\nexpressions</a>.\nA string literal of <code>%q</code> is the equivalent of a single quote string and\na <code>%Q</code> is the equivalent of a double quote string. The string literals\nare contained withing a non-alphanumeric delimiter.</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\"># single quote</span>\n<span class=\"string\"><span class=\"delimiter\">%q{</span><span class=\"content\">Wayne's world!</span><span class=\"delimiter\">}</span></span>\n\n<span class=\"comment\"># double quote</span>\n<span class=\"string\"><span class=\"delimiter\">%Q{</span><span class=\"inline\"><span class=\"inline-delimiter\">#{</span>name<span class=\"inline-delimiter\">}</span></span><span class=\"content\">'s world!</span><span class=\"delimiter\">}</span></span>\n\n<span class=\"comment\"># ZOMG also a double quote!</span>\n<span class=\"string\"><span class=\"delimiter\">%{</span><span class=\"inline\"><span class=\"inline-delimiter\">#{</span>name<span class=\"inline-delimiter\">}</span></span><span class=\"content\">'s world!</span><span class=\"delimiter\">}</span></span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>I try to follow this rule. I don&#39;t think it saves anything other than it\njust looks nicer to me. A very simple (and completely unscientific)\nbenchmark shows that the difference between the two is a wash</p>\n\n<p>** Update: These benchmarks may be wrong, please see the comments for more information **</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n  <td class=\"code\"><pre>require <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">benchmark</span><span class=\"delimiter\">'</span></span>\n\n<span class=\"constant\">Benchmark</span>.measure { <span class=\"integer\">1</span>..<span class=\"integer\">10_000_000</span>.times { a = <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">hey now</span><span class=\"delimiter\">'</span></span> } }\n<span class=\"comment\"># =&gt;   1.960000   0.000000   1.970000 (  1.958126)</span>\n\n<span class=\"constant\">Benchmark</span>.measure { <span class=\"integer\">1</span>..<span class=\"integer\">10_000_000</span>.times { a = <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">hey now</span><span class=\"delimiter\">&quot;</span></span> } }\n<span class=\"comment\"># =&gt;   1.980000   0.010000   1.980000 (  1.988363)</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Any given run of this and the times would flip. The string is probably\njust being optimized somewhere so this benchmark is not very good. At the \nvery least it shows that execution time is similar. Let&#39;s see what happens \nwhen interpolating:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n  <td class=\"code\"><pre><span class=\"constant\">Benchmark</span>.measure { <span class=\"integer\">1</span>..<span class=\"integer\">10_000_000</span>.times { |i| a = <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">hey now </span><span class=\"inline\"><span class=\"inline-delimiter\">#{</span>i<span class=\"inline-delimiter\">}</span></span><span class=\"delimiter\">&quot;</span></span> } }\n<span class=\"comment\"># =&gt;   6.110000   0.010000   6.120000 (  6.111669)</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Now we can see a significant jump in time. (over 3 times longer) Why does this take so much longer?\nA clue as to what is happening can be seen when we compare this benchmark to string concatenation using single quotes</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n</pre></td>\n  <td class=\"code\"><pre><span class=\"constant\">Benchmark</span>.measure { <span class=\"integer\">1</span>..<span class=\"integer\">10_000_000</span>.times { |i| a = <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">hey now </span><span class=\"delimiter\">'</span></span> + i.to_s } }\n<span class=\"comment\"># =&gt;   6.490000   0.020000   6.510000 (  6.502408)</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>This ends up being about the same execution time as string interpolation.\nBefore we answer the previous question let&#39;s take a look at one more option</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n  <td class=\"code\"><pre>require <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">benchmark</span><span class=\"delimiter\">'</span></span>\n\n<span class=\"constant\">Benchmark</span>.measure { <span class=\"integer\">1</span>..<span class=\"integer\">10_000_000</span>.times { |i| a = <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">hey now </span><span class=\"delimiter\">'</span></span> &lt;&lt; i } }\n<span class=\"comment\">#  =&gt;   2.990000   0.010000   3.000000 (  2.986346)</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Whoa, this is much faster, more than 50% faster than interpolation and\nconcatenation. Why? What is happening here?</p>\n\n<p>What we are seeing is the difference between creating a new object and\nmodifying an existing object. It is not immediately obvious with string\ninterpolation as it is with concatenation. With the append we are actually \nmodyfing the object so there is no need to do any memory allocation.</p>\n\n<p>There are several differences between the two styles, they aren&#39;t\nalways interchangable. Most of the time the decision comes down to a\nstyling preference but there are certain use cases where it can make a\ndifference. String interpolation is in Ruby as a nice convenience but if\nyou&#39;re doing anything that is relying upon interpolation quite heavily\nyou may want to consider other options.</p>\n","summary":"An opinion on when to use the different quoting styles with some performance notes","illustration":null,"illustration_alt":null,"tags":["ruby","code-guidelines"],"shallow":false,"date":"2012-02-16T00:00:00Z"},{"id":"ruby/2012/02/15/get-those-instance-variables-out-of-my-specs","title":"Get those instance variables out of my specs!","dockyarder":"brian-cardarella","body":"<p>If you&#39;ve been writing <a href=\"https://www.relishapp.com/rspec\">RSpec</a> for any\nperiod of time I&#39;m sure you&#39;ve come across <a href=\"https://www.relishapp.com/rspec/rspec-core/v/2-8/docs/helper-methods/let-and-let\">let</a> and <a href=\"https://www.relishapp.com/rspec/rspec-core/v/2-8/docs/subject/explicit-subject\">subject</a>. (please take a moment to check out the links if you have no idea what I&#39;m talking about) In most cases you can write the same specs with instance variables. For example:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n</pre></td>\n  <td class=\"code\"><pre>describe <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">.find_good_cars</span><span class=\"delimiter\">'</span></span> <span class=\"keyword\">do</span>\n  before <span class=\"keyword\">do</span>\n    <span class=\"instance-variable\">@car_1</span> = Factory(<span class=\"symbol\">:good_car</span>)\n    <span class=\"instance-variable\">@car_2</span> = Factory(<span class=\"symbol\">:good_car</span>)\n    <span class=\"instance-variable\">@car_3</span> = Factory(<span class=\"symbol\">:bad_car</span>)\n    <span class=\"instance-variable\">@good_cars</span> = <span class=\"constant\">Car</span>.find_good_cars\n  <span class=\"keyword\">end</span>\n\n  it <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">only finds good cars</span><span class=\"delimiter\">'</span></span> <span class=\"keyword\">do</span>\n    <span class=\"instance-variable\">@good_cars</span>.should eq [<span class=\"instance-variable\">@car_1</span>, <span class=\"instance-variable\">@car_2</span>]\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Here is what it looks like when using <code>let</code> and <code>subject</code></p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n</pre></td>\n  <td class=\"code\"><pre>describe <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">.find_good_cars</span><span class=\"delimiter\">'</span></span> <span class=\"keyword\">do</span>\n  let!(<span class=\"symbol\">:car_1</span>) { Factory(<span class=\"symbol\">:good_car</span>) }\n  let!(<span class=\"symbol\">:car_2</span>) { Factory(<span class=\"symbol\">:good_car</span>) }\n  let!(<span class=\"symbol\">:car_3</span>) { Factory(<span class=\"symbol\">:bad_car</span>)  }\n  subject      { <span class=\"constant\">Car</span> }\n  its(<span class=\"symbol\">:find_good_cars</span>) { should eq [car_1, car_2] }\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Maybe it is just me but this <em>feels</em> cleaner. I treat instance\nvariables in my specs as a smell and you should too.</p>\n","summary":"Clean up your specs with let and subject","illustration":null,"illustration_alt":null,"tags":["ruby","testing"],"shallow":false,"date":"2012-02-15T00:00:00Z"},{"id":"ruby/2012/02/14/love-your-lib-directory","title":"Love Your lib Directory","dockyarder":"brian-cardarella","body":"<p><a href=\"http://blog.codeclimate.com/blog/2012/02/07/what-code-goes-in-the-lib-directory\">Be sure to check out Bryan Helmkamp&#39;s blog post on the same topic</a></p>\n\n<p>The <code>lib/</code> directory is the Red Headed Stepchild of your Rails\napplication. Let&#39;s discuss some conventions for keeping it clean and\nwhat should and shouldn&#39;t go in there.</p>\n\n<h2>It&#39;s not a dump</h2>\n\n<p><img src=\"/images/dump.jpg\" alt=\"Dump\"></p>\n\n<p>Does this look familiar? It does to me. This is what my <code>lib/</code> directory\nlooked like before I got fed up with it. That truck, that was me dumping more\ncode into <code>lib/</code>.</p>\n\n<p>In my experience there is one outstanding reason why code ends up\ngetting dumped into the lib/ directory: A poor understanding of what a\nmodel is. Rails has this way of reinforcing bad habits. Perhaps because\nit is so easy to get going some developers never bother to learn that a\nmodel does not in any way need to be attached to a persitence layer.\n(i.e. ActiveRecord)</p>\n\n<p>Let&#39;s all agree to the following:</p>\n\n<ol>\n<li>All Business Logic Goes Into A Model</li>\n<li>All Models Go Into <code>app/models</code></li>\n</ol>\n\n<p>When we say &quot;Business Logic&quot; we are of course talking about &quot;Application\nSpecific Business Logic&quot;. There is always the case of something you&#39;re\nworking on that is so generic it can be shared with other applications\nyou are (or will be) working on. Or, even better, with the community in\ngeneral as Open Source. That brings me to the next point.</p>\n\n<h2>Understanding the load path</h2>\n\n<p>If you have written a Rubygem, or at the very least, looked through one,\nyou know that the <code>lib/</code> directory is special. The short version of the\nstory is that Rubygems iterates over all of the libraries you have\ninstalled as a gem, and appends any <code>lib/</code> directories onto Ruby&#39;s Load\nPath. This is basically how Ruby gem files are exposed, so when you as\ndo a gem require it will iterate through every path in the load path and\ngive you the first match.</p>\n\n<p>This is also true with Rails. After all of your gems are loaded and your\napplication is up Rails will append <code>./lib/</code> to your load path. Any\nfiles you put in there can now be required the exact same way gems are.\nThis gives us an excellent path to extracting general functionality out\ninto. You can even play tricks with this, in your <code>application.rb</code> file\nput the following at the top:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre><span class=\"global-variable\">$:</span>.unshift(<span class=\"constant\">File</span>.expand_path(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">../../lib</span><span class=\"delimiter\">'</span></span>, <span class=\"predefined-constant\">__FILE__</span>))\n</pre></td>\n</tr></table>\n</div></div>\n<p>Now in your lib directory create an &#39;active_record&#39; directory and add a\nfile called &#39;base.rb&#39;. Inside that file add the following:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>raise <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\">ZOMG I BROKE RAILS!</span><span class=\"delimiter\">&quot;</span></span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Load up your Rails app and watch it throw an exception. Why? Because\nyour app&#39;s <code>lib/</code> directory was prepended to the load paths and when the\nlookup for <code>active_record/base</code> happened the first match was in your\napp&#39;s <code>lib/</code> instead of in the proper gem. This of course is more of an interesting hack than anything really\nuseful. But it does do a good job of demonstrating how Rubygems&#39; lookup\nhappens.</p>\n\n<h2>Use initializers for initializing, that is all</h2>\n\n<p>I have seen developers dump code into initializers that has no business\nbeing there. Yes, it loads and it works. That is not the point. We have\nconventions for a reason. Any code that you feel needs to go into an\ninitializer and has nothing to do with actually setting preferences or\nsomething of that manner almost always should go into the <code>lib/</code>\ndirectory. If you <strong>must</strong> monkey patch. Put it into the <code>lib/</code>\ndirectory. If you are creating a new class or module that has no\nbusiness being in <code>app/models</code> put it in to the <code>lib/</code> directory.</p>\n\n<h2>Using lib/ to extend core, stlib, or a gem</h2>\n\n<p>Far too often I&#39;ve needed to extend a class that is being defined\noutside of my project. There are a few ways to deal with this. You can\nuse a <a href=\"http://en.wikipedia.org/wiki/Composite_pattern\">Composite</a> to\ndefine a new class that you can then play around with. The downside to\nthis is that I sometimes want to modify a class that is being inherited\nby other classes. This is when I think it is appropriate to <a href=\"http://en.wikipedia.org/wiki/Monkey_patch\">Monkey\nPatch</a>.</p>\n\n<p>The pattern I have fallen upon is to define a <code>gem_ext/</code> directory and a\n<code>gem_ext.rb</code> file in lib. I then make sure the extensions are loaded up\nusing an initializer. For lack of a better term I call this\n<code>lib_loader.rb</code>. Lets start with the loader.</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\"># config/initializers/lib_loader.rb</span>\n\nrequire <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">gem_ext</span><span class=\"delimiter\">'</span></span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Simple enough. Now for this example I&#39;ll use a <a href=\"http://haml-lang.com/\">Haml</a> custom filter I wrote.\nThis filter allows me to write <a href=\"http://handlebarsjs.com\">Handlebars</a>\ntemplates in my views like so:</p>\n<div class=\"highlight haml \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n</pre></td>\n  <td class=\"code\"><pre>-<span class=\"comment\"># app/views/home/show.html.haml</span>\n\n<span class=\"comment\">:handlebars</span><span class=\"comment\">\n  // handlebars code goes here</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Now I can easily add handlebar templates to any haml file. This is how I\ndid it.</p>\n\n<p>Under <code>lib/gem_ext</code> I defined a <code>haml/</code> directory and a <code>haml.rb</code> file. Then I defined <code>haml/custom_filters.rb</code> and inside that file\nI added</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\"># lib/gem_ext/haml/custom_filters.rb</span>\n\n<span class=\"keyword\">module</span> <span class=\"class\">Haml::Filters</span>\n  <span class=\"keyword\">module</span> <span class=\"class\">Handlebars</span>\n    include <span class=\"constant\">Base</span>\n\n    <span class=\"keyword\">def</span> <span class=\"function\">render_with_options</span>(text, options)\n      type = <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"content\"> type=</span><span class=\"inline\"><span class=\"inline-delimiter\">#{</span>options[<span class=\"symbol\">:attr_wrapper</span>]<span class=\"inline-delimiter\">}</span></span><span class=\"content\">text/x-handlebars</span><span class=\"inline\"><span class=\"inline-delimiter\">#{</span>options[<span class=\"symbol\">:attr_wrapper</span>]<span class=\"inline-delimiter\">}</span></span><span class=\"delimiter\">&quot;</span></span>\n      <span class=\"string\"><span class=\"delimiter\">&lt;&lt;-END</span></span><span class=\"string\"><span class=\"content\">\n&lt;script</span><span class=\"inline\"><span class=\"inline-delimiter\">#{</span>type<span class=\"inline-delimiter\">}</span></span><span class=\"content\">&gt;\n//&lt;![CDATA[\n  </span><span class=\"inline\"><span class=\"inline-delimiter\">#{</span>text.rstrip.gsub(<span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"char\">\\n</span><span class=\"delimiter\">&quot;</span></span>, <span class=\"string\"><span class=\"delimiter\">&quot;</span><span class=\"char\">\\n</span><span class=\"content\">    </span><span class=\"delimiter\">&quot;</span></span>)<span class=\"inline-delimiter\">}</span></span><span class=\"content\">\n//]]&gt;\n&lt;/script&gt;</span><span class=\"delimiter\">\n      END</span></span>\n    <span class=\"keyword\">end</span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Now in <code>haml.rb</code> I added</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\"># lib/gem_ext/haml.rb</span>\n\nrequire <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">gem_ext/haml/custom_filters</span><span class=\"delimiter\">'</span></span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>And finally in <code>gem_ext.rb</code> I added</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n</pre></td>\n  <td class=\"code\"><pre><span class=\"comment\"># lib/gem_ext.rb</span>\n\nrequire <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">gem_ext/haml</span><span class=\"delimiter\">'</span></span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>This gives me a very clean approach to extending classes without\nworrying about muddying up the load path with name collisions or other\nsurprises. In addition this pattern can\nbe repeated for <code>Core</code> and <code>Stdlib</code> classes in <code>core_ext</code> and <code>stdlib_ext</code>\nrespectively.</p>\n\n<h2>Using lib/ as a pattern to extracting Rubygems</h2>\n\n<p>A pattern I have fallen upon when wanting to extract functionality out\nof an app into a Rubygem has been to first extract that code into the\n<code>lib/</code> directoy. From there I have a nice way to test the code in\nisolation. I am also forced to write the code as a class independent\nfrom my app. After I am satisfied with what I have I can think about\nextracting that into an external gem.</p>\n\n<p>A great example of this is something that <a href=\"http://p-rob.me\">Patrick Robertson</a> wrote for\n<a href=\"http://bostonrb.org\">BostonRB</a></p>\n\n<p>We wanted to show the next upcoming event at the top of the website. All\nof our events are stored in a Google Calendar. Unfortunately most of the\nGoogle Calendar gems out there are crap. Patrick decided to roll his\nown.</p>\n\n<p>You can see that the <a href=\"https://github.com/bostonrb/bostonrb/blob/master/lib/boston_rb_calendar.rb\">boston<em>rb</em>calendar.rb</a>\nis requiring several files just like any Gem would. Because of the\nisolation <a href=\"https://github.com/bostonrb/bostonrb/blob/master/spec/lib/boston_rb_calendar_spec.rb\">he was able to test the class very easily</a>.</p>\n\n<p>From here, if Patrick wanted to release this as a gem it wouldn&#39;t take\ntoo much effort. Some renaming of classes would be required but he has\nall of the major parts in place.</p>\n\n<h2>Go forth and show some &lt;3&lt;3&lt;3&lt;3</h2>\n\n<p>Keeping your code clean pays itself forward in many way. The team you\nare apart of or the team you are handing off to will thank you. Heck,\nyour future self might thank you. The patterns I&#39;ve described here are\nones that I have found success with. If you have noticed other patterns\nconcerning the <code>lib/</code> directory please feel free to comment!</p>\n","summary":"Patterns for happy hacking","illustration":null,"illustration_alt":null,"tags":["ruby","ruby-on-rails"],"shallow":false,"date":"2012-02-14T00:00:00Z"},{"id":"ruby/2012/02/13/authenticating-multiple-models-with-a-strategy","title":"Authenticating multiple models with a strategy","dockyarder":"brian-cardarella","body":"<p>A current project requires that there be multiple models that can sign\nin and each one must use the same sign in form. The original\n<code>SessionsController#create</code> action looked like the following:</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">def</span> <span class=\"function\">create</span>\n  <span class=\"keyword\">if</span> user = (<span class=\"constant\">Owner</span>.authenticate(params[<span class=\"symbol\">:user</span>]) || <span class=\"constant\">Employee</span>.authenticate(params[<span class=\"symbol\">:user</span>]))\n    session[<span class=\"symbol\">:user_id</span>]    = user.id\n    session[<span class=\"symbol\">:user_class</span>] = user.class\n    redirect_to dashboard_path\n  <span class=\"keyword\">else</span>\n    render <span class=\"symbol\">:action</span> =&gt; <span class=\"symbol\">:new</span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>We&#39;re using <code>has_secure_password</code> and rolling our own authentication.\nConsidering that, the above was good enough. But... looking down\nthe line for this app it is likely we will have to support authentication\nfor more than just two models on the same form. I also don&#39;t like having\nlogic in my controllers. So I decided to break this logic out and I\nchose the <a href=\"http://en.wikipedia.org/wiki/Strategy_pattern\">Strategy Pattern</a> to help.</p>\n\n<p>I like putting all of my strategies into\n<code>app/strategies</code>. This required me to add this directory to the Rails\n<code>autoload_paths</code>. Simply open up <code>config/application.rb</code>\n(not necessary in Rails 3.1+, thanks Artur Roszczyk)</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre>config.autoload_paths += <span class=\"string\"><span class=\"delimiter\">%W(</span><span class=\"inline\"><span class=\"inline-delimiter\">#{</span>config.root<span class=\"inline-delimiter\">}</span></span><span class=\"content\">/app/strategies</span><span class=\"delimiter\">)</span></span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Next I wrote up a simple spec, thankfully I already had the logic from\nthe controller so there wasn&#39;t much work to be done here. This went into\n<code>spec/strategies/authentication_strategy_spec.rb</code></p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n<strong>10</strong>\n11\n12\n13\n14\n15\n16\n17\n18\n19\n<strong>20</strong>\n21\n22\n23\n24\n25\n26\n27\n28\n29\n<strong>30</strong>\n31\n32\n33\n34\n35\n36\n37\n38\n39\n</pre></td>\n  <td class=\"code\"><pre>require <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">spec_helper</span><span class=\"delimiter\">'</span></span>\n\ndescribe <span class=\"constant\">AuthenticationStrategy</span> <span class=\"keyword\">do</span>\n  context <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">authenticating an owner</span><span class=\"delimiter\">'</span></span> <span class=\"keyword\">do</span>\n    let(<span class=\"symbol\">:owner</span>) { mock(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Owner</span><span class=\"delimiter\">'</span></span>) }\n    before <span class=\"keyword\">do</span>\n      owner.stubs(<span class=\"symbol\">:authenticate</span>).returns(owner)\n      <span class=\"constant\">Owner</span>.stubs(<span class=\"symbol\">:where</span>).returns([owner])\n    <span class=\"keyword\">end</span>\n    it <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">returns an owner</span><span class=\"delimiter\">'</span></span> <span class=\"keyword\">do</span>\n      <span class=\"constant\">AuthenticationStrategy</span>.run(<span class=\"symbol\">:email</span> =&gt; <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">owner@example.com</span><span class=\"delimiter\">'</span></span>, <span class=\"symbol\">:password</span> =&gt; <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">password</span><span class=\"delimiter\">'</span></span>).should eq owner\n    <span class=\"keyword\">end</span>\n  <span class=\"keyword\">end</span>\n\n  context <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">authenticating an employee</span><span class=\"delimiter\">'</span></span> <span class=\"keyword\">do</span>\n    let(<span class=\"symbol\">:employee</span>) { mock(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">Employee</span><span class=\"delimiter\">'</span></span>) }\n    before <span class=\"keyword\">do</span>\n      employee.stubs(<span class=\"symbol\">:authenticate</span>).returns(employee)\n      <span class=\"constant\">Employee</span>.stubs(<span class=\"symbol\">:where</span>).returns([employee])\n    <span class=\"keyword\">end</span>\n    it <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">returns an employee</span><span class=\"delimiter\">'</span></span> <span class=\"keyword\">do</span>\n      <span class=\"constant\">AuthenticationStrategy</span>.run(<span class=\"symbol\">:email</span> =&gt; <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">employee@example.com</span><span class=\"delimiter\">'</span></span>, <span class=\"symbol\">:password</span> =&gt; <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">password</span><span class=\"delimiter\">'</span></span>).should eq employee\n    <span class=\"keyword\">end</span>\n\n  <span class=\"keyword\">end</span>\n\n  describe <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">failing to authenticate</span><span class=\"delimiter\">'</span></span> <span class=\"keyword\">do</span>\n    context <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">with no attributes</span><span class=\"delimiter\">'</span></span> <span class=\"keyword\">do</span>\n      it <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">returns nil</span><span class=\"delimiter\">'</span></span> <span class=\"keyword\">do</span>\n        <span class=\"constant\">AuthenticationStrategy</span>.run.should be_nil\n      <span class=\"keyword\">end</span>\n    <span class=\"keyword\">end</span>\n    context <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">with no match for owner or employee</span><span class=\"delimiter\">'</span></span> <span class=\"keyword\">do</span>\n      it <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">returns nil</span><span class=\"delimiter\">'</span></span> <span class=\"keyword\">do</span>\n        <span class=\"constant\">AuthenticationStrategy</span>.run(<span class=\"symbol\">:email</span> =&gt; <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">test@example.com</span><span class=\"delimiter\">'</span></span>, <span class=\"symbol\">:password</span> =&gt; <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">password</span><span class=\"delimiter\">'</span></span>).should be_nil\n      <span class=\"keyword\">end</span>\n    <span class=\"keyword\">end</span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>Now it was time to make these specs green! The strategy file goes into\n<code>app/strategies/authentication_strategy.rb</code></p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">class</span> <span class=\"class\">AuthenticationStrategy</span>\n  <span class=\"keyword\">def</span> <span class=\"predefined-constant\">self</span>.<span class=\"function\">run</span>(attributes = <span class=\"predefined-constant\">nil</span>)\n    <span class=\"keyword\">return</span> <span class=\"predefined-constant\">nil</span> <span class=\"keyword\">if</span> (attributes.nil? || attributes[<span class=\"symbol\">:email</span>].blank? || attributes[<span class=\"symbol\">:password</span>].blank?)\n    <span class=\"constant\">Owner</span>.authenticate(attributes) || <span class=\"constant\">Employee</span>.authenticate(attributes)\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>And finally to clean up the controller</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n6\n7\n8\n9\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">def</span> <span class=\"function\">create</span>\n  <span class=\"keyword\">if</span> user = <span class=\"constant\">AuthenticationStrategy</span>.run(params[<span class=\"symbol\">:user</span>])\n    session[<span class=\"symbol\">:user_id</span>]    = user.id\n    session[<span class=\"symbol\">:user_class</span>] = user.class\n    redirect_to dashboard_path\n  <span class=\"keyword\">else</span>\n   render <span class=\"symbol\">:action</span> =&gt; <span class=\"symbol\">:new</span>\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>In the end this may appear to be more work than is necessary. Keep in\nmind that app requirements will expand to support more models. The wins should be obvious\nconsidering that context. If the requirements grow to 5 or 6 models perhaps at that point it makes sense to\nactually break the authentication up into <a href=\"http://en.wikipedia.org/wiki/Identity_management\">Identities</a> with a <a href=\"http://guides.rubyonrails.org/association_basics.html#polymorphic-associations\">polymorphic\nassociation</a> to the different models.\nBut we&#39;ll cross that road when we get there.</p>\n","summary":"Using the Strategy Pattern to clean up multiple login paths","illustration":null,"illustration_alt":null,"tags":["ruby","ruby-on-rails","design-patterns"],"shallow":false,"date":"2012-02-13T00:00:00Z"},{"id":"announcement/2012/02/10/russ-jones-is-a-dockyarder","title":"Russ Jones is a DockYarder!","dockyarder":"brian-cardarella","body":"<p><img src=\"/images/russ-jones.png\" alt=\"Russ Jones\"></p>\n\n<p>Russ and I met during the first <a href=\"http://railscamps.com\">Rails Camp New\nEngland</a>. Over the past few years we&#39;ve gotten to know one another and have been looking to collaborate as developers. Last March Russ, myself, and a few others, got together to talk about the possibility of starting our own consultancy. Since getting a bunch of freelancers on the same schedule is difficult, it wasn&#39;t until 8 months later that I was finally able to bring Russ in on a project.</p>\n\n<p>Russ has been developing in Rails since 2006, but has been focusing most of his recent development efforts on the client. When we joined up he immediately took ownership of a mobile web application, bringing some sanity to a combination of Phonegap, jQueryMobile and Backbone. He&#39;s already released a few open source projects for DockYard: <a href=\"https://github.com/dockyard/jquerymobile-backbone\">jquery-backbone</a> and <a href=\"https://github.com/dockyard/ember-jasmine-standalone\">ember-jasmine-standalone</a>.</p>\n\n<p>I&#39;m very happy to announce that Russ has agreed to come on board as a\npartner.</p>\n\n<p>Now I just have to get him to write some blog posts...</p>\n\n<p><a href=\"http://twitter.com/codeofficer\">Follow Russ on Twitter</a></p>\n","summary":"DockYard welcomes Russ Jones as a partner","illustration":null,"illustration_alt":null,"tags":["announcement","office"],"shallow":false,"date":"2012-02-10T00:00:00Z"},{"id":"announcement/2012/02/10/angelo-simeoni-is-a-dockyarder","title":"Angelo Simeoni is a DockYarder!","dockyarder":"brian-cardarella","body":"<p><img src=\"/images/angelo-simeoni.png\" alt=\"Angelo Simeoni\"></p>\n\n<p>I first met Angelo when we both worked at <a href=\"http://zendesk.com\">zendesk</a> two years ago. I had heard about him before this as he had done some redesigns for <a href=\"http://bostonrb.org\">The Boston Ruby Group</a> website. Over the few months that zendesk was in Boston we got to be friends, and when we both left zendesk I knew this was someone I wanted to work with again in the future. That opportunity came when I moved back to Boston in the summer of 2010. For the past year Angelo and I have been collaborating on several projects and I&#39;m happy to announce that he has agreed to come on as a partner for DockYard.</p>\n\n<p>Angelo has been working in Rails for a few years now, and is a master of\nall things CSS. His love for typefaces has influenced me quite a bit in\nhow I approach web design.</p>\n\n<p>You can view a lot of Angelo&#39;s work over at his personal site:\n<a href=\"http://cssboy.com\">CSSBoy</a>.</p>\n\n<p><a href=\"http://twitter.com/cssboy\">Follow Angelo on Twitter</a></p>\n","summary":"DockYard welcomes Angelo Simeoni as a partner","illustration":null,"illustration_alt":null,"tags":["announcement","office"],"shallow":false,"date":"2012-02-10T00:00:00Z"},{"id":"ruby/2012/01/22/client-side-validations-goes-modular","title":"ClientSideValidations goes modular","dockyarder":"brian-cardarella","body":"<p><a href=\"https://github.com/bcardarella/client_side_validations\">ClientSideValidations</a> has been gaining popularity over the past few\nmonths as it is nearing 1000 watchers on Github. With the release of\nRails 3.2.0 I&#39;ve decided to start extracting out all of the non-Rails\ncomponents, such as SimpleForm support and Mongoid support, into their\nown gems. I want to disucss my reasons for doing this as I believe this\npath of modularity is going to mean better gem maintenance, more frequent\nreleases, and the opportunity for the community to really get involved.</p>\n\n<p>Last night I released ClientSideValidations-3.2.0.beta.1 and I have extracted the following into their own gems:</p>\n\n<h5>ORMs</h5>\n\n<ul>\n<li><a href=\"https://github.com/dockyard/client_side_validations-mongoid\">ClientSideValidations-Mongoid</a></li>\n<li><a href=\"https://github.com/dockyard/client_side_validations-mongo_mapper\">ClientSideValidations-MongoMapper</a></li>\n</ul>\n\n<h5>FormBuilders</h5>\n\n<ul>\n<li><a href=\"https://github.com/dockyard/client_side_validations-formtastic\">ClientSideValidations-Formtastic</a></li>\n<li><a href=\"https://github.com/dockyard/client_side_validations-simple_form\">ClientSideValidations-SimpleForm</a></li>\n</ul>\n\n<h2>Going Modular</h2>\n\n<p>The problem with keeping support for the many different ORMs and\nFormBuilders in the ClientSideValidations gem is that there are just too\nmany dependencies doing different things. A great example is with\nMongoid and <a href=\"https://github.com/bcardarella/client_side_validations/issues/253\">ClientSideValidations Issue #253</a>.\nMongoid <code>2.4.0</code> added a <a href=\"https://github.com/mongoid/mongoid/blob/2.4.0-stable/lib/mongoid/validations/presence.rb\">PresenceValidator</a> instead of using\nthe ActiveModel version. This caused translations to fail as they were\nbeing served up directly from Mongoid instead of ActiveModel. I could\nhave fixed this easily in ClientSideValidations but now this means all\nfuture releases would require anyone using a version of Mongoid previous\nto this change to upgrade. There are many reason why you may not want to\nupgrade Mongoid, none of which are my business.</p>\n\n<p>Pulling the Mongoid code out into its own plugin allows this bug to be\nfixed there and I can continue to do bug fixes/feature development in\nClientSideValidations that everyone can benefit from.</p>\n\n<h2>More than just SemVer</h2>\n\n<p>The versions of the plugins now matter. I&#39;ve decided to\nmatch the library they are supporting&#39;s Major and Minor version. For\nexample, with Mongoid the current version is <code>2.4.x</code> so the current\nversion of <a href=\"https://github.com/dockyard/client_side_validations-mongoid\">ClientSideValidations-Mongoid</a>\nis <code>2.4.0</code>. All bug fixes for this version will only bump the patch\nversion. We can then go back and add a <code>2.3.0</code> version that does not\nexpect a Mongoid PresenceValidator and you won&#39;t need to change the\nversion of ClientSideValidations. Simple enough stuff, but it gives the\nlibrary a lot of flexibility.</p>\n\n<h2>Community Support</h2>\n\n<p>I won&#39;t go back and cover every single Major/Minor\nrelease of the different gems. I&#39;m starting with the current versions\nand going to look to the community to send pull-requests to fill in the\ngaps.</p>\n\n<p>With these ORM and FormBuilder gems the community should have a good\nstarting point for writing their own ClientSideValidations plugins.</p>\n\n<p>If someone is looking for a good starting point to build a gem you can\nstart with NestedForm as this is a gem that I did not extract and its\nsupport was dropped.</p>\n\n<p>In addition, I&#39;m looking for help. It would be nice to get some\nmaintainers on the plugins but I&#39;m also looking for someone to lend a\nhand with ClientSideValidations.</p>\n\n<h2>When will it be released?</h2>\n\n<p>I&#39;ve got a bunch of <a href=\"https://github.com/bcardarella/client_side_validations/issues\">issues in\nClientSideValidations</a> I want to fix, I&#39;m\nguessing maybe a week or two to get through all of these. I&#39;ll go\nthrough a few <code>beta</code> gems then a release candidate or two. I am always open to community contributions. If you want to help, please do!</p>\n\n<p>You can start using this today with the beta version. All of the plugins\nrequire the beta version of ClientSideValidations 3.2.0.</p>\n\n<h2>The Future</h2>\n\n<p>Rails <code>3.2.0</code> will be the last <code>3.x</code> version of Rails, and so this will\nalso be the last <code>3.x</code> version of ClientSideValidations. Work is already\nunderway on the <code>4.x</code> version. One of the biggest changes is going to\nhappen on the JavaScript side. Client-side model validations will be the\ngoal. As well as compostite views for the error rendering. Ideally I\nwould like ClientSideValidations to be able to hook into the popular\nJavaScript MVC frameworks.</p>\n","summary":"Brian summarizes the changes to come in ClientSideValidations 3.2.0","illustration":null,"illustration_alt":null,"tags":["ruby","ruby-on-rails","gems"],"shallow":false,"date":"2012-01-22T00:00:00Z"},{"id":"2012/01/04/its-not-a-vacation-follow-up","title":"It's Not A Vacation Follow Up","dockyarder":"brian-cardarella","body":"<p>We have been pretty busy here at DockYard and I haven&#39;t had a chance to\nfollow up on the <a href=\"/2011/12/04/its-not-a-vacation.html\">previous post</a></p>\n\n<p>To recap: DockYard is a distributed team, we decided to switch it up for\na week and go to the same city and work our asses off.</p>\n\n<p>Result: We kicked ass.</p>\n\n<p><img src=\"/images/20120104/danandruss.jpg\" alt=\"Dan Pickett &amp; Russ Jones\"></p>\n\n<p>The city we chose to work from for the week is Providence, RI. It was\nclose enough most of the team to not be expensive to travel to yet far\nenough away to necessitate not going home each night. On top of that,\nProvidence is a very affordable city and it has a tech scene that is\nstarting to take off.</p>\n\n<p><img src=\"/images/20120104/tazza.jpg\" alt=\"Tazza Cafe\"></p>\n\n<p>For the week we worked from <a href=\"http://tazzacaffe.com\">Tazza Cafe</a> and I\nhave only the highest praise for the atmosphere, the food, and the\nstaff. Free wi-fi, never too crowded, amazing food selection, and some\nof the friendliest wait staff I&#39;ve ever seen at anywhere. If you in the\narea, or just passing through, I highly recommend stopping in.</p>\n\n<p>The progress we made during the week was pretty amazing. This type of\nwork is only possible with a great team. We were\nfortuante enough to be joined by <a href=\"http://enlightsolutions.com\">Dan\nPickett</a> along with the DockYard regulars\nof <a href=\"http://cssboy.com\">Angelo Simeoni</a>, <a href=\"http://codeofficer.com\">Russ\nJones</a>, and myself.</p>\n\n<p><img src=\"/images/20120104/downtownprovidence.jpg\" alt=\"Downtown Providence\"></p>\n\n<p>During the week we got to meet many from the local tech scene. Monday\nnight we crashed a <a href=\"http://betaspring\">Betaspring</a> event and Thursday we\nhosted our own Providence Pub Crawl hitting <a href=\"http://as220.org/\">AS220</a>,\n<a href=\"http://www.trinitybrewhouse.com\">Trinity Brewhouse</a>, Union Station\nBrewery, <a href=\"http://www.trinitybrewhouse.com\">Rira</a>, and ending up at\nTazza. It was a great way to end a great week. We&#39;ll be doing this again\nin the future.</p>\n","summary":null,"illustration":null,"illustration_alt":null,"tags":["office"],"shallow":false,"date":"2012-01-04T00:00:00Z"},{"id":"2011/12/04/its-not-a-vacation","title":"It's Not A Vacation","dockyarder":"brian-cardarella","body":"<h3>DockYard is invading The Ocean State!</h3>\n\n<p><img src=\"/images/ocean_state.jpg\" alt=\"Ocean State\"></p>\n\n<p>There is one annoying issue working with a remote team:\nEverybody is remote. There is something lost when you don&#39;t get to see the people you&#39;re working with.\nApps like Skype have made a difference how remote work is done. We&#39;re\nnot any less productive, but it&#39;s difficult to grab drinks with co-workers\nwhen they&#39;re 2 hours away.</p>\n\n<p>To that end we&#39;ve decided to work from a city for a week once every\nfew months. We&#39;ll pack up, grab a hotel, and lock ourselves in a coffee\nshop to get a crazy amount of work done. Our girlfriends and wives\nmight disagree but we&#39;re calling this: <strong>It&#39;s Not A Vacation</strong></p>\n\n<p>We&#39;re very serious about this, the entire week is a dedicated work week.\nWe&#39;ve set some ambitious goals for our client applications and we&#39;re\nall pretty fired up to get going. There is something interesting that\nhappens to productivity with you shake things up.</p>\n\n<p>This is of course all experimental so I&#39;ll write a follow up at the end\nof the week on how things went.</p>\n","summary":null,"illustration":null,"illustration_alt":null,"tags":["office"],"shallow":false,"date":"2011-12-04T00:00:00Z"},{"id":"ruby/2011/11/18/convert-ruby-regexp-to-javascript-regex","title":"Convert Ruby Regexp to JavaScript RegExp","dockyarder":"brian-cardarella","body":"<p>This has a very limited use case, but I needed it for\n<a href=\"http://github.com/bcardarella/client_side_validations\">ClientSideValidations</a>. It took a while\nto track down some of the possible conversion issues, I figure someone\nelse might find this useful.</p>\n<div class=\"highlight ruby \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n2\n3\n4\n5\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">class</span> <span class=\"class\">Regexp</span>\n  <span class=\"keyword\">def</span> <span class=\"function\">to_javascript</span>\n    <span class=\"constant\">Regexp</span>.new(inspect.sub(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"char\">\\\\</span><span class=\"content\">A</span><span class=\"delimiter\">'</span></span>,<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">^</span><span class=\"delimiter\">'</span></span>).sub(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"char\">\\\\</span><span class=\"content\">Z</span><span class=\"delimiter\">'</span></span>,<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">$</span><span class=\"delimiter\">'</span></span>).sub(<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"char\">\\\\</span><span class=\"content\">z</span><span class=\"delimiter\">'</span></span>,<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">$</span><span class=\"delimiter\">'</span></span>).sub(<span class=\"regexp\"><span class=\"delimiter\">/</span><span class=\"content\">^</span><span class=\"char\">\\/</span><span class=\"delimiter\">/</span></span>,<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"delimiter\">'</span></span>).sub(<span class=\"regexp\"><span class=\"delimiter\">/</span><span class=\"char\">\\/</span><span class=\"content\">[a-z]*$</span><span class=\"delimiter\">/</span></span>,<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"delimiter\">'</span></span>).gsub(<span class=\"regexp\"><span class=\"delimiter\">/</span><span class=\"char\">\\(</span><span class=\"char\">\\?</span><span class=\"content\">#.+</span><span class=\"char\">\\)</span><span class=\"delimiter\">/</span></span>, <span class=\"string\"><span class=\"delimiter\">'</span><span class=\"delimiter\">'</span></span>).gsub(<span class=\"regexp\"><span class=\"delimiter\">/</span><span class=\"char\">\\(</span><span class=\"char\">\\?</span><span class=\"content\">-</span><span class=\"char\">\\w</span><span class=\"content\">+:</span><span class=\"delimiter\">/</span></span>,<span class=\"string\"><span class=\"delimiter\">'</span><span class=\"content\">(</span><span class=\"delimiter\">'</span></span>), <span class=\"predefined-constant\">self</span>.options).inspect\n  <span class=\"keyword\">end</span>\n<span class=\"keyword\">end</span>\n</pre></td>\n</tr></table>\n</div></div>\n<p>When you render it to the client simply instantiate a new <code>RegExp</code>\nobject with the resulting string:</p>\n<div class=\"highlight javascript \"><div class=\"ribbon\"></div><div class=\"scroller\"><table class=\"CodeRay\"><tr>\n  <td class=\"line-numbers\"><pre>1\n</pre></td>\n  <td class=\"code\"><pre><span class=\"keyword\">new</span> RegExp(regexpStringFromRuby);\n</pre></td>\n</tr></table>\n</div></div>\n<p>If there are any edge-cases that won&#39;t convert cleanly please report\nthem in the comments.</p>\n\n<p>See how it is being used in <code>ClientSideValidations</code> <a href=\"https://github.com/bcardarella/client_side_validations/blob/master/lib/client_side_validations/core_ext/regexp.rb\">to_json</a>\n<a href=\"https://github.com/bcardarella/client_side_validations/blob/master/test/core_ext/cases/test_core_ext.rb\">tests cases</a></p>\n","summary":"A simple extraction from ClientSideValidations","illustration":null,"illustration_alt":null,"tags":["ruby","javascript"],"shallow":false,"date":"2011-11-18T00:00:00Z"},{"id":"2011/11/14/github-is-one-commit-away-from-being-the-ultimate-blog-engine","title":"GitHub Is One Commit Away From Being The Ultimate Blog Engine","dockyarder":"brian-cardarella","body":"<p>This past August <a href=\"https://github.com/blog/905-edit-like-an-ace\">GitHub released file editing using the Ace code\neditor</a>. It&#39;s pretty damn\nawesome if you haven&#39;t tried it. Basically, you get\n<a href=\"http://macromates.com\">TextMate</a> in your\nbrowser. Here at <a href=\"https://dockyard.com\">DockYard</a> we&#39;ve been using\n<a href=\"http://pages.github.com/\">GitHub Pages</a> to host this blog. The posts\nare written in <a href=\"https://github.com/mojombo/jekyll\">Jekyll</a>. So we&#39;re\ndoing all of our post creation and editing locally.</p>\n\n<h2>The Dream</h2>\n\n<p>It would be great if GitHub allowed us to create new <a href=\"http://book.git-scm.com/1_the_git_object_model.html\">blobs</a> from the web interface.\nAt that point GitHub would be a full-service blog engine. Think about it, they already do the\nhosting, version tracking, and editing of files through the web\ninterface. If file creation was added that&#39;s pretty much all I would\nwant. (<a href=\"https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter\">Jekyll has a way to track drafts by setting the <code>published</code>\nflag</a>)</p>\n\n<p>So if anybody at GitHub is reading, can we please have this feature?</p>\n","summary":null,"illustration":null,"illustration_alt":null,"tags":["opinion"],"shallow":false,"date":"2011-11-14T00:00:00Z"},{"id":"2011/11/10/mobile-web-apps","title":"Mobile Web Apps Still Have Some Major Hurdles","dockyarder":"brian-cardarella","body":"<p>Over the past 24 hours I&#39;ve seen several articles (<a href=\"http://venturebeat.com/2011/11/09/mobile-web/\">1</a>,<a href=\"http://www.guardian.co.uk/technology/blog/2011/nov/03/will-html5-replace-native-apps\">2</a>) on <a href=\"http://news.ycombinator.com\">Hacker News</a>\npredicting that in the near future mobile web apps are going to\nreplace their native counterparts. Here at DockYard we really hope this\nhappens. We believe in the mobile web and have decided forego regular\nweb application development in favor of focusing on mobile web\napplication development. However, experience has told us the future is not as nigh as we\nall hope.</p>\n\n<p>Native applications (iOS, Android, etc.) still have and will continue\nto have some significant advantages over mobile web apps. Let&#39;s start\nwith the obvious...</p>\n\n<h3>Native functionality</h3>\n\n<p>Having access to mobile hardware such as the camera, microphone, and\nstorage (file system, internal datbases, etc...) is important. There is also the issue\nof running the application in the background. None of this is currently\npossible in a mobile web application. Immediately the scope of a mobile\nweb application is much smaller.</p>\n\n<p>The <a href=\"http://www.w3.org/TR/html-media-capture/\">W3C has a working draft of what a media capture API should\nbe</a>. It may be a\nmatter of time until we see mobile browsers begin to provide access to\nthis native functionality. Personally, I would like to see this API\ndeveloped further. In its current form it is simply a delegator API to\nthe camera and microphone applications. We hand off application control and wait for a\ncallback that has the list of media just captured. This is not good\nenough. How can a mobile web application compete with the many\ndifferent native camera applications that exist with custom camera\nfunctionality if there is no way to\ncustomize the camera experience? Simple: it can&#39;t. Augmented reality\nmobile web application? Nope. What about something as simple as skinning\nthe camera? Not with the current working draft of the MediaCapture API.</p>\n\n<p>Most mobile web browsers implement the HTML canvas element. So mobile\nweb gaming is possible. But what we really want is hardware accelerated\nWebGL. It&#39;s not here yet. We&#39;re still waiting for the desktop\ncanvas apps to close the gap between their native desktop counterparts.\nMobile web gaming will not be competing with native mobile gaming\nanytime soon.</p>\n\n<h3>Performance</h3>\n\n<p>Native is the clear winner here but with each new generation of phone\nhardware the lead is becoming less noticeable. In fact, I&#39;m going to\npredict that in the 2nd half of 2012 (iPhone5, assuming Apple goes back\nto the previous iPhone release cycle) for everything\nexcept gaming, the difference will be negligible.</p>\n\n<p>We&#39;re getting closer and closer to the point of convergence. Hardware is\ngetting faster, JavaScript VMs are getting faster. Native and mobile web\napps will never be equally as fast, native will <strong>always</strong> be faster.\nWith each generation of mobile hardware we will care less because the gap will continue to get asymptotically\nsmaller.</p>\n\n<p>This current performance gap can be felt most with <a href=\"http://jquerymobile.com\">jQuery\nMobile</a>. We use jQuery Mobile, we believe in\nit. On the latest iPhone 4S there is still a noticeable lag when\ndoing page trasitions, even on mobile web applications that have very few\npages of low complexity. The page enhancement algorithm does <strong>a lot</strong> of\nDOM manipulation and hoop jumping. Elements are pulled out of the DOM,\nwrapped, reinserted. In the end it allows us to\nprovide very little markup and get some beautiful results.</p>\n\n<p>As of this writing jQuery Mobile is in 1.0 Release Candidate 2. On the bucket\nlist for 1.0 Gold is a <a href=\"https://github.com/jquery/jquery-mobile/issues/2853\">performance boost for page enhancement</a>.\n<a href=\"https://twitter.com/#!/jquerymobile/status/133670336318291969\">Most likely this will only have an effect upon very complex pages</a>.\nClosing the performance gap on jQuery Mobile is going to be a watershed\nmoment for mobile web application development.</p>\n\n<h3>Distribution</h3>\n\n<p>Nothing beats the web as a distribution platform. Every time I use a web\napp I am on the latest version of that app. If there are any business\ncritical updates they are immediately available for everybody. Native\nmobile applications are at a clear disadvantage here. We&#39;re comparing a\npassive opt-in system to an active apt-in system.</p>\n\n<p>One disadvantage (for now) that mobile web applications have is\naccessibility after distribution. Native apps default to installing on\nyour phone, mobile web applications do not. Yes, you can save links to\nthe mobile web app and make it appear you have it installed. But what\nabout off-line mode?</p>\n\n<h3>Discovery</h3>\n\n<p>I&#39;m going to argue that native applications win here. Finding a native\nmobile application is easier than finding a mobile web application.\nGoogle has made a large dent for the web with Chrome&#39;s Omnibar. (btw,\nwhy hasn&#39;t everybody copied the omnibar? This should be the default for mobile\nweb browsers, screen real estate is already at a premium.)</p>\n\n<p>That being said, discovery for native is not great. We&#39;ve\nall see the studies where the Top 10 apps have a significantly skewed\ndownload rate compared to the below Top 10. This is be expected. I don&#39;t\nunderstand why the mobile app stores have not put more effort into\nperfecting discovery. I&#39;m more likely to purchase an application that I\nlike if I can find it easily.</p>\n\n<h3>PhoneGap (Apache Callback)</h3>\n\n<p>If you&#39;ve made it this far you&#39;ve probably been yelling at your screen\n&quot;<strong>PhoneGap!</strong>&quot; to several of the points I&#39;ve made above. Yes, PhoneGap solves many of these problems. But how do\nwe define a PhoneGap application? The technology stack I&#39;m using is that\nof a mobile web application: HTML, CSS, JavaScript. However, the\ndistribution and discovery systems I am using are that of a native\napplication. PhoneGap application straddle the fence between the two\nworlds.</p>\n\n<p>For those that don&#39;t know, PhoneGap extends a WebUI. It will add certain\nfunctionality to the JavaScript API. Access to the camera, microphone,\nfile system <a href=\"http://docs.phonegap.com/en/1.2.0/index.html\">as well as many other wonderful features</a>.\nThe PhoneGap developers were smart, they saw the W3C&#39;s proposed API for\nsome of this and modeled the PhoneGap API after it. In fact, PhoneGap\nshould acts as a polyfill if certain functionality already exists.</p>\n\n<p>From a developer&#39;s point of view, PhoneGap in most cases should be a no\nbrainer. I am most likely developing a web site alongside the mobile\napplication. The website is likely going to be sharing the\nfunctionality of the mobile application. It makes sense if my\nmobile application can share a technology stack with my web application.\nI don&#39;t have to employ a separate team to develop the mobile\napplication, and if you want to target more than one mobile platform\nyou&#39;ll most likely have to employ more than one team.</p>\n\n<p>From our perspective PhoneGap gives us a\nhuge advantage. Why pay two teams to develop the same application when you\npay us once? Then when we hand off the team maintaining and developing\nyour website can also maintain and develop the mobile application. It&#39;s\na no-brainer. In most cases.</p>\n\n<p>There are some serious issues with the PhoneGap project. The first of\nwhich is the difficulty in reporting errors. This will hopefully change\nnow that the project is under Apache (as <a href=\"http://wiki.phonegap.com/w/page/46311152/apache-callback-proposal\">Apache Callback</a>)\nbut the project has been split into different Github repos for each\nplatform. So there is one for <a href=\"https://github.com/phonegap/phonegap-iphone\">iOS</a>, <a href=\"https://github.com/phonegap/phonegap-android\">Android</a>, <a href=\"https://github.com/phonegap/phonegap-wp7\">Windows Phone 7</a>, <a href=\"https://github.com/phonegap/phonegap-blackberry-webworks\">BlackBerry</a>, <a href=\"https://github.com/phonegap/phonegap-webos\">WebOS</a>, etc... they are all under separate development with very dedicated teams. If I find a common problem that affects all platforms (for example, <a href=\"https://github.com/phonegap/phonegap-iphone/issues/280\">a suggestion I proposed on how PhoneGap currently implements its File API</a>) I have to report this issue individually on each platform. This is a very inefficient process.</p>\n\n<p>The second is the same issue stated above with the camera. While PhoneGap does give us the access to the camera we are still stuck\nwith the same experience we will have with the W3C MediaCapture API: no\ncamera customization, this is just a delegation with a callback. You can\nhack together the camera experience you want if decide to write some\nnative code.</p>\n\n<p>The third is lack of any background processing. When I throw my PhoneGap\napp into the background it does nothing. It would be nice if we could\nget a callback in the PhoneGap API that allowed us to kick off function\nif the app is sent to the background. When it is up front again give us\nanother callback to halt the previous function.</p>\n\n<p><a href=\"http://wiki.phonegap.com/w/page/36752779/PhoneGap%20Plugins\">Check out the &quot;Limitations&quot; section on the PhoneGap wiki for some\nothers</a>.</p>\n\n<p>PhoneGap is fantastic (despite some of the criticism I&#39;ve stated). We have\nhigh hopes for the project now that it is accepted into Apache.</p>\n\n<h2>Conclusion</h2>\n\n<p>Perhaps <a href=\"http://techland.time.com/2011/11/09/mobile-flash-abandoned-for-html5-adobe-surrenders-apple-wins/?iid=tl-main-lede\">Adobe&#39;s announcement that they are abandoning Flash in\nfavor of HTML5 for mobile</a> will be seen as the turning point when\nmobile web application development begins to be a serious contender to\nnative. Or maybe it is just a coincidence that this buzz is happening\nall at once. Either way, we&#39;re happy\npeople are talking about this. Discussions, arguments, and all of the\nattention in between are the best way to push this technology into the\nfuture we all know is just a matter of time.</p>\n\n<p>As my friend <a href=\"http://twitter.com/cykod\">Pascal Rettig</a> says: It is a great time to be a web developer.</p>\n","summary":"Brian summarizes DockYard's experience thus far with mobile web apps and some of the existing challenges to compete with native","illustration":null,"illustration_alt":null,"tags":["mobile","mobile-web"],"shallow":false,"date":"2011-11-10T00:00:00Z"},{"id":"2011/08/24/launch","title":"DockYard is launched!","dockyarder":"brian-cardarella","body":"<p>DockYard has officially launched!</p>\n\n<p>Hoo-ray!</p>\n\n<p><img src=\"/images/hooraybeer.jpg\" alt=\"Hoo-ray!\"></p>\n","summary":null,"illustration":null,"illustration_alt":null,"tags":["announcement"],"shallow":false,"date":"2011-08-24T00:00:00Z"}],
  "tags": [{"id":"javascript","name":"JavaScript"},{"id":"elixir","name":"Elixir"},{"id":"phoenix","name":"Phoenix"},{"id":"testing","name":"Testing"},{"id":"design","name":"Design"},{"id":"design-process","name":"Design Process"},{"id":"design-thinking","name":"Design Thinking"},{"id":"conferences","name":"Conferences"},{"id":"uxcamp","name":"Uxcamp"},{"id":"uxeast","name":"Uxeast"},{"id":"ember","name":"Ember.js"},{"id":"components","name":"Components"},{"id":"addon","name":"Addon"},{"id":"design-research","name":"Design Research"},{"id":"benchmarking","name":"Benchmarking"},{"id":"design-strategy","name":"Design Strategy"},{"id":"business","name":"Business"},{"id":"announcement","name":"Announcement"},{"id":"opinion","name":"Opinion"},{"id":"engineering","name":"Engineering"},{"id":"user-experience","name":"User Experience"},{"id":"html","name":"Html"},{"id":"ruby","name":"Ruby"},{"id":"observations","name":"Observations"},{"id":"project-management","name":"Project Management"},{"id":"lean","name":"Lean"},{"id":"agile","name":"Agile"},{"id":"jobs","name":"Jobs"},{"id":"team","name":"Team"},{"id":"quality","name":"Quality"},{"id":"workflow","name":"Workflow"},{"id":"automation","name":"Automation"},{"id":"ux-design","name":"Ux Design"},{"id":"research","name":"Research"},{"id":"discovery","name":"Discovery"},{"id":"ember-cli","name":"Ember-cli"},{"id":"vim","name":"Vim"},{"id":"broccoli","name":"Broccoli"},{"id":"interaction","name":"Interaction"},{"id":"native-web","name":"Native Web"},{"id":"culture","name":"Culture"},{"id":"privacy","name":"Privacy"},{"id":"css","name":"Css"},{"id":"process","name":"Process"},{"id":"htmlbars","name":"Htmlbars"},{"id":"marketing","name":"Marketing"},{"id":"tools","name":"Tools"},{"id":"web-development","name":"Web Development"},{"id":"planning","name":"Planning"},{"id":"client","name":"Client"},{"id":"art","name":"Art"},{"id":"inspiration","name":"Inspiration"},{"id":"storytelling","name":"Storytelling"},{"id":"information-graphics","name":"Information Graphics"},{"id":"experiments","name":"Experiments"},{"id":"advertising","name":"Advertising"},{"id":"best-practices","name":"Best Practices"},{"id":"prototyping","name":"Prototyping"},{"id":"diy","name":"DIY"},{"id":"events","name":"Events"},{"id":"swift","name":"Swift"},{"id":"ruby-on-rails","name":"Ruby on Rails"},{"id":"postgresql","name":"PostgreSQL"},{"id":"postgres_ext","name":"Postgres_ext"},{"id":"illustration","name":"Illustration"},{"id":"es6","name":"ES6"},{"id":"business-development","name":"Business Development"},{"id":"mobile","name":"Mobile"},{"id":"services","name":"Services"},{"id":"postgis","name":"Postgis"},{"id":"postgres_ext-postgis","name":"Postgres_ext-postgis"},{"id":"office","name":"Office"},{"id":"consulting","name":"Consulting"},{"id":"community","name":"Community"},{"id":"design-patterns","name":"Design Patterns"},{"id":"gems","name":"Gems"},{"id":"context-validation","name":"Context Validation"},{"id":"intern","name":"Intern"},{"id":"training","name":"Training"},{"id":"products","name":"Products"},{"id":"ember-libraries","name":"Ember Libraries"},{"id":"politics","name":"Politics"},{"id":"backbone","name":"Backbone.js"},{"id":"jquery","name":"jQuery"},{"id":"linux","name":"Linux"},{"id":"code-guidelines","name":"Code Guidelines"},{"id":"mobile-web","name":"Mobile Web"}]
}
